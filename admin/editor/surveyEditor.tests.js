var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SurveyObjectEditorTests;
(function (SurveyObjectEditorTests) {
    var Tests;
    (function (Tests) {
        var Car = (function () {
            function Car() {
            }
            Car.prototype.getType = function () { return "car"; };
            return Car;
        }());
        Tests.Car = Car;
        var FastCar = (function (_super) {
            __extends(FastCar, _super);
            function FastCar() {
                _super.apply(this, arguments);
            }
            FastCar.prototype.getType = function () { return "fast"; };
            return FastCar;
        }(Car));
        Tests.FastCar = FastCar;
        var BigCar = (function (_super) {
            __extends(BigCar, _super);
            function BigCar() {
                _super.apply(this, arguments);
            }
            BigCar.prototype.getType = function () { return "big"; };
            return BigCar;
        }(Car));
        Tests.BigCar = BigCar;
        var SportCar = (function (_super) {
            __extends(SportCar, _super);
            function SportCar() {
                _super.apply(this, arguments);
            }
            SportCar.prototype.getType = function () { return "sport"; };
            return SportCar;
        }(FastCar));
        Tests.SportCar = SportCar;
        var Truck = (function (_super) {
            __extends(Truck, _super);
            function Truck() {
                _super.apply(this, arguments);
            }
            Truck.prototype.getType = function () { return "truck"; };
            return Truck;
        }(BigCar));
        Tests.Truck = Truck;
        var TruckDefaultValue = (function (_super) {
            __extends(TruckDefaultValue, _super);
            function TruckDefaultValue() {
                _super.apply(this, arguments);
            }
            TruckDefaultValue.prototype.getType = function () { return "truckDefault"; };
            Object.defineProperty(TruckDefaultValue.prototype, "title", {
                get: function () {
                    return "!" + this.titleValue + "!";
                },
                set: function (value) {
                    this.titleValue = value;
                },
                enumerable: true,
                configurable: true
            });
            return TruckDefaultValue;
        }(Truck));
        Tests.TruckDefaultValue = TruckDefaultValue;
        Survey.JsonObject.metaData.addClass("fast", [], function () { return new FastCar(); }, "car");
        Survey.JsonObject.metaData.addClass("big", [], null, "car");
        Survey.JsonObject.metaData.addClass("car", ["name"]);
        Survey.JsonObject.metaData.addClass("truck", ["maxWeight:number"], function () { return new Truck(); }, "big");
        Survey.JsonObject.metaData.addClass("sport", ["!maxSpeed:number"], function () { return new SportCar(); }, "fast");
        Survey.JsonObject.metaData.addClass("truckDefault", ["isNew:boolean", "title:string"], function () { return new TruckDefaultValue(); }, "truck");
        //TODO add onGetValue into the line above.
        var properties = Survey.JsonObject.metaData.getProperties("truckDefault");
        for (var i = 0; i < properties.length; i++) {
            if (properties[i].name == "title") {
                properties[i].onGetValue = function (obj) { return obj.titleValue; };
                break;
            }
        }
    })(Tests = SurveyObjectEditorTests.Tests || (SurveyObjectEditorTests.Tests = {}));
})(SurveyObjectEditorTests || (SurveyObjectEditorTests = {}));

/// <reference path="../src/objectEditor.ts" />
/// <reference path="ObjectEditorTestedClasses.ts" />
var SurveyObjectEditorTests;
(function (SurveyObjectEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("objectEditorTests");
        QUnit.test("Created properties on set selected Object", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            assert.equal(editor.koProperties().length, 0, "No properties for null object");
            editor.selectedObject = new Tests.BigCar();
            assert.equal(editor.koProperties().length, 1, "One property object");
            assert.equal(editor.koProperties()[0].name, "name", "name property");
            assert.equal(editor.koProperties()[0].editorType, "string", "It is a text editor");
            editor.selectedObject = new Tests.Truck();
            assert.equal(editor.koProperties().length, 2, "Two property object");
            assert.equal(editor.koProperties()[0].name, "maxWeight", "maxWeight property");
            assert.equal(editor.koProperties()[1].name, "name", "name property");
        });
        QUnit.test("Get Property Value", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            var car = new Tests.Truck();
            car.name = "truckCar";
            car.maxWeight = 20000;
            editor.selectedObject = car;
            assert.equal(editor.koProperties()[1].koValue(), "truckCar", "get name property");
            assert.equal(editor.koProperties()[0].koValue(), 20000, "get maxWeight property");
        });
        QUnit.test("isDefault property value", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            var car = new Tests.TruckDefaultValue();
            editor.selectedObject = car;
            var property = editor.getPropertyEditor("isNew");
            assert.equal(property.koIsDefault(), true, "the value is default");
            assert.equal(property.editorType, "boolean", "It is a boolean editor");
            car.isNew = true;
            editor.ObjectChanged();
            assert.equal(property.koIsDefault(), false, "the value is not default");
        });
        QUnit.test("Active property", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            assert.equal(editor.koActiveProperty(), null, "no properties");
            editor.selectedObject = new Tests.TruckDefaultValue();
            assert.equal(editor.koActiveProperty().name, "name", "name property is active by default");
        });
        QUnit.test("On property changed", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            var car = new Tests.TruckDefaultValue();
            car.name = "myName";
            var callCounter = 0;
            editor.onPropertyValueChanged.add(function (sender, options) { car.name = options.newValue; callCounter++; });
            editor.selectedObject = car;
            editor.koActiveProperty().koValue("newName");
            assert.equal(car.name, "newName", "on property changed event is working");
            assert.equal(callCounter, 1, "It should be called only one time");
        });
        QUnit.test("Use metadata getPropertyValue function", function (assert) {
            var editor = new SurveyEditor.SurveyObjectEditor();
            var car = new Tests.TruckDefaultValue();
            car.title = "test";
            editor.selectedObject = car;
            var property = editor.getPropertyEditor("title");
            editor.koActiveProperty().koValue("newName");
            assert.equal(property.koText(), "test", "use the real value to get value");
        });
    })(Tests = SurveyObjectEditorTests.Tests || (SurveyObjectEditorTests.Tests = {}));
})(SurveyObjectEditorTests || (SurveyObjectEditorTests = {}));

/// <reference path="../src/editor.ts" />
var SurveyObjectEditorTests;
(function (SurveyObjectEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("surveyEditorTests");
        QUnit.test("Set Text property", function (assert) {
            var editor = new SurveyEditor.SurveyEditor();
            var json = {
                questions: [
                    {
                        type: "checkbox", name: "car", title: "What car are you driving?", isRequired: true,
                        colCount: 4, choices: ["None", "Ford", "Vauxhall", "Volkswagen", "Nissan", "Audi", "Mercedes-Benz", "BMW", "Peugeot", "Toyota", "Citroen"]
                    }
                ]
            };
            var jsonText = JSON.stringify(json);
            editor.text = jsonText;
            assert.equal(editor.koIsShowDesigner(), true);
            assert.equal(editor.survey.getAllQuestions().length, 1, "There is one question");
            assert.equal(editor.survey.getAllQuestions()[0].name, "car", "The question converted successufull");
            jsonText = jsonText.substr(5);
            editor.text = jsonText;
            assert.equal(editor.koIsShowDesigner(), false);
        });
        QUnit.test("Copy Question", function (assert) {
            var editor = new SurveyEditor.SurveyEditor();
            editor.text = JSON.stringify(getSurveyJson());
            assert.equal(editor.koCopiedQuestions().length, 0, "There is no copied question yet.");
            editor.copyQuestion(editor.survey.getAllQuestions()[0]);
            assert.equal(editor.koCopiedQuestions().length, 1, "There is one copied question now.");
            assert.equal(editor.koCopiedQuestions()[0].name, "question1", "The copied question is 'question1'");
            editor.copyQuestion(editor.survey.getAllQuestions()[0]);
            assert.equal(editor.koCopiedQuestions().length, 1, "There is still one copied question now.");
            assert.equal(editor.koCopiedQuestions()[0].name, "question1", "The copied question is 'question1'");
        });
        QUnit.test("options.questionTypes", function (assert) {
            var allTypes = Survey.QuestionFactory.Instance.getAllTypes();
            var editor = new SurveyEditor.SurveyEditor(null, null);
            assert.equal(editor.questionTypes.length, allTypes.length, "All types are accepted");
            editor = new SurveyEditor.SurveyEditor(null, { questionTypes: ["text", "dropdown", "unknown"] });
            assert.equal(editor.questionTypes.length, 2, "Only two types from three are accepted");
        });
        QUnit.test("Editor state property", function (assert) {
            var editor = new SurveyEditor.SurveyEditor();
            editor.saveSurveyFunc = function (no, doSaveCallback) {
                doSaveCallback(no, true);
            };
            editor.text = JSON.stringify(getSurveyJson());
            assert.equal(editor.state, "");
            editor.addPage();
            assert.equal(editor.state, "modified");
            editor.saveButtonClick();
            assert.equal(editor.state, "saved");
            /*
            editor.addPage();
            assert.equal(editor.state, "modified");
            editor.doUndoClick();
            assert.equal(editor.state, "saved");
            editor.doRedoClick();
            assert.equal(editor.state, "modified");
            */
        });
        QUnit.test("Do not reload surey on 'Designer' tab click", function (assert) {
            var editor = new SurveyEditor.SurveyEditor();
            editor.text = JSON.stringify(getSurveyJson());
            var pageCount = editor.survey.PageCount;
            editor.addPage();
            assert.equal(editor.survey.PageCount, pageCount + 1, "new Page is added");
            editor.selectDesignerClick();
            assert.equal(editor.survey.PageCount, pageCount + 1, "new Page is stil there");
            editor.selectTestClick();
            assert.equal(editor.survey.PageCount, pageCount + 1, "new Page is stil there");
        });
        function getSurveyJson() {
            return {
                pages: [{
                        name: 'page1', questions: [{ type: 'text', name: 'question1' },
                            { name: "question2", choices: ["one", { value: "two", text: "second value" }, { value: 3, text: "third value" }], type: "checkbox" }]
                    },
                    { name: 'page2', questions: [{ name: "question3", type: "comment" }] },
                    {
                        name: 'page3', questions: [{ name: "question4", columns: ["Column 1", "Column 2", "Column 3"], rows: ["Row 1", "Row 2"], type: "matrix" },
                            { name: "question5", type: "rating" }]
                    }]
            };
        }
    })(Tests = SurveyObjectEditorTests.Tests || (SurveyObjectEditorTests.Tests = {}));
})(SurveyObjectEditorTests || (SurveyObjectEditorTests = {}));

/// <reference path="../src/json5.ts" />
var SurveyObjectEditorTests;
(function (SurveyObjectEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("JSON5Tests");
        QUnit.test("Simple test", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(1);
            var obj = json5.parse("{ questions: [{ type: 'text', name: 'temp', size: 20 }]}");
            assert.equal(obj.questions.length, 1, "parsed correctly");
            assert.equal(obj["pos"].start, 0, "add 'pos' property");
        });
        QUnit.test("parse only part of the string", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(1);
            var obj = json5.parse("0123456789{ questions: [{ type: 'text', name: 'temp', size: 20 }]}0123456789", null, 10, 66);
            assert.equal(obj.questions.length, 1, "parsed correctly");
            assert.equal(obj["pos"].start, 10, "add 'pos' property");
        });
        QUnit.test("Full information about positions", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(2);
            var obj = json5.parse("{ questions: [{ type: 'text', name: 'temp', size: 20 }]}");
            var qPos = obj["pos"]["questions"];
            assert.equal(qPos.start, 2, "start question property");
            assert.equal(qPos.valueStart, 12, "start question property value");
            assert.equal(qPos.end, 54, "end question property");
        });
        QUnit.test("Full information about positions - several properties", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(2);
            var obj = json5.parse("{ type: 'text', name: 'temp', size: 20 }");
            var pos = obj["pos"]["type"];
            assert.equal(pos.start, 2, "start question property for 'type'");
            assert.equal(pos.valueStart, 7, "start question property value for 'type'");
            assert.equal(pos.valueEnd, 13, "end question property value for 'type'");
            assert.equal(pos.end, 14, "end question property for 'type'");
            pos = obj["pos"]["name"];
            assert.equal(pos.start, 14, "start question property for 'name'");
            assert.equal(pos.valueStart, 21, "start question property value for 'name'");
            assert.equal(pos.valueEnd, 27, "end question property value for 'name'");
            assert.equal(pos.end, 27, "end question property for 'name'");
            pos = obj["pos"]["size"];
            assert.equal(pos.start, 28, "start question property for 'size'");
            assert.equal(pos.valueStart, 35, "start question property value for 'size'");
            assert.equal(pos.valueEnd, 37, "end question property value for 'size'");
            assert.equal(pos.end, 37, "end question property for 'size'");
        });
        QUnit.test("Full information about positions - array", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(2);
            var obj = json5.parse("{ choices:[0, 1]}");
            var pos = obj["pos"]["choices"];
            assert.equal(pos.start, 2, "start question property");
            assert.equal(pos.valueStart, 10, "start question property value");
            assert.equal(pos.end, 15, "end question property for");
        });
        QUnit.test("Empty Json test", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(1);
            var obj = json5.parse("{ }  ");
            assert.equal(obj["pos"].start, 0, "start 'pos' position");
            assert.equal(obj["pos"].end, 2, "end 'pos' position");
        });
        QUnit.test("One property Json test", function (assert) {
            var json5 = new SurveyEditor.SurveyJSON5(1);
            var obj = json5.parse("{ v:1 }  ");
            assert.equal(obj["pos"].start, 0, "start 'pos' position");
            assert.equal(obj["pos"].end, 6, "end 'pos' position");
        });
    })(Tests = SurveyObjectEditorTests.Tests || (SurveyObjectEditorTests.Tests = {}));
})(SurveyObjectEditorTests || (SurveyObjectEditorTests = {}));

/// <reference path="../src/editorLocalization.ts" />
var SurveyEditorTests;
(function (SurveyEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("LocalizationTests");
        QUnit.test("Get nested property", function (assert) {
            assert.equal(SurveyEditor.editorLocalization.getString("qt.text"), "Text", "find the nested property");
            assert.equal(SurveyEditor.editorLocalization.getString("qt.text1"), "text1", "the nested property doesn't exist");
            assert.equal(SurveyEditor.editorLocalization.getString("qt1.text"), "qt1", "the root property doesn't exist");
        });
        QUnit.test("Get property name and title", function (assert) {
            assert.equal(SurveyEditor.editorLocalization.getPropertyName("text_name"), SurveyEditor.defaultStrings.p.name, "find the Name property");
            assert.equal(SurveyEditor.editorLocalization.getPropertyTitle("text_name"), "", "there is not title for it");
            assert.equal(SurveyEditor.editorLocalization.getPropertyName("text_title"), SurveyEditor.defaultStrings.p.title.name, "find the Title property");
            assert.equal(SurveyEditor.editorLocalization.getPropertyTitle("text_title"), SurveyEditor.defaultStrings.p.title.title, "find the title for Title property");
        });
    })(Tests = SurveyEditorTests.Tests || (SurveyEditorTests.Tests = {}));
})(SurveyEditorTests || (SurveyEditorTests = {}));
;

/// <reference path="../src/propertyEditors/propertyEditorBase.ts" />
/// <reference path="../src/propertyEditors/propertyItemValuesEditor.ts" />
/// <reference path="../src/propertyEditors/propertyMatrixDropdownColumnsEditor.ts" />
/// <reference path="../src/propertyEditors/propertyRestfullEditor.ts" />
var SurveyEditorTests;
(function (SurveyEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("PropertyEditorsTests");
        QUnit.test("Create correct property editor", function (assert) {
            var propertyEditor = SurveyEditor.SurveyPropertyEditorBase.createEditor("unknown", null);
            assert.equal(propertyEditor.editorType, "string", "The default property editor is 'string'");
            var propertyTypes = ["string", "boolean", "number", "dropdown", "text", "html", "itemvalues",
                "matrixdropdowncolumns", "textitems", "triggers", "validators", "restfull"];
            for (var i = 0; i < propertyTypes.length; i++) {
                var propType = propertyTypes[i];
                propertyEditor = SurveyEditor.SurveyPropertyEditorBase.createEditor(propType, null);
                assert.equal(propertyEditor.editorType, propType, "Create '" + propType + "' property editor");
            }
        });
        QUnit.test("SurveyPropertyItemValue", function (assert) {
            var choices = [{ value: 1, text: "item1" }, { value: 2, text: "item2" }, { value: 3, text: "item3" }];
            var itemValueProperty = new SurveyEditor.SurveyPropertyItemValuesEditor();
            itemValueProperty.onChanged = function (newValue) { choices = newValue; };
            itemValueProperty.value = choices;
            assert.equal(itemValueProperty.koItems().length, 3, "there are three elements");
            assert.equal(itemValueProperty.koItems()[1].koValue(), 2, "check value of the second element");
            assert.equal(itemValueProperty.koItems()[1].koText(), "item2", "check text of the second element");
            itemValueProperty.onDeleteClick(itemValueProperty.koItems()[1]);
            assert.equal(itemValueProperty.koItems().length, 2, "there are two elements after deleting");
            assert.equal(itemValueProperty.koItems()[1].koValue(), 3, "check value of the second element");
            assert.equal(itemValueProperty.koItems()[1].koText(), "item3", "check text of the second element");
            itemValueProperty.onAddClick();
            assert.equal(itemValueProperty.koItems().length, 3, "there are three elements after adding");
            itemValueProperty.koItems()[2].koValue(4);
            itemValueProperty.koItems()[2].koText("item4");
            assert.equal(itemValueProperty.koItems()[2].koValue(), 4, "check value of the last element");
            assert.equal(itemValueProperty.koItems()[2].koText(), "item4", "check text of the last element");
            itemValueProperty.onApplyClick();
            assert.equal(choices.length, 3, "there are three elements after adding");
            assert.equal(choices[2].value, 4, "check value of the last element");
            assert.equal(choices[2].text, "item4", "check text of the last element");
            itemValueProperty.onAddClick();
            itemValueProperty.onAddClick();
            itemValueProperty.onResetClick();
            assert.equal(itemValueProperty.koItems().length, 3, "there are three elements");
        });
        QUnit.test("SurveyPropertyItemValue: Value and Text are same", function (assert) {
            var choices = [{ value: 1, text: "1" }, { value: "item 2", text: "item 2" }];
            var itemValueProperty = new SurveyEditor.SurveyPropertyItemValuesEditor();
            itemValueProperty.onChanged = function (newValue) { choices = newValue; };
            itemValueProperty.value = choices;
            assert.equal(itemValueProperty.koItems().length, 2, "there are three elements");
            itemValueProperty.onApplyClick();
            assert.equal(choices.length, 2, "there are two items");
            assert.equal(choices[0].value, 1, "the first value is 1");
            assert.equal(choices[0].text, null, "the first text is null");
            assert.equal(choices[1].value, "item 2", "the second value is 'item 2'");
            assert.equal(choices[1].text, null, "the second text is null");
        });
        QUnit.test("SurveyPropertyItemValue: Value and Text are same and editor.alwaySaveTextInPropertyEditors = true", function (assert) {
            var choices = [{ value: 1, text: "1" }, { value: "item 2", text: "item 2" }];
            var itemValueProperty = new SurveyEditor.SurveyPropertyItemValuesEditor();
            itemValueProperty.onChanged = function (newValue) { choices = newValue; };
            itemValueProperty.value = choices;
            itemValueProperty.options = { alwaySaveTextInPropertyEditors: true };
            assert.equal(itemValueProperty.koItems().length, 2, "there are three elements");
            itemValueProperty.onApplyClick();
            assert.equal(choices.length, 2, "there are two items");
            assert.equal(choices[0].value, 1, "the first value is 1");
            assert.equal(choices[0].text, "1", "the first text is '1'");
            assert.equal(choices[1].value, "item 2", "the second value is 'item 2'");
            assert.equal(choices[1].text, "item 2", "the second text is 'item 2'");
        });
        QUnit.test("SurveyPropertyItemValue_PureValue", function (assert) {
            var choices = [1, "item2", { value: 3, text: "item3" }];
            var itemValueProperty = new SurveyEditor.SurveyPropertyItemValuesEditor();
            itemValueProperty.onChanged = function (newValue) { choices = newValue; };
            itemValueProperty.value = choices;
            assert.equal(itemValueProperty.koItems().length, 3, "there are three elements");
            assert.equal(itemValueProperty.koItems()[0].koValue(), 1, "check value of the first element");
            assert.equal(itemValueProperty.koItems()[1].koValue(), "item2", "check value of the second element");
            assert.equal(itemValueProperty.koItems()[2].koValue(), 3, "check value of the third element");
            assert.equal(itemValueProperty.koItems()[2].koText(), "item3", "check text of the third element");
        });
        QUnit.test("SurveyPropertyMatrixDropdownColumns set properties", function (assert) {
            var columns = [];
            columns.push(new Survey.MatrixDropdownColumn("column 1"));
            columns.push(new Survey.MatrixDropdownColumn("column 2"));
            columns[0].choices = [1, 2, "three"];
            var itemValueProperty = new SurveyEditor.SurveyPropertyDropdownColumnsEditor();
            itemValueProperty.onChanged = function (newValue) { columns = newValue; };
            itemValueProperty.value = columns;
            assert.equal(itemValueProperty.koItems().length, 2, "there are two elements");
            assert.equal(itemValueProperty.koItems()[0].koName(), "column 1", "the first column name");
            assert.equal(itemValueProperty.koItems()[0].koChoices().length, 3, "there are two elements");
            itemValueProperty.onAddClick();
            itemValueProperty.koItems()[2].koCellType("checkbox");
            itemValueProperty.koItems()[2].koName("column 3");
            assert.equal(itemValueProperty.koItems().length, 3, "There are 3 columns un editor");
            itemValueProperty.onApplyClick();
            assert.equal(columns.length, 3, "There are 3 columns");
            assert.equal(columns[2]["cellType"], "checkbox", "the last column has checkbox cells");
        });
        QUnit.test("Text property test - two way binding", function (assert) {
            var property = new Survey.JsonObjectProperty("text");
            property.type = "text";
            var propertyEditor = new SurveyEditor.SurveyObjectProperty(property);
            var editor = (propertyEditor.editor);
            editor.koValue("1");
            editor.onApplyClick();
            assert.equal(propertyEditor.koValue(), "1", "the value is set correctly from the editor");
            propertyEditor.koValue("2");
            assert.equal(editor.koValue(), "2", "the value is set correctly from text input");
        });
        QUnit.test("SurveyPropertyResultfullEditor test", function (assert) {
            var editor = new SurveyEditor.SurveyPropertyResultfullEditor();
            editor.value = new Survey.ChoicesRestfull();
            editor.koPath("path1");
            editor.koValueName("name2");
            editor.koTitleName("title3");
            assert.equal(editor.question.choicesByUrl.path, "path1", "test path is set");
            assert.equal(editor.question.choicesByUrl.valueName, "name2", "test name is set");
            assert.equal(editor.question.choicesByUrl.titleName, "title3", "test title is set");
        });
    })(Tests = SurveyEditorTests.Tests || (SurveyEditorTests.Tests = {}));
})(SurveyEditorTests || (SurveyEditorTests = {}));
;

/// <reference path="../src/surveyObjects.ts" />
/// <reference path="../src/objectVerbs.ts" />
/// <reference path="../src/propertyEditors/propertyTriggersEditor.ts" />
/// <reference path="../src/propertyEditors/propertyValidatorsEditor.ts" />
var SurveyObjectEditorTests;
(function (SurveyObjectEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("surveyObjects");
        QUnit.test("Initial objects building", function (assert) {
            var intend = SurveyEditor.SurveyObjects.intend;
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            assert.equal(objects.koObjects().length, 1 + 3 + 2 + 1 + 2, "survey + 3 pages + 5 questions.");
            assert.equal(objects.koSelected(), survey, "The selected object is survey.");
            assert.equal(objects.koObjects()[0].text(), "Survey", "The first item is Survey");
            assert.equal(objects.koObjects()[4].text(), intend + "page2", "The second page");
            assert.equal(objects.koObjects()[5].text(), intend + intend + "question3", "The third question");
        });
        QUnit.test("No name pages", function (assert) {
            var intend = SurveyEditor.SurveyObjects.intend;
            var survey = createSurvey();
            survey.pages[0].name = "";
            survey.pages[1].name = "";
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            assert.equal(objects.koObjects()[1].text(), intend + "[Page 1]", "The first item is Survey");
            assert.equal(objects.koObjects()[4].text(), intend + "[Page 2]", "The second page");
        });
        QUnit.test("selectObject method", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            objects.selectObject(survey.pages[1]);
            assert.equal(objects.koSelected().value, survey.pages[1], "the second page is selected");
            objects.selectObject(survey.pages[1].questions[0]);
            assert.equal(objects.koSelected().value, survey.pages[1].questions[0], "the third question is selected");
            objects.selectObject(survey);
            assert.equal(objects.koSelected().value, survey, "survey is selected");
        });
        QUnit.test("addPage method", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var page = survey.addNewPage("newPage");
            objects.addPage(page);
            assert.equal(objects.koObjects()[objects.koObjects().length - 1].value, page, "new object is added");
            assert.equal(objects.koSelected().value, page, "new page is selected");
        });
        QUnit.test("addPage method - insert", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var page = survey.pages[2];
            survey.pages.splice(2, 1);
            objects.removeObject(page);
            survey.pages.splice(1, 0, page);
            objects.addPage(page);
            var pageIndex = survey.pages[0].questions.length + 1 + 1;
            assert.equal(objects.koObjects()[pageIndex].value, page, "the page is inserted correctly");
            assert.equal(objects.koObjects()[pageIndex + 1].value, page.questions[0], "the first question is inserted correctly");
            assert.equal(objects.koObjects()[pageIndex + 2].value, page.questions[1], "the second question is inserted correctly");
            assert.equal(objects.koObjects()[pageIndex + 3].value, survey.pages[2], "the last page has the correct index");
        });
        QUnit.test("addQuestion method", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var page = survey.pages[survey.pages.length - 1];
            var question = page.addNewQuestion("text", "newQuestion");
            objects.addQuestion(page, question);
            assert.equal(objects.koObjects()[objects.koObjects().length - 1].value, question, "new object is added");
            assert.equal(objects.koSelected().value, question, "new question is selected");
        });
        QUnit.test("addQuestion to the first page", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var page = survey.pages[0];
            var question = page.addNewQuestion("text", "newQuestion");
            objects.addQuestion(page, question);
            assert.equal(objects.koObjects()[1 + page.questions.length].value, question, "new object is added");
            assert.equal(objects.koSelected().value, question, "new question is selected");
        });
        QUnit.test("removeObject method - remove Question", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var elementsCount = objects.koObjects().length;
            objects.removeObject(survey.pages[1].questions[0]);
            assert.equal(objects.koObjects().length, elementsCount - 1, "one element is removed");
        });
        QUnit.test("removeObject method - remove Page", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            var elementsCount = objects.koObjects().length;
            objects.removeObject(survey.pages[0]);
            assert.equal(objects.koObjects().length, elementsCount - 1 - 2, "page and two it's questions are removed");
        });
        QUnit.test("selectNextQuestion method", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            objects.selectObject(survey.pages[0].questions[0]);
            objects.selectNextQuestion(false);
            assert.equal(objects.koSelected().value, survey.pages[0].questions[1]);
            objects.selectNextQuestion(true);
            assert.equal(objects.koSelected().value, survey.pages[0].questions[0]);
            objects.selectNextQuestion(true);
            assert.equal(objects.koSelected().value, survey.pages[0].questions[survey.pages[0].questions.length - 1]);
            objects.selectNextQuestion(false);
            assert.equal(objects.koSelected().value, survey.pages[0].questions[0]);
        });
        QUnit.test("object changed name", function (assert) {
            var survey = createSurvey();
            var objects = new SurveyEditor.SurveyObjects(ko.observableArray(), ko.observable());
            objects.survey = survey;
            survey.pages[0].name = "newname";
            objects.nameChanged(survey.pages[0]);
            assert.equal(objects.koObjects()[1].text(), SurveyEditor.SurveyObjects.intend + "newname", "new name should be 'newname'");
        });
        QUnit.test("Triggers property editor", function (assert) {
            var survey = createSurvey();
            var trigger = new Survey.SurveyTriggerVisible();
            trigger.name = "question1";
            trigger.value = "val1";
            trigger.operator = "notequal";
            trigger.questions.push("question2");
            survey.triggers.push(trigger);
            var result = [];
            var propEditor = new SurveyEditor.SurveyPropertyTriggersEditor();
            propEditor.onChanged = function (newValue) { result = newValue; };
            propEditor.object = survey;
            propEditor.value = survey.triggers;
            assert.equal(propEditor.koItems().length, 1, "There are one trigger initially");
            var koTrigger = propEditor.koSelected();
            assert.equal(koTrigger.koName(), "question1", "Name set correctly");
            assert.equal(koTrigger.koOperator(), "notequal", "operator set correctly");
            assert.equal(koTrigger.koValue(), "val1", "value set correctly");
            assert.deepEqual(koTrigger.questions.koChoosen(), ["question2"], "questions set correctly");
            propEditor.onAddClick("visibletrigger");
            assert.equal(propEditor.koItems().length, 2, "There are two triggers now");
            koTrigger = propEditor.koSelected();
            assert.equal(koTrigger.koOperator(), "equal", "default operator is equal");
            assert.equal(koTrigger.koIsValid(), false, "the trigger is not valid");
            koTrigger.koName("question2");
            assert.equal(koTrigger.koIsValid(), false, "the trigger is still not valid");
            assert.equal(koTrigger.koRequireValue(), true, "value should be set");
            koTrigger.koOperator("notempty");
            assert.equal(koTrigger.koIsValid(), true, "the trigger is valid");
            assert.equal(koTrigger.koRequireValue(), false, "value should not be set");
            assert.equal(koTrigger.koText(), "Run if 'question2' is not empty", "text for valid trigger");
            koTrigger.pages.koChoosen.push("page2");
            koTrigger.questions.koChoosen.push("question3");
            koTrigger.koValue(1);
            trigger = koTrigger.createTrigger();
            assert.equal(trigger.name, "question2", "create trigger correctly: name");
            assert.equal(trigger.operator, "notempty", "create trigger correctly: operator");
            assert.equal(trigger.value, 1, "create trigger correctly: value");
            assert.deepEqual(trigger.pages, ["page2"], "create trigger correctly: pages");
            assert.deepEqual(trigger.questions, ["question3"], "create trigger correctly: questions");
            propEditor.onAddClick("visibletrigger");
            assert.equal(propEditor.koItems().length, 3, "There are three triggers now");
            propEditor.onDeleteClick();
            assert.equal(propEditor.koItems().length, 2, "There are again two triggers");
            propEditor.onApplyClick();
            assert.equal(result.length, 2, "Two triggers are saved");
            propEditor.onAddClick("completetrigger");
            koTrigger = propEditor.koSelected();
            koTrigger.koName("question2");
            koTrigger.koOperator("notempty");
            propEditor.onApplyClick();
            assert.equal(result.length, 3, "There are 3 triggers");
            assert.equal(result[2].getType(), "completetrigger", "Complete trigger is created");
        });
        QUnit.test("Validators property editor", function (assert) {
            var survey = createSurvey();
            var validator = new Survey.NumericValidator(10, 100);
            validator.text = "validatortext";
            var question = survey.getQuestionByName("question1");
            question.validators.push(validator);
            var result = [];
            var propEditor = new SurveyEditor.SurveyPropertyValidatorsEditor();
            propEditor.onChanged = function (newValue) { result = newValue; };
            propEditor.object = question;
            propEditor.value = question.validators;
            assert.equal(propEditor.koItems().length, 1, "There are one validator initially");
            var koValidator = propEditor.koSelected();
            assert.equal(koValidator.validator.text, "validatortext", "Validator Text is set correctly");
            assert.equal(koValidator.validator.minValue, 10, "Validator 'minValue' is set correctly");
            assert.equal(koValidator.validator.maxValue, 100, "Validator 'maxValue' is set correctly");
            propEditor.onAddClick("textvalidator");
            assert.equal(propEditor.koItems().length, 2, "There are two validators now");
            var koValidator = propEditor.koSelected();
            assert.equal(koValidator.text, "textvalidator", "Created with corrected value");
            koValidator.validator.minLength = 20;
            koValidator.validator.text = "text is short.";
            propEditor.onAddClick("textvalidator");
            assert.equal(propEditor.koItems().length, 3, "There are three validators now");
            propEditor.onDeleteClick();
            assert.equal(propEditor.koItems().length, 2, "There are two validators again");
            propEditor.onApplyClick();
            assert.equal(result.length, 2, "Two validators are saved");
            assert.equal(result[1].minLength, 20, "The properties are saved too");
        });
        QUnit.test("SurveyVerbChangeTypeItem test", function (assert) {
            var survey = createSurvey();
            var verb = new SurveyEditor.SurveyVerbChangeTypeItem(survey, survey.pages[0].questions[1], null);
            assert.equal(verb.koSelectedItem(), "checkbox", "The default value is checkbox");
            verb.koSelectedItem("dropdown");
            var newQuestion = survey.pages[0].questions[1];
            assert.equal(newQuestion.getType(), "dropdown", "the question becomes 'dropdown'");
            assert.equal(newQuestion["choices"].length, 3, "properties are copied.");
            assert.equal(survey.pages[0].questions.length, 2, "we will still have two questions.");
        });
        QUnit.test("SurveyVerbChangePageItem test", function (assert) {
            var survey = createSurvey();
            var verb = new SurveyEditor.SurveyVerbChangePageItem(survey, survey.pages[0].questions[1], null);
            assert.equal(verb.koSelectedItem(), survey.pages[0], "The default value is first page");
            verb.koSelectedItem(survey.pages[2]);
            assert.equal(survey.pages[0].questions.length, 1, "one question left on the first page");
            assert.equal(survey.pages[2].questions.length, 3, "three question now on the third page");
        });
        function createSurvey() {
            return new Survey.Survey({
                pages: [{
                        name: 'page1', questions: [{ type: 'text', name: 'question1' },
                            { name: "question2", choices: ["one", { value: "two", text: "second value" }, { value: 3, text: "third value" }], type: "checkbox" }]
                    },
                    { name: 'page2', questions: [{ name: "question3", type: "comment" }] },
                    {
                        name: 'page3', questions: [{ name: "question4", columns: ["Column 1", "Column 2", "Column 3"], rows: ["Row 1", "Row 2"], type: "matrix" },
                            { name: "question5", type: "rating" }]
                    }]
            });
        }
    })(Tests = SurveyObjectEditorTests.Tests || (SurveyObjectEditorTests.Tests = {}));
})(SurveyObjectEditorTests || (SurveyObjectEditorTests = {}));

/// <reference path="../src/undoredo.ts" />
var SurveyEditorTests;
(function (SurveyEditorTests) {
    var Tests;
    (function (Tests) {
        QUnit.module("UndoRedoTests");
        QUnit.test("Enabeling undo redo", function (assert) {
            var survey = new Survey.Survey(getSurveyJson());
            var undo = new SurveyEditor.SurveyUndoRedo();
            assert.equal(undo.koCanUndo(), false, "CanUndo 1");
            assert.equal(undo.koCanRedo(), false, "CanRedo 1");
            undo.setCurrent(survey, null);
            assert.equal(undo.koCanUndo(), false, "CanUndo 2");
            assert.equal(undo.koCanRedo(), false, "CanRedo 2");
            undo.setCurrent(survey, null);
            assert.equal(undo.koCanUndo(), true, "CanUndo 3");
            assert.equal(undo.koCanRedo(), false, "CanRedo 3");
            undo.undo();
            assert.equal(undo.koCanUndo(), false, "CanUndo 4");
            assert.equal(undo.koCanRedo(), true, "CanRedo 4");
            undo.redo();
            assert.equal(undo.koCanUndo(), true, "CanUndo 5");
            assert.equal(undo.koCanRedo(), false, "CanRedo 5");
            undo.undo();
            undo.setCurrent(survey, null);
            assert.equal(undo.koCanUndo(), true, "CanUndo 6");
            assert.equal(undo.koCanRedo(), false, "CanRedo 6");
            undo.setCurrent(survey, null);
            assert.equal(undo.koCanUndo(), true, "CanUndo 7");
            assert.equal(undo.koCanRedo(), false, "CanRedo 7");
            undo.undo();
            assert.equal(undo.koCanUndo(), true, "CanUndo 8");
            assert.equal(undo.koCanRedo(), true, "CanRedo 8");
            undo.undo();
            assert.equal(undo.koCanUndo(), false, "CanUndo 9");
            assert.equal(undo.koCanRedo(), true, "CanRedo 9");
        });
        QUnit.test("Do undo", function (assert) {
            var survey = new Survey.Survey(getSurveyJson());
            var undo = new SurveyEditor.SurveyUndoRedo();
            undo.setCurrent(survey, null);
            survey.addNewPage("New Page");
            undo.setCurrent(survey, null);
            assert.equal(4, survey.pages.length);
            survey = new Survey.Survey(undo.undo().surveyJSON);
            assert.equal(3, survey.pages.length);
        });
        QUnit.test("Do undo/redo", function (assert) {
            var survey = new Survey.Survey(getSurveyJson());
            var undo = new SurveyEditor.SurveyUndoRedo();
            undo.setCurrent(survey, null);
            survey.addNewPage("New Page");
            undo.setCurrent(survey, null);
            survey = new Survey.Survey(undo.undo().surveyJSON);
            assert.equal(3, survey.pages.length, "3 pages after undo");
            survey = new Survey.Survey(undo.redo().surveyJSON);
            assert.equal(4, survey.pages.length, "4 pages after redo");
        });
        QUnit.test("Undo maximum count", function (assert) {
            var survey = new Survey.Survey(getSurveyJson());
            var undo = new SurveyEditor.SurveyUndoRedo();
            undo.maximumCount = 2;
            for (var i = 0; i < 10; i++) {
                undo.setCurrent(survey, null);
            }
            assert.equal(undo.koCanUndo(), true, "Initial can undo");
            undo.undo();
            undo.undo();
            assert.equal(undo.koCanUndo(), false, "Store only for two undo");
        });
        QUnit.test("Do undo/redo with editor", function (assert) {
            var editor = new SurveyEditor.SurveyEditor();
            editor.text = JSON.stringify(getSurveyJson());
            editor.addPage();
            assert.equal(4, editor.survey.pages.length);
            editor.doUndoClick();
            assert.equal(3, editor.survey.pages.length);
            editor.doRedoClick();
            assert.equal(4, editor.survey.pages.length);
            assert.equal(editor.koSelectedObject().value, editor.survey.pages[editor.survey.pages.length - 1], "the last page should be selected");
        });
        function getSurveyJson() {
            return {
                pages: [{
                        name: 'page1', questions: [{ type: 'text', name: 'question1' },
                            { name: "question2", choices: ["one", { value: "two", text: "second value" }, { value: 3, text: "third value" }], type: "checkbox" }]
                    },
                    { name: 'page2', questions: [{ name: "question3", type: "comment" }] },
                    {
                        name: 'page3', questions: [{ name: "question4", columns: ["Column 1", "Column 2", "Column 3"], rows: ["Row 1", "Row 2"], type: "matrix" },
                            { name: "question5", type: "rating" }]
                    }]
            };
        }
    })(Tests = SurveyEditorTests.Tests || (SurveyEditorTests.Tests = {}));
})(SurveyEditorTests || (SurveyEditorTests = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
