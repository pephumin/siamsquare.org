/*!
* surveyjs Editor v0.9.12
* (c) Andrew Telnov - http://surveyjs.org/builder/
* Github - https://github.com/andrewtelnov/survey.js.editor
*/

var SurveyEditor;
!function(t) {
    var e = function() {
        function t(t, e) {
            this.data = t, this.onModifiedCallback = e
        }
        return Object.defineProperty(t.prototype, "survey", {
            get: function() {
                return this.data
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.startDragNewQuestion = function(e, o, i) {
            this.setData(e, t.dataStart + "questiontype:" + o + ",questionname:" + i)
        }, t.prototype.startDragQuestion = function(e, o) {
            this.setData(e, t.dataStart + "questionname:" + o)
        }, t.prototype.startDragCopiedQuestion = function(e, o, i) {
            this.setData(e, t.dataStart + "questionname:" + o, i)
        }, t.prototype.isSurveyDragging = function(e) {
            if (!e)
                return !1;
            var o = this.getData(e).text;
            return o && 0 == o.indexOf(t.dataStart)
        }, t.prototype.doDragDropOver = function(t, e) {
            if (t = this.getEvent(t), e && this.isSurveyDragging(t) && !this.isSamePlace(t, e)) {
                var o = this.getQuestionIndex(t, e);
                this.survey.currentPage.koDragging(o)
            }
        }, t.prototype.doDrop = function(t, e) {
            if (void 0 === e && (e = null), t.stopPropagation && t.stopPropagation(), this.isSurveyDragging(t)) {
                this.survey.currentPage.koDragging(-1);
                var o = this.getQuestionIndex(t, e),
                    i = this.getDataInfo(t);
                if (this.clearData(), i) {
                    var r = null,
                        n = i.json;
                    n && (r = Survey.QuestionFactory.Instance.createQuestion(n.type, name), (new Survey.JsonObject).toObject(n, r), r.name = i.questionname), r || (r = this.survey.getQuestionByName(i.questionname)), !r && i.questiontype && (r = Survey.QuestionFactory.Instance.createQuestion(i.questiontype, i.questionname)), r && this.moveQuestionTo(r, o)
                }
            }
        }, t.prototype.getQuestionIndex = function(t, e) {
            var o = this.survey.currentPage;
            if (!e)
                return o.questions.length;
            var i = o.questions.indexOf(e);
            t = this.getEvent(t);
            var r = t.currentTarget.clientHeight,
                n = t.offsetY;
            return t.hasOwnProperty("layerX") && (n = t.layerY - t.currentTarget.offsetTop), n > r / 2 && i++, i
        }, t.prototype.isSamePlace = function(e, o) {
            var i = t.prevEvent;
            return !(i.question != o || Math.abs(e.clientX - i.x) > 5 || Math.abs(e.clientY - i.y) > 5) || (i.question = o, i.x = e.clientX, i.y = e.clientY, !1)
        }, t.prototype.getEvent = function(t) {
            return t.originalEvent ? t.originalEvent : t
        }, t.prototype.moveQuestionTo = function(t, e) {
            if (null != t) {
                var o = this.survey.getPageByQuestion(t);
                o && o.removeQuestion(t), this.survey.currentPage.addQuestion(t, e), this.onModifiedCallback && this.onModifiedCallback()
            }
        }, t.prototype.getDataInfo = function(e) {
            var o = this.getData(e);
            if (!o)
                return null;
            for (var i = o.text.substr(t.dataStart.length), r = i.split(","), n = {
                    json: null
                }, s = 0; s < r.length; s++) {
                var a = r[s].split(":");
                n[a[0]] = a[1]
            }
            return n.json = o.json, n
        }, t.prototype.getY = function(t) {
            for (var e = 0; t;)
                e += t.offsetTop - t.scrollTop + t.clientTop, t = t.offsetParent;
            return e
        }, t.prototype.setData = function(e, o, i) {
            void 0 === i && (i = null), e.originalEvent && (e = e.originalEvent), e.dataTransfer && (e.dataTransfer.setData("Text", o), e.dataTransfer.effectAllowed = "copy"), t.dragData = {
                text: o,
                json: i
            }
        }, t.prototype.getData = function(e) {
            if (e.originalEvent && (e = e.originalEvent), e.dataTransfer) {
                var o = e.dataTransfer.getData("Text");
                o && (t.dragData.text = o)
            }
            return t.dragData
        }, t.prototype.clearData = function() {
            t.dragData = {
                text: "",
                json: null
            };
            var e = t.prevEvent;
            e.question = null, e.x = -1, e.y = -1
        }, t.dataStart = "surveyjs,", t.dragData = {
            text: "",
            json: null
        }, t.prevEvent = {
            question: null,
            x: -1,
            y: -1
        }, t
    }();
    t.DragDropHelper = e
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function() {
        function t() {
            this.value_ = null
        }
        return t.registerEditor = function(e, o) {
            t.editorRegisteredList[e] = o
        }, t.createEditor = function(e, o) {
            var i = t.editorRegisteredList[e];
            i || (i = t.editorRegisteredList[t.defaultEditor]);
            var r = i();
            return r.onChanged = o, r
        }, Object.defineProperty(t.prototype, "editorType", {
            get: function() {
                throw "editorType is not defined"
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.getValueText = function(t) {
            return t
        }, Object.defineProperty(t.prototype, "value", {
            get: function() {
                return this.value_
            },
            set: function(t) {
                t = this.getCorrectedValue(t), this.setValueCore(t), this.onValueChanged()
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.setValueCore = function(t) {
            this.value_ = t
        }, t.prototype.setTitle = function(t) {}, t.prototype.setObject = function(t) {}, t.prototype.onValueChanged = function() {}, t.prototype.getCorrectedValue = function(t) {
            return t
        }, t.defaultEditor = "string", t.editorRegisteredList = {}, t
    }();
    t.SurveyPropertyEditorBase = e;
    var o = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "string"
            },
            enumerable: !0,
            configurable: !0
        }), e
    }(e);
    t.SurveyStringPropertyEditor = o;
    var i = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "dropdown"
            },
            enumerable: !0,
            configurable: !0
        }), e
    }(e);
    t.SurveyDropdownPropertyEditor = i;
    var r = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "boolean"
            },
            enumerable: !0,
            configurable: !0
        }), e
    }(e);
    t.SurveyBooleanPropertyEditor = r;
    var n = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "number"
            },
            enumerable: !0,
            configurable: !0
        }), e
    }(e);
    t.SurveyNumberPropertyEditor = n, e.registerEditor("string", function() {
        return new o
    }), e.registerEditor("dropdown", function() {
        return new i
    }), e.registerEditor("boolean", function() {
        return new r
    }), e.registerEditor("number", function() {
        return new n
    })
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function e(e, o) {
            void 0 === o && (o = null), this.property = e, this.isApplyingNewValue = !1, this.onPropertyChanged = o, this.name = this.property.name, this.koValue = ko.observable(), this.choices = e.choices;
            var i = this;
            this.editorType = e.type, null != this.choices && (this.editorType = "dropdown");
            var r = function(t) {
                i.onApplyEditorValue(t)
            };
            this.editor = t.SurveyPropertyEditorBase.createEditor(this.editorType, r), this.editorType = this.editor.editorType, this.modalName = "modelEditor" + this.editorType + this.name, this.modalNameTarget = "#" + this.modalName, this.koValue.subscribe(function(t) {
                i.onkoValueChanged(t)
            }), this.koText = ko.computed(function() {
                return i.getValueText(i.koValue())
            }), this.koIsDefault = ko.computed(function() {
                return i.property.isDefaultValue(i.koValue())
            })
        }
        return Object.defineProperty(e.prototype, "object", {
            get: function() {
                return this.objectValue
            },
            set: function(t) {
                this.objectValue = t, this.updateValue()
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.updateValue = function() {
            this.isValueUpdating = !0, this.koValue(this.getValue()), this.editor.setObject(this.object), this.editor.setTitle(t.editorLocalization.getString("pe.editProperty").format(this.property.name)), this.updateEditorData(this.koValue()), this.isValueUpdating = !1
        }, e.prototype.onApplyEditorValue = function(t) {
            this.isApplyingNewValue = !0, this.koValue(t), this.isApplyingNewValue = !1
        }, e.prototype.onkoValueChanged = function(t) {
            this.isApplyingNewValue || this.updateEditorData(t), null != this.object && this.object[this.name] != t && (null == this.onPropertyChanged || this.isValueUpdating || this.onPropertyChanged(this, t))
        }, e.prototype.updateEditorData = function(t) {
            this.editor.value = t
        }, e.prototype.getValue = function() {
            return this.property.hasToUseGetValue ? this.property.getValue(this.object) : this.object[this.name]
        }, e.prototype.getValueText = function(t) {
            return this.editor.getValueText(t)
        }, e
    }();
    t.SurveyObjectProperty = e
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function e() {
            this.onPropertyValueChanged = new Survey.Event, this.koProperties = ko.observableArray(), this.koActiveProperty = ko.observable(), this.koHasObject = ko.observable()
        }
        return Object.defineProperty(e.prototype, "selectedObject", {
            get: function() {
                return this.selectedObjectValue
            },
            set: function(t) {
                this.selectedObjectValue != t && (this.koHasObject(null != t), this.selectedObjectValue = t, this.updateProperties(), this.updatePropertiesObject())
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.getPropertyEditor = function(t) {
            for (var e = this.koProperties(), o = 0; o < e.length; o++)
                if (e[o].name == t)
                    return e[o];
            return null
        }, e.prototype.changeActiveProperty = function(t) {
            this.koActiveProperty(t)
        }, e.prototype.ObjectChanged = function() {
            this.updatePropertiesObject()
        }, e.prototype.updateProperties = function() {
            var e = this;
            if (!this.selectedObject || !this.selectedObject.getType)
                return this.koProperties([]), void this.koActiveProperty(null);
            var o = Survey.JsonObject.metaData.getProperties(this.selectedObject.getType());
            o.sort(function(t, e) {
                return t.name == e.name ? 0 : t.name > e.name ? 1 : -1
            });
            for (var i = [], r = this, n = function(t, o) {
                    r.onPropertyValueChanged.fire(e, {
                        property: t.property,
                        object: t.object,
                        newValue: o
                    })
                }, s = 0; s < o.length; s++)
                if (this.canShowProperty(o[s])) {
                    var a = new t.SurveyObjectProperty(o[s], n),
                        u = this.selectedObject.getType() + "_" + o[s].name;
                    a.displayName = t.editorLocalization.getPropertyName(u);
                    var l = t.editorLocalization.getPropertyTitle(u);
                    l || (l = a.displayName), a.title = l, i.push(a)
                }
            this.koProperties(i), this.koActiveProperty(this.getPropertyEditor("name"))
        }, e.prototype.canShowProperty = function(t) {
            var e = t.name;
            return "questions" != e && "pages" != e
        }, e.prototype.updatePropertiesObject = function() {
            for (var t = this.koProperties(), e = 0; e < t.length; e++)
                t[e].object = this.selectedObject
        }, e
    }();
    t.SurveyObjectEditor = e
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function e(t, e, o, i) {
            void 0 === t && (t = null), void 0 === e && (e = null), void 0 === o && (o = null), void 0 === i && (i = null), this.draggingPage = null, this.koPages = ko.observableArray(), this.koIsValid = ko.observable(!1), this.onAddNewPageCallback = t, this.onSelectPageCallback = e, this.onMovePageCallback = o, this.onDeletePageCallback = i;
            var r = this;
            this.selectPageClick = function(t) {
                r.onSelectPageCallback && r.onSelectPageCallback(t.page)
            }, this.keyDown = function(t, e) {
                r.onKeyDown(t, e)
            }, this.dragStart = function(t) {
                r.draggingPage = t
            }, this.dragOver = function(t) {}, this.dragEnd = function() {
                r.draggingPage = null
            }, this.dragDrop = function(t) {
                r.moveDraggingPageTo(t)
            }
        }
        return Object.defineProperty(e.prototype, "survey", {
            get: function() {
                return this.surveyValue
            },
            set: function(t) {
                this.surveyValue = t, this.koIsValid(null != this.surveyValue), this.updatePages()
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setSelectedPage = function(t) {
            for (var e = this.koPages(), o = 0; o < e.length; o++)
                e[o].koSelected(e[o].page == t)
        }, e.prototype.addNewPageClick = function() {
            this.onAddNewPageCallback && this.onAddNewPageCallback()
        }, e.prototype.removePage = function(t) {
            var e = this.getIndexByPage(t);
            e > -1 && this.koPages.splice(e, 1)
        }, e.prototype.changeName = function(e) {
            var o = this.getIndexByPage(e);
            o > -1 && this.koPages()[o].title(t.SurveyHelper.getObjectName(e))
        }, e.prototype.getIndexByPage = function(t) {
            for (var e = this.koPages(), o = 0; o < e.length; o++)
                if (e[o].page == t)
                    return o;
            return -1
        }, e.prototype.onKeyDown = function(t, e) {
            if (!(this.koPages().length <= 1)) {
                for (var o = this.koPages(), i = -1, r = 0; r < o.length; r++)
                    o[r].page && o[r].koSelected() && (i = r);
                if (!(i < 0) && (46 == e.keyCode && this.onDeletePageCallback && this.onDeletePageCallback(t.page), (37 == e.keyCode || 39 == e.keyCode) && this.onSelectPageCallback)) {
                    i += 37 == e.keyCode ? -1 : 1, i < 0 && (i = o.length - 1), i >= o.length && (i = 0);
                    var n = o[i].page;
                    this.onSelectPageCallback(n), this.setSelectedPage(n)
                }
            }
        }, e.prototype.updatePages = function() {
            if (null == this.surveyValue)
                return void this.koPages([]);
            for (var e = [], o = 0; o < this.surveyValue.pages.length; o++) {
                var i = this.surveyValue.pages[o];
                e.push({
                    title: ko.observable(t.SurveyHelper.getObjectName(i)),
                    page: i,
                    koSelected: ko.observable(!1)
                })
            }
            this.koPages(e)
        }, e.prototype.moveDraggingPageTo = function(t) {
            if (null == t || t == this.draggingPage)
                return void (this.draggingPage = null);
            if (null != this.draggingPage) {
                var e = this.koPages().indexOf(this.draggingPage),
                    o = this.koPages().indexOf(t);
                this.onMovePageCallback && this.onMovePageCallback(e, o)
            }
        }, e
    }();
    t.SurveyPagesEditor = e
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = (function() {
        function t() {}
        return t
    }(), function() {
        function e(t) {
            this.text = t, this.text && "" != this.text.trim() || (this.text = "{}"), this.errors = [], this.process()
        }
        return Object.defineProperty(e.prototype, "survey", {
            get: function() {
                return this.surveyValue
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "isJsonCorrect", {
            get: function() {
                return null != this.surveyValue
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.process = function() {
            try {
                this.jsonValue = new t.SurveyJSON5(1).parse(this.text)
            } catch (t) {
                this.errors.push({
                    pos: {
                        start: t.at,
                        end: -1
                    },
                    text: t.message
                })
            }
            if (null != this.jsonValue && (this.updateJsonPositions(this.jsonValue), this.surveyValue = new Survey.Survey(this.jsonValue), null != this.surveyValue.jsonErrors))
                for (var e = 0; e < this.surveyValue.jsonErrors.length; e++) {
                    var o = this.surveyValue.jsonErrors[e];
                    this.errors.push({
                        pos: {
                            start: o.at,
                            end: -1
                        },
                        text: o.getFullDescription()
                    })
                }
            this.surveyObjects = this.createSurveyObjects(), this.setEditorPositionByChartAt(this.surveyObjects), this.setEditorPositionByChartAt(this.errors)
        }, e.prototype.updateJsonPositions = function(t) {
            t.pos.self = t;
            for (var e in t) {
                var o = t[e];
                o && o.pos && (t.pos[e] = o.pos, this.updateJsonPositions(o))
            }
        }, e.prototype.createSurveyObjects = function() {
            var t = [];
            if (null == this.surveyValue)
                return t;
            this.isSurveyAsPage = !1;
            for (var e = 0; e < this.surveyValue.pages.length; e++) {
                var o = this.surveyValue.pages[e];
                0 != e || o.pos || (o.pos = this.surveyValue.pos, this.isSurveyAsPage = !0), t.push(o);
                for (var i = 0; i < o.questions.length; i++)
                    t.push(o.questions[i])
            }
            return t
        }, e.prototype.setEditorPositionByChartAt = function(t) {
            if (null != t && 0 != t.length)
                for (var e = {
                        row: 0,
                        column: 0
                    }, o = this.getAtArray(t), i = 0, r = 0; r < o.length; r++) {
                    var n = o[r].at;
                    e = this.getPostionByChartAt(e, i, n);
                    var s = o[r].obj;
                    s.position || (s.position = {}), n == s.pos.start ? s.position.start = e : n == s.pos.end && (s.position.end = e), i = n
                }
        }, e.prototype.getPostionByChartAt = function(t, o, i) {
            for (var r = {
                    row: t.row,
                    column: t.column
                }, n = o; n < i;)
                this.text.charAt(n) == e.newLineChar ? (r.row++, r.column = 0) : r.column++, n++;
            return r
        }, e.prototype.getAtArray = function(t) {
            for (var e = [], o = 0; o < t.length; o++) {
                var i = t[o],
                    r = i.pos;
                r && (e.push({
                    at: r.start,
                    obj: i
                }), r.end > 0 && e.push({
                    at: r.end,
                    obj: i
                }))
            }
            return e.sort(function(t, e) {
                return t.at > e.at ? 1 : t.at < e.at ? -1 : 0
            })
        }, e
    }());
    t.SurveyTextWorker = e
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    !function(t) {
        t[t.Unknown = 0] = "Unknown", t[t.Survey = 1] = "Survey", t[t.Page = 2] = "Page", t[t.Question = 3] = "Question"
    }(t.ObjType || (t.ObjType = {}));
    var e = t.ObjType,
        o = function() {
            function o() {}
            return o.getNewPageName = function(e) {
                return o.getNewName(e, t.editorLocalization.getString("ed.newPageName"))
            }, o.getNewQuestionName = function(e) {
                return o.getNewName(e, t.editorLocalization.getString("ed.newQuestionName"))
            }, o.getNewName = function(t, e) {
                for (var o = {}, i = 0; i < t.length; i++)
                    o[t[i].name] = !0;
                for (var r = 1;;) {
                    if (!o[e + r.toString()])
                        break;
                    r++
                }
                return e + r.toString()
            }, o.getObjectType = function(t) {
                return t && t.getType ? "page" == t.getType() ? e.Page : "survey" == t.getType() ? e.Survey : t.name ? e.Question : e.Unknown : e.Unknown
            }, o.getObjectName = function(t) {
                if (t.name)
                    return t.name;
                var i = o.getObjectType(t);
                if (i != e.Page)
                    return "";
                var r = t.data,
                    n = r.pages.indexOf(t);
                return "[Page " + (n + 1) + "]"
            }, o
        }();
    t.SurveyHelper = o
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function e() {
            this.surveyId = null, this.surveyPostId = null, this.generateValidJSON = !1;
            var t = this;
            this.koLibraryVersion = ko.observable("knockout"), this.koShowAsWindow = ko.observable("page"), this.koScriptUsing = ko.observable("bootstrap"), this.koHasIds = ko.observable(!1), this.koLoadSurvey = ko.observable(!1), this.koVisibleHtml = ko.computed(function() {
                return "react" == t.koLibraryVersion() || "page" == t.koShowAsWindow()
            }), this.koLibraryVersion.subscribe(function(e) {
                t.setHeadText(), t.surveyEmbedingJava.setValue(t.getJavaText())
            }), this.koShowAsWindow.subscribe(function(e) {
                t.surveyEmbedingJava.setValue(t.getJavaText())
            }), this.koScriptUsing.subscribe(function(e) {
                t.setHeadText()
            }), this.koLoadSurvey.subscribe(function(e) {
                t.surveyEmbedingJava.setValue(t.getJavaText())
            }), this.surveyEmbedingHead = null
        }
        return Object.defineProperty(e.prototype, "json", {
            get: function() {
                return this.jsonValue
            },
            set: function(t) {
                this.jsonValue = t
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.show = function() {
            if (null == this.surveyEmbedingHead) {
                this.surveyEmbedingHead = this.createEditor("surveyEmbedingHead"), this.setHeadText();
                var t = this.createEditor("surveyEmbedingBody");
                t.setValue('<div id= "mySurveyJSName" ></div>'), this.surveyEmbedingJava = this.createEditor("surveyEmbedingJava")
            }
            this.koHasIds(this.surveyId && this.surveyPostId), this.surveyEmbedingJava.setValue(this.getJavaText())
        }, e.prototype.setHeadText = function() {
            if ("knockout" == this.koLibraryVersion()) {
                var t = '<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js" ></script>\n';
                "bootstrap" == this.koScriptUsing() ? this.surveyEmbedingHead.setValue(t + '<script src="js/survey.bootstrap.min.js"></script>') : this.surveyEmbedingHead.setValue(t + '<script src="js/survey.min.js"></script>\n<link href="css/survey.css" type="text/css" rel="stylesheet" />')
            } else {
                var t = '<script src="https://fb.me/react-0.14.8.js"></script>\n<script src= "https://fb.me/react-dom-0.14.8.js"></script>\n<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>\n';
                "bootstrap" == this.koScriptUsing() ? this.surveyEmbedingHead.setValue(t + '<script src="js/survey.react.bootstrap.min.js"></script>') : this.surveyEmbedingHead.setValue(t + '<script src="js/survey.react.min.js"></script>\n<link href="css/survey.css" type="text/css" rel="stylesheet" />')
            }
        }, e.prototype.createEditor = function(t) {
            var e = ace.edit(t);
            return e.setTheme("ace/theme/monokai"), e.session.setMode("ace/mode/json"), e.setShowPrintMargin(!1), e.renderer.setShowGutter(!1), e.setReadOnly(!0), e
        }, e.prototype.getJavaText = function() {
            var t = "page" == this.koShowAsWindow();
            return "knockout" == this.koLibraryVersion() ? this.getKnockoutJavaText(t) : this.getReactJavaText(t)
        }, e.prototype.getKnockoutJavaText = function(t) {
            var e = t ? "var survey = new Survey.Survey(\n" : "var surveyWindow = new Survey.SurveyWindow(\n";
            e += this.getJsonText(), e += ");\n", t || (e += "surveyWindow.");
            var o = this.getSaveFuncCode();
            return e += "survey.onComplete.add(function (s) {\n" + o + "\n });\n", t ? e += 'survey.render("mySurveyJSName");' : (e += "//By default Survey.title is used.\n", e += '//surveyWindow.title = "My Survey Window Title.";\n', e += "surveyWindow.show();"), e
        }, e.prototype.getReactJavaText = function(t) {
            var e = this.getSaveFuncCode(),
                o = "var surveySendResult = function (s) {\n" + e + "\n });\n",
                i = t ? "ReactSurvey" : "ReactSurveyWindow",
                r = "var surveyJson = " + this.getJsonText() + "\n\n",
                n = r + o + "ReactDOM.render(\n<" + i + ' json={surveyJson} onComplete={surveySendResult} />, \n document.getElementById("mySurveyJSName"));';
            return n
        }, e.prototype.getSaveFuncCode = function() {
            return this.koHasIds() ? "survey.sendResult('" + this.surveyPostId + "');" : 'alert("The results are:" + JSON.stringify(s.data));'
        }, e.prototype.getJsonText = function() {
            return this.koHasIds() && this.koLoadSurvey() ? "{ surveyId: '" + this.surveyId + "'}" : this.generateValidJSON ? JSON.stringify(this.json) : (new t.SurveyJSON5).stringify(this.json)
        }, e
    }();
    t.SurveyEmbedingWindow = e
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function() {
        function e(t) {
            this.onModifiedCallback = t, this.koVerbs = ko.observableArray(), this.koHasVerbs = ko.observable();
            var e = Survey.JsonObject.metaData.getChildrenClasses("selectbase", !0);
            this.choicesClasses = [];
            for (var o = 0; o < e.length; o++)
                this.choicesClasses.push(e[o].name)
        }
        return Object.defineProperty(e.prototype, "survey", {
            get: function() {
                return this.surveyValue
            },
            set: function(t) {
                this.survey != t && (this.surveyValue = t)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "obj", {
            get: function() {
                return this.objValue
            },
            set: function(t) {
                this.objValue != t && (this.objValue = t, this.buildVerbs())
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.buildVerbs = function() {
            var e = [],
                o = t.SurveyHelper.getObjectType(this.obj);
            if (o == t.ObjType.Question) {
                var n = this.obj;
                this.survey.pages.length > 1 && e.push(new r(this.survey, n, this.onModifiedCallback)), this.choicesClasses.indexOf(n.getType()) > -1 && e.push(new i(this.survey, n, this.onModifiedCallback))
            }
            this.koVerbs(e), this.koHasVerbs(e.length > 0)
        }, e
    }();
    t.SurveyVerbs = e;
    var o = function() {
        function t(t, e, o) {
            this.survey = t, this.question = e, this.onModifiedCallback = o, this.koItems = ko.observableArray(), this.koSelectedItem = ko.observable()
        }
        return Object.defineProperty(t.prototype, "text", {
            get: function() {
                return ""
            },
            enumerable: !0,
            configurable: !0
        }), t
    }();
    t.SurveyVerbItem = o;
    var i = function(e) {
        function o(o, i, r) {
            e.call(this, o, i, r), this.survey = o, this.question = i, this.onModifiedCallback = r;
            for (var n = Survey.JsonObject.metaData.getChildrenClasses("selectbase", !0), s = [], a = 0; a < n.length; a++)
                s.push({
                    value: n[a].name,
                    text: t.editorLocalization.getString("qt." + n[a].name)
                });
            this.koItems(s), this.koSelectedItem(i.getType());
            var u = this;
            this.koSelectedItem.subscribe(function(t) {
                u.changeType(t)
            })
        }
        return __extends(o, e), Object.defineProperty(o.prototype, "text", {
            get: function() {
                return t.editorLocalization.getString("pe.verbChangeType")
            },
            enumerable: !0,
            configurable: !0
        }), o.prototype.changeType = function(t) {
            if (t != this.question.getType()) {
                var e = this.survey.getPageByQuestion(this.question),
                    o = e.questions.indexOf(this.question),
                    i = Survey.QuestionFactory.Instance.createQuestion(t, this.question.name),
                    r = new Survey.JsonObject,
                    n = r.toJsonObject(this.question);
                r.toObject(n, i), e.removeQuestion(this.question), e.addQuestion(i, o), this.onModifiedCallback && this.onModifiedCallback()
            }
        }, o
    }(o);
    t.SurveyVerbChangeTypeItem = i;
    var r = function(e) {
        function o(o, i, r) {
            e.call(this, o, i, r), this.survey = o, this.question = i, this.onModifiedCallback = r;
            for (var n = [], s = 0; s < this.survey.pages.length; s++) {
                var a = this.survey.pages[s];
                n.push({
                    value: a,
                    text: t.SurveyHelper.getObjectName(a)
                })
            }
            this.koItems(n), this.prevPage = this.survey.getPageByQuestion(i), this.koSelectedItem(this.prevPage);
            var u = this;
            this.koSelectedItem.subscribe(function(t) {
                u.changePage(t)
            })
        }
        return __extends(o, e), Object.defineProperty(o.prototype, "text", {
            get: function() {
                return t.editorLocalization.getString("pe.verbChangePage")
            },
            enumerable: !0,
            configurable: !0
        }), o.prototype.changePage = function(t) {
            null != t && t != this.prevPage && (this.prevPage.removeQuestion(this.question), t.addQuestion(this.question), this.onModifiedCallback && this.onModifiedCallback())
        }, o
    }(o);
    t.SurveyVerbChangePageItem = r
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function t() {
            this.index = -1, this.maximumCount = 10, this.items = [], this.koCanUndo = ko.observable(!1), this.koCanRedo = ko.observable(!1)
        }
        return t.prototype.clear = function() {
            this.items = [], this.koCanUndo(!1), this.koCanRedo(!1)
        }, t.prototype.setCurrent = function(t, e) {
            var i = new o;
            i.surveyJSON = (new Survey.JsonObject).toJsonObject(t), i.selectedObjName = e, this.index < this.items.length - 1 && this.items.splice(this.index + 1), this.items.push(i), this.removeOldData(), this.index = this.items.length - 1, this.updateCanUndoRedo()
        }, t.prototype.undo = function() {
            return this.canUndo ? this.doUndoRedo(-1) : null
        }, t.prototype.redo = function() {
            return this.canRedo ? this.doUndoRedo(1) : null
        }, t.prototype.updateCanUndoRedo = function() {
            this.koCanUndo(this.canUndo), this.koCanRedo(this.canRedo)
        }, t.prototype.doUndoRedo = function(t) {
            return this.index += t, this.updateCanUndoRedo(), this.index >= 0 && this.index < this.items.length ? this.items[this.index] : null
        }, Object.defineProperty(t.prototype, "canUndo", {
            get: function() {
                return this.index >= 1 && this.index < this.items.length
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "canRedo", {
            get: function() {
                return this.items.length > 1 && this.index < this.items.length - 1
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.removeOldData = function() {
            this.items.length - 1 < this.maximumCount || this.items.splice(0, this.items.length - this.maximumCount - 1)
        }, t
    }();
    t.SurveyUndoRedo = e;
    var o = function() {
        function t() {}
        return t
    }();
    t.UndoRedoItem = o
}(SurveyEditor || (SurveyEditor = {}));
var templateEditor;
!function(t) {
    var e;
    !function(t) {
        t.html = '<div class="row nav-tabs">    <nav class="navbar-default">        <div class="container-fluid">            <div class="collapse navbar-collapse">                <ul class="nav nav-tabs no-borders">                    <li data-bind="css: {active: koViewType() == \'designer\'}"><a href="#" data-bind="click:selectDesignerClick, text: $root.getLocString(\'ed.designer\')"></a></li>                    <li data-bind="css: {active: koViewType() == \'editor\'}"><a href="#" data-bind="click:selectEditorClick, text: $root.getLocString(\'ed.jsonEditor\')"></a></li>                    <li data-bind="css: {active: koViewType() == \'test\'}"><a href="#" data-bind="click:selectTestClick, text: $root.getLocString(\'ed.testSurvey\')"></a></li>                    <li data-bind="css: {active: koViewType() == \'embed\'}"><a href="#" data-bind="click:selectEmbedClick, text: $root.getLocString(\'ed.embedSurvey\')"></a></li>                    <li data-bind="visible: koShowSaveButton"><button type="button" class="btn btn-default" data-bind="click: saveButtonClick"><span data-bind="text: $root.getLocString(\'ed.saveSurvey\')"></span></button></li>                    <li data-bind="visible: koIsShowDesigner" style="margin-left:5px"><button type="button" class="btn btn-default" data-bind="enable:undoRedo.koCanUndo, click: doUndoClick"><span data-bind="text: $root.getLocString(\'ed.undo\')"></span></button></li>                    <li data-bind="visible: koIsShowDesigner" style="margin-left:5px"><button type="button" class="btn btn-default" data-bind="enable:undoRedo.koCanRedo, click: doRedoClick"><span data-bind="text: $root.getLocString(\'ed.redo\')"></span></button></li>                    <li data-bind="visible: koIsShowDesigner() && koShowOptions()" style="margin-left:5px">                        <div class="btn-group">                            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-bind="text: $root.getLocString(\'ed.options\')">                                Options <span class="caret"></span>                            </button>                            <ul class="dropdown-menu">                                <li data-bind="css: {active: koGenerateValidJSON}"><a href="#" data-bind="click:generateValidJSONClick, text: $root.getLocString(\'ed.generateValidJSON\')"></a></li>                                <li data-bind="css: {active: !koGenerateValidJSON()}"><a href="#" data-bind="click:generateReadableJSONClick, text: $root.getLocString(\'ed.generateReadableJSON\')"></a></li>                            </ul>                        </div>                    </li>                    <li data-bind="visible: koViewType() == \'test\'" style="margin-left:5px">                        <select style="margin-top: 10px" data-bind="value: koTestSurveyWidth">                            <option value="100%" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'100%\'"></option>                            <option value="1200px" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'1200px\'"></option>                            <option value="1000px" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'1000px\'"></option>                            <option value="800px" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'800px\'"></option>                            <option value="600px" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'600px\'"></option>                            <option value="400px" data-bind="text: $root.getLocString(\'ed.testSurveyWidth\') + \'400px\'"></option>                        </select>                    </li>                </ul>                </div>        </div>    </nav> </div><div class="panel" style="width:100%">    <div id="surveyjsEditor" data-bind="visible: koViewType() == \'editor\'" style="height:450px;width:100%"></div>    <div id="surveyjsTest" data-bind="visible: koViewType() == \'test\', style: {width: koTestSurveyWidth}" style="margin: 10px">        <div id="surveyjsExample"></div>        <div id="surveyjsExampleResults"></div>        <button id="surveyjsExamplereRun" data-bind="click:selectTestClick, text: $root.getLocString(\'ed.testSurveyAgain\')" style="display:none">Test Again</button>    </div>    <div id="surveyjsEmbed" data-bind="visible: koViewType() == \'embed\'" style="margin: 10px">        <div data-bind="template: { name: \'surveyembeding\', data: surveyEmbeding }"></div>    </div>    <div class="row"  data-bind="visible: koViewType() == \'designer\'">        <div class="row col-md-9">            <div class="col-md-3">                <div class="panel panel-default" style="width:100%">                    <div class="panel-heading">                        <b data-bind="text: $root.getLocString(\'ed.toolbox\')"></b>                    </div>                    <div class="btn-group-vertical" style="width:100%;padding-right:2px">                        <!-- ko foreach: questionTypes -->                        <div class="btn btn-default" style="text-align:left; padding-left:10px; margin:1px;width:100%" draggable="true" data-bind="click: $parent.clickQuestion, event:{dragstart: function(el, e) { $parent.draggingQuestion($data, e); return true;}}">                            <span data-bind="text: $root.getLocString(\'qt.\' + $data)"></span>                        </div>                        <!-- /ko  -->                        <!-- ko foreach: koCopiedQuestions -->                        <div class="btn btn-primary" style="text-align:left; padding-left:10px; margin:1px;width:100%" draggable="true" data-bind="click: $parent.clickCopiedQuestion, event:{dragstart: function(el, e) { $parent.draggingCopiedQuestion($data, e); return true;}}">                            <span data-bind="text:name"></span>                        </div>                        <!-- /ko  -->                    </div>                </div>            </div>            <div class="col-md-9">                <div data-bind="template: { name: \'pageeditor\', data: pagesEditor }"></div>                <div style="overflow-y: scroll;height:450px;">                    <div id="surveyjs" style="width:100%"></div>                </div>            </div>        </div>        <div class="col-md-3">            <div class="panel panel-default" style="width:100%">                <div class="panel-heading">                    <div class="input-group">                        <select class="form-control" data-bind="options: koObjects, optionsText: \'text\', value: koSelectedObject"></select>                        <span class="input-group-btn">                            <button class="btn btn-default" type="button" data-bind="enable: koCanDeleteObject, click: deleteCurrentObject, attr: { title: $root.getLocString(\'ed.delSelObject\')}"><span class="glyphicon glyphicon-remove"></span></button>                        </span>                    </div>                </div>                <div data-bind="template: { name: \'objecteditor\', data: selectedObjectEditor }"></div>                <div class="panel-footer" data-bind="visible:surveyVerbs.koHasVerbs">                    <div data-bind="template: { name: \'objectverbs\', data: surveyVerbs }"></div>                </div>            </div>        </div>    </div></div><script type="text/html" id="objecteditor">    <table class="table svd_table-nowrap">        <tbody data-bind="foreach: koProperties">            <tr data-bind="click: $parent.changeActiveProperty($data), css: {\'active\': $parent.koActiveProperty() == $data}">                <td data-bind="text: displayName, attr: {title: title}" width="50%"></td>                <td width="50%">                    <span data-bind="text: koText, visible: $parent.koActiveProperty() != $data, attr: {title: koText}, style: {color: koIsDefault() ? \'gray\' : \'\'}" style="text-overflow:ellipsis;white-space:nowrap;overflow:hidden"></span>                    <div data-bind="visible: $parent.koActiveProperty() == $data">                        <!-- ko template: { name: \'propertyeditor-\' + editorType, data: $data } -->                        <!-- /ko -->                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="objectverbs">    <!-- ko foreach: koVerbs -->        <div class="row">            <div class="input-group">                <span  class="input-group-addon" data-bind="text:text"></span>                <select class="form-control" data-bind="options: koItems, optionsText: \'text\', optionsValue:\'value\', value: koSelectedItem"></select>            </div>        </div>    <!-- /ko  --></script><script type="text/html" id="pageeditor">    <ul class="nav nav-tabs" data-bind="tabs:true">        <!-- ko foreach: koPages -->        <li data-bind="css: {active: koSelected()},event:{           keydown:function(el, e){ $parent.keyDown(el, e); },           dragstart:function(el, e){ $parent.dragStart(el); return true; },           dragover:function(el, e){ $parent.dragOver(el);},           dragend:function(el, e){ $parent.dragEnd();},           drop:function(el, e){ $parent.dragDrop(el);}         }">             <a href="#" data-bind="click:$parent.selectPageClick">                <span data-bind="text: title"></span>            </a>        </li>        <!-- /ko  -->        <li><button type="button" class="btn btn-default" data-bind="click:addNewPageClick"><span class="glyphicon glyphicon-plus"></span></button></li>    </ul></script><script type="text/html" id="surveyembeding">    <div class="row">        <select data-bind="value:koLibraryVersion">            <option value="knockout" data-bind="text: $root.getLocString(\'ew.knockout\')"></option>            <option value="react" data-bind="text: $root.getLocString(\'ew.react\')"></option>        </select>        <select data-bind="value:koScriptUsing">            <option value="bootstrap" data-bind="text: $root.getLocString(\'ew.bootstrap\')"></option>            <option value="standard" data-bind="text: $root.getLocString(\'ew.standard\')"></option>        </select>        <select data-bind="value:koShowAsWindow">            <option value="page" data-bind="text: $root.getLocString(\'ew.showOnPage\')"></option>            <option value="window" data-bind="text: $root.getLocString(\'ew.showInWindow\')"></option>        </select>        <label class="checkbox-inline" data-bind="visible:koHasIds">            <input type="checkbox" data-bind="checked:koLoadSurvey" />            <span data-bind="text: $root.getLocString(\'ew.loadFromServer\')"></span>        </label>    </div>    <div class="panel">        <div class="panel-heading" data-bind="text: $root.getLocString(\'ew.titleScript\')"></div>        <div id="surveyEmbedingHead" style="height:70px;width:100%"></div>    </div>    <div class="panel" data-bind="visible: koVisibleHtml">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleHtml\')"></div>        <div id="surveyEmbedingBody" style="height:30px;width:100%"></div>    </div>    <div class="panel">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleJavaScript\')"></div>        <div id="surveyEmbedingJava" style="height:300px;width:100%"></div>    </div></script><script type="text/html" id="propertyeditor-boolean">    <input type="checkbox" data-bind="checked: koValue" /></script><script type="text/html" id="propertyeditor-dropdown">    <select data-bind="value: koValue, options: choices"  style="width:100%"></select></script><script type="text/html" id="propertyeditor-html">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-html">    <textarea data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-itemvalues">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-itemvalues">    <div style="overflow-y: auto; overflow-x:hidden; max-height:400px">        <table class="table">            <thead>                <tr>                    <th data-bind="text: $root.getLocString(\'pe.value\')"></th>                    <th data-bind="text: $root.getLocString(\'pe.text\')"></th>                    <th></th>                </tr>            </thead>            <tbody>                <!-- ko foreach: koItems -->                <tr>                    <td>                        <input type="text" class="form-control" data-bind="value:koValue" style="width:200px" />                        <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                    </td>                    <td><input type="text" class="form-control" data-bind="value:koText" style="width:200px" /></td>                    <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')" /></td>                </tr>                <!-- /ko -->            </tbody>        </table>    </div>    <div class="row btn-toolbar">        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')" />        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')" />    </div></script><script type="text/html" id="propertyeditor-matrixdropdowncolumns">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-matrixdropdowncolumns">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.required\')"></th>                <th data-bind="text: $root.getLocString(\'pe.cellType\')"></th>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td>                    <a href="#" data-bind="visible:koHasChoices, click: onShowChoicesClick">                        <span class="glyphicon" data-bind="css: {\'glyphicon-chevron-down\': !koShowChoices(), \'glyphicon-chevron-up\': koShowChoices()}"></span>                    </a>                    <input type="checkbox" data-bind="checked: koIsRequired" />                </td>                <td>                    <select class="form-control" data-bind="options: cellTypeChoices, value: koCellType"  style="width:110px"></select>                </td>                <td>                    <input type="text" class="form-control" data-bind="value:koName" style="width:100px" />                    <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                </td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:120px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <tr data-bind="visible: koShowChoices() && koHasChoices()">                <td colspan="4" style="border-top-style:none">                    <div class="form-group">                        <label class="control-label col-sm-3" data-bind="text:$root.getLocString(\'pe.hasOther\')"></label>                        <div class="col-sm-2">                            <input type="checkbox" data-bind="checked: koHasOther" />                        </div>                        <div class="col-sm-7" data-bind="visible: !koHasColCount()"></div>                        <label class="control-label col-sm-3" data-bind="visible:koHasColCount, text:$root.getLocString(\'pe.colCount\')"></label>                        <select class="form-control col-sm-4" data-bind="visible:koHasColCount, options: colCountChoices, value: koColCount" style="width:110px"></select>                    </div>                    <!-- ko template: { name: \'propertyeditor-itemvalues\', data: choicesEditor } -->                    <!-- /ko -->                </td>            </tr>            <!-- /ko -->            <tr>                <td colspan="3">                    <div class="row btn-toolbar">                        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/>                        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')"" />                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="propertyeditor-modal">    <div data-bind="visible:!editor.isEditable">        <span data-bind="text: koText"></span>        <button type="button"  class="btn btn-default"data-toggle="modal" style="padding: 2px;" data-bind="attr: {\'data-target\' : modalNameTarget}">            <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>        </button>    </div>    <div data-bind="visible:editor.isEditable" style="display:table">        <input type="text" data-bind="value: koValue" style="display:table-cell; width:100%" />        <button type="button" class="btn btn-default" style="display:table-cell; padding: 2px;"  data-toggle="modal" data-bind="attr: {\'data-target\' : modalNameTarget}">            <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>        </button>    </div>    <div data-bind="attr: {id : modalName}" class="modal fade" role="dialog">        <div class="modal-dialog">            <div class="modal-content">                <div class="modal-header">                    <button type="button" class="close" data-dismiss="modal">&times;</button>                    <h4 class="modal-title" data-bind="text:editor.title"></h4>                </div>                  <div class="modal-body svd_notopbottompaddings">                    <!-- ko template: { name: \'propertyeditorcontent-\' + editorType, data: editor } -->                    <!-- /ko -->                </div>                <div class="modal-footer">                    <input type="button" class="btn btn-primary" data-bind="click: editor.onApplyClick, value: $root.getLocString(\'pe.apply\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-bind="click: editor.onResetClick, value: $root.getLocString(\'pe.reset\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-dismiss="modal" data-bind="value: $root.getLocString(\'pe.close\')" style="width:100px" />                </div>            </div>        </div>    </div></script><script type="text/html" id="propertyeditor-number">    <input type="number" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-restfull">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-restfull">    <form>        <div class="form-group">            <label for="url">Url:</label>            <input id="url" type="text" data-bind="value:koUrl" class="form-control" />        </div>        <div class="form-group">            <label for="path">Path:</label>            <input id="path" type="text" data-bind="value:koPath" class="form-control" />        </div>        <div class="form-group">            <label for="valueName">valueName:</label>            <input id="valueName" type="text" data-bind="value:koValueName" class="form-control" />        </div>        <div class="form-group">            <label for="titleName">titleName:</label>            <input id="titleName" type="text" data-bind="value:koTitleName" class="form-control" />        </div>    </form>    <div id="restfullSurvey" style="width:100%;height:150px"></div></script><script type="text/html" id="propertyeditor-string">    <input type="text" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-text">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-text">    <textarea data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-textitems">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-textitems"><div class="panel">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td><input type="text" class="form-control" data-bind="value:koName" style="width:200px" /></td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:200px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <!-- /ko -->            <tr>                <td colspan="4"><input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/></td>            </tr>        </tbody>    </table></div></script><script type="text/html" id="propertyeditor-triggers">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-triggers"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableTriggers -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'koText\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn btn-default"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="visible: koSelected() == null">        <div data-bind="visible: koQuestions().length == 0, text: $root.getLocString(\'pe.noquestions\')"></div>        <div data-bind="visible: koQuestions().length > 0, text: $root.getLocString(\'pe.createtrigger\')"></div>    </div>    <div data-bind="visible: koSelected() != null">        <div data-bind="with: koSelected">            <div class="row form-inline">                <div class="col-sm-4">                    <span data-bind="text: $root.getLocString(\'pe.triggerOn\')"></span><select class="form-control" data-bind="options:$parent.koQuestions, value: koName"></select> <span> </span>                </div>                <div class="col-sm-4">                    <select class="form-control" data-bind="options:availableOperators, optionsValue: \'name\', optionsText: \'text\', value:koOperator"></select>                </div>                <div class="col-sm-4">                    <input class="form-control" style="padding: 0" type="text" data-bind="visible: koRequireValue, value:koValue" />                </div>            </div>            <!-- ko if: koType() == \'visibletrigger\' -->            <div class="row">                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: pages } -->                    <!-- /ko -->                </div>                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: questions } -->                    <!-- /ko -->                </div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'completetrigger\' -->            <div class="row">               <div style="margin: 10px" data-bind="text: $root.getLocString(\'pe.triggerCompleteText\')"></div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'setvaluetrigger\' -->            <div class="row form-inline" style="margin-top:10px">                <div class="col-sm-6">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetToName\')"></span><input class="form-control" type="text" data-bind="value:kosetToName" />                </div>                <div class="col-sm-1">                </div>                <div class="col-sm-5">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetValue\')"></span><input class="form-control" type="text" data-bind="value:kosetValue" />                </div>            </div>            <div class="row form-inline">                <div class="col-sm-12">                    <input type="checkbox" data-bind="checked: koisVariable" /> <span data-bind="text: $root.getLocString(\'pe.triggerIsVariable\')"></span>                </div>            </div>            <!-- /ko -->        </div>    </div></div></script><script type="text/html" id="propertyeditor-triggersitems">    <div class="panel no-margins no-padding">        <div class="panel-heading">            <span data-bind="text: title"></span>        </div>        <div class="input-group">            <select class="form-control" multiple="multiple" data-bind="options:koChoosen, value: koChoosenSelected"></select>            <span class="input-group-btn" style="vertical-align:top">                <button type="button" data-bind="enable: koChoosenSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>        <div class="input-group" style="margin-top:5px">            <select class="form-control" data-bind="options:koObjects, value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onAddClick" style="width:40px" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span></button>            </span>        </div>    </div></script><script type="text/html" id="propertyeditor-validators">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-validators"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableValidators -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'text\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="template: { name: \'objecteditor\', data: selectedObjectEditor }"></div></div></script>';
    }(e = t.ko || (t.ko = {}))
}(templateEditor || (templateEditor = {}));
var template_page;
!function(t) {
    t.html = '<div data-bind="event:{           dragenter:function(el, e){ dragEnter(e);},           dragleave:function(el, e){ dragLeave(e);},           dragover:function(el, e){ return false;},           drop:function(el, e){ dragDrop(e);}}     ">    <h4 data-bind="visible: (title.length > 0) && data.showPageTitles, text: koNo() + processedTitle, css: $root.css.pageTitle"></h4>    <!-- ko foreach: { data: rows, as: \'row\'} -->    <div data-bind="visible: row.koVisible, css: $root.css.row">        <!-- ko foreach: { data: row.questions, as: \'question\' , afterRender: row.koAfterRender } -->        <!-- ko template: { name: \'survey-question\', data: question } -->        <!-- /ko -->        <!-- /ko -->    </div>    <!-- /ko -->    <div class="well" data-bind="visible:$root.isDesignMode && questions.length == 0">        <span data-bind="text:$root.getEditorLocString(\'survey.dropQuestion\')"></span>    </div>    <div class="svd_dragover" data-bind="visible: koDraggingBottom"></div></div>'
}(template_page || (template_page = {}));
var template_question;
!function(t) {
    t.html = '<div style="vertical-align:top" data-bind="style: {display: question.koVisible()|| $root.isDesignMode ? \'inline-block\': \'none\', marginLeft: question.koMarginLeft, paddingRight: question.koPaddingRight, width: question.koRenderWidth },      attr : {id: id, draggable: $root.isDesignMode}, click: $root.isDesignMode ? koOnClick: null,          event:{           dragstart:function(el, e){ dragStart(e); return true; },           dragover:function(el, e){ dragOver(e);},           drop:function(el, e){ dragDrop(e);}         }, css:{svd_q_design_border: $root.isDesignMode, svd_q_selected : koIsSelected, \'well well-sm\': $root.isDesignMode}">    <div style="vertical-align:top" class="svd_dragover" data-bind="visible: koIsDragging"></div>    <div class="svd_q_copybutton" data-bind="visible: koIsSelected">        <button class="btn btn-primary btn-xs" data-bind="click: $root.copyQuestionClick, text:$root.getEditorLocString(\'survey.copy\')"></button>    </div>    <div data-bind="css:{svd_q_design: $root.isDesignMode}">        <div class="alert alert-danger" role="alert" data-bind="visible: koErrors().length > 0, foreach: koErrors">            <div>                <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>                <span data-bind="text:$data.getText()"></span>            </div>        </div>        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'top\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->        <!-- ko template: { name: \'survey-question-\' + question.getType(), data: question } -->        <!-- /ko -->        <div data-bind="visible: question.hasComment">            <div data-bind="text:question.commentText"></div>            <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': true } }"></div>        </div>        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'bottom\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->    </div></div>'
}(template_question || (template_question = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function e(e, o) {
            void 0 === e && (e = null), void 0 === o && (o = null), this.stateValue = "", this.surveyId = null, this.surveyPostId = null, this.saveNo = 0, this.timeoutId = -1, this.options = o, this.questionTypes = this.getQuestionTypes(), this.koCopiedQuestions = ko.observableArray(), this.koCanDeleteObject = ko.observable(!1);
            var i = this;
            this.koState = ko.observable(), this.koShowSaveButton = ko.observable(!1), this.koShowOptions = ko.observable(!1), this.koTestSurveyWidth = ko.observable("100%"), this.saveButtonClick = function() {
                i.doSave()
            }, this.koObjects = ko.observableArray(), this.koSelectedObject = ko.observable(), this.koSelectedObject.subscribe(function(t) {
                i.selectedObjectChanged(null != t ? t.value : null)
            }), this.koGenerateValidJSON = ko.observable(this.options && this.options.generateValidJSON), this.koGenerateValidJSON.subscribe(function(t) {
                i.options || (i.options = {}), i.options.generateValidJSON = t, i.generateValidJSONChangedCallback && i.generateValidJSONChangedCallback(t)
            }), this.surveyObjects = new t.SurveyObjects(this.koObjects, this.koSelectedObject), this.undoRedo = new t.SurveyUndoRedo, this.surveyVerbs = new t.SurveyVerbs(function() {
                i.setModified()
            }), this.selectedObjectEditor = new t.SurveyObjectEditor, this.selectedObjectEditor.onPropertyValueChanged.add(function(t, e) {
                i.onPropertyValueChanged(e.property, e.object, e.newValue)
            }), this.pagesEditor = new t.SurveyPagesEditor(function() {
                i.addPage()
            }, function(t) {
                i.surveyObjects.selectObject(t)
            }, function(t, e) {
                i.movePage(t, e)
            }, function(t) {
                i.deleteCurrentObject()
            }), this.surveyEmbeding = new t.SurveyEmbedingWindow, this.koViewType = ko.observable("designer"), this.koIsShowDesigner = ko.computed(function() {
                return "designer" == i.koViewType()
            }), this.selectDesignerClick = function() {
                i.showDesigner()
            }, this.selectEditorClick = function() {
                i.showJsonEditor()
            }, this.selectTestClick = function() {
                i.showTestSurvey()
            }, this.selectEmbedClick = function() {
                i.showEmbedEditor()
            }, this.generateValidJSONClick = function() {
                i.koGenerateValidJSON(!0)
            }, this.generateReadableJSONClick = function() {
                i.koGenerateValidJSON(!1)
            }, this.runSurveyClick = function() {
                i.showLiveSurvey()
            }, this.embedingSurveyClick = function() {
                i.showSurveyEmbeding()
            }, this.deleteObjectClick = function() {
                i.deleteCurrentObject()
            }, this.draggingQuestion = function(t, e) {
                i.doDraggingQuestion(t, e)
            }, this.clickQuestion = function(t) {
                i.doClickQuestion(t)
            }, this.draggingCopiedQuestion = function(t, e) {
                i.doDraggingCopiedQuestion(t.json, e)
            }, this.clickCopiedQuestion = function(t) {
                i.doClickCopiedQuestion(t.json)
            }, this.doUndoClick = function() {
                i.doUndoRedo(i.undoRedo.undo())
            }, this.doRedoClick = function() {
                i.doUndoRedo(i.undoRedo.redo())
            }, e && this.render(e)
        }
        return Object.defineProperty(e.prototype, "survey", {
            get: function() {
                return this.surveyValue
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.render = function(t) {
            void 0 === t && (t = null);
            var e = this;
            t && "string" == typeof t && (t = document.getElementById(t)), t && (this.renderedElement = t), t = this.renderedElement, t && (t.innerHTML = templateEditor.ko.html, e.applyBinding())
        }, e.prototype.loadSurvey = function(t) {
            var e = this;
            (new Survey.dxSurveyService).loadSurvey(t, function(t, o, i) {
                t && o && (e.text = JSON.stringify(o))
            })
        }, Object.defineProperty(e.prototype, "text", {
            get: function() {
                return this.koIsShowDesigner() ? this.getSurveyTextFromDesigner() : null != this.jsonEditor ? this.jsonEditor.getValue() : ""
            },
            set: function(e) {
                this.textWorker = new t.SurveyTextWorker(e), this.textWorker.isJsonCorrect ? (this.initSurvey((new Survey.JsonObject).toJsonObject(this.textWorker.survey)), this.showDesigner(), this.setUndoRedoCurrentState(!0)) : (this.setTextValue(e), this.koViewType("editor"))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "state", {
            get: function() {
                return this.stateValue
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setState = function(t) {
            this.stateValue = t, this.koState(this.state)
        }, e.prototype.doSave = function() {
            if (this.setState("saving"), this.saveSurveyFunc) {
                this.saveNo++;
                var t = this;
                this.saveSurveyFunc(this.saveNo, function(e, o) {
                    t.setState("saved"), t.saveNo == e && o && t.setState("saved")
                })
            }
        }, e.prototype.setModified = function() {
            this.setState("modified"), this.setUndoRedoCurrentState()
        }, e.prototype.setUndoRedoCurrentState = function(t) {
            void 0 === t && (t = !1), t && this.undoRedo.clear();
            var e = this.koSelectedObject() ? this.koSelectedObject().value : null;
            this.undoRedo.setCurrent(this.surveyValue, e ? e.name : null)
        }, Object.defineProperty(e.prototype, "saveSurveyFunc", {
            get: function() {
                return this.saveSurveyFuncValue
            },
            set: function(t) {
                this.saveSurveyFuncValue = t, this.koShowSaveButton(null != t)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "showOptions", {
            get: function() {
                return this.koShowOptions()
            },
            set: function(t) {
                this.koShowOptions(t)
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setTextValue = function(t) {
            this.isProcessingImmediately = !0, this.jsonEditor && (this.jsonEditor.setValue(t), this.jsonEditor.renderer.updateFull(!0)), this.processJson(t), this.isProcessingImmediately = !1
        }, e.prototype.addPage = function() {
            var e = t.SurveyHelper.getNewPageName(this.survey.pages),
                o = this.surveyValue.addNewPage(e);
            this.addPageToUI(o), this.setModified()
        }, e.prototype.getLocString = function(e) {
            return t.editorLocalization.getString(e)
        }, e.prototype.getQuestionTypes = function() {
            var t = Survey.QuestionFactory.Instance.getAllTypes();
            if (!this.options || !this.options.questionTypes || !this.options.questionTypes.length)
                return t;
            for (var e = [], o = 0; o < this.options.questionTypes.length; o++) {
                var i = this.options.questionTypes[o];
                t.indexOf(i) > -1 && e.push(i)
            }
            return e
        }, e.prototype.movePage = function(t, e) {
            var o = this.survey.pages[t];
            this.survey.pages.splice(t, 1), this.survey.pages.splice(e, 0, o), this.pagesEditor.survey = this.survey, this.surveyObjects.selectObject(o), this.setModified()
        }, e.prototype.addPageToUI = function(t) {
            this.pagesEditor.survey = this.surveyValue, this.surveyObjects.addPage(t)
        }, e.prototype.onQuestionAdded = function(t) {
            var e = this.survey.getPageByQuestion(t);
            this.surveyObjects.addQuestion(e, t), this.survey.render()
        }, e.prototype.onQuestionRemoved = function(t) {
            this.surveyObjects.removeObject(t), this.survey.render()
        }, e.prototype.onPropertyValueChanged = function(e, o, i) {
            e.isDefaultValue(i);
            o[e.name] = i, "name" == e.name && (this.surveyObjects.nameChanged(o), t.SurveyHelper.getObjectType(o) == t.ObjType.Page && this.pagesEditor.changeName(o)), this.setModified(), this.survey.render()
        }, e.prototype.doUndoRedo = function(t) {
            if (this.initSurvey(t.surveyJSON), t.selectedObjName) {
                var e = this.findObjByName(t.selectedObjName);
                e && this.surveyObjects.selectObject(e)
            }
            this.setState(this.undoRedo.koCanUndo() ? "modified" : "saved")
        }, e.prototype.findObjByName = function(t) {
            var e = this.survey.getPageByName(t);
            if (e)
                return e;
            var o = this.survey.getQuestionByName(t);
            return o ? o : null
        }, e.prototype.canSwitchViewType = function(t) {
            return (!t || this.koViewType() != t) && ("editor" != this.koViewType() || !this.textWorker || (this.textWorker.isJsonCorrect ? (this.initSurvey((new Survey.JsonObject).toJsonObject(this.textWorker.survey)), !0) : (alert(this.getLocString("ed.correctJSON")), !1)))
        }, e.prototype.showDesigner = function() {
            this.canSwitchViewType("designer") && this.koViewType("designer")
        }, e.prototype.showJsonEditor = function() {
            "editor" != this.koViewType() && (this.jsonEditor.setValue(this.getSurveyTextFromDesigner()), this.jsonEditor.focus(), this.koViewType("editor"))
        }, e.prototype.showTestSurvey = function() {
            this.canSwitchViewType(null) && (this.showLiveSurvey(), this.koViewType("test"))
        }, e.prototype.showEmbedEditor = function() {
            this.canSwitchViewType("embed") && (this.showSurveyEmbeding(), this.koViewType("embed"))
        }, e.prototype.getSurveyTextFromDesigner = function() {
            var e = (new Survey.JsonObject).toJsonObject(this.survey);
            return this.options && this.options.generateValidJSON ? JSON.stringify(e, null, 1) : (new t.SurveyJSON5).stringify(e, null, 1)
        }, e.prototype.selectedObjectChanged = function(e) {
            var o = !1;
            this.selectedObjectEditor.selectedObject = e, this.surveyVerbs.obj = e;
            var i = t.SurveyHelper.getObjectType(e);
            i == t.ObjType.Page && (this.survey.currentPage = e, o = this.survey.pages.length > 1), i == t.ObjType.Question ? (this.survey.setselectedQuestion(e), o = !0, this.survey.currentPage = this.survey.getPageByQuestion(this.survey.selectedQuestionValue)) : this.survey.setselectedQuestion(null), this.koCanDeleteObject(o)
        }, e.prototype.applyBinding = function() {
            if (null != this.renderedElement) {
                if (ko.cleanNode(this.renderedElement), ko.applyBindings(this, this.renderedElement), this.surveyjs = document.getElementById("surveyjs"), this.surveyjs) {
                    var o = this;
                    this.surveyjs.onkeydown = function(t) {
                        t && (46 == t.keyCode && o.deleteQuestion(), 38 != t.keyCode && 40 != t.keyCode || o.selectQuestion(38 == t.keyCode))
                    }
                }
                this.jsonEditor = ace.edit("surveyjsEditor"), this.surveyjsExample = document.getElementById("surveyjsExample"), this.initSurvey((new t.SurveyJSON5).parse(e.defaultNewSurveyText)), this.setUndoRedoCurrentState(!0), this.surveyValue.mode = "designer", this.surveyValue.render(this.surveyjs), this.initJsonEditor(), t.SurveyTextWorker.newLineChar = this.jsonEditor.session.doc.getNewLineCharacter()
            }
        }, e.prototype.initJsonEditor = function() {
            var t = this;
            this.jsonEditor.setTheme("ace/theme/monokai"), this.jsonEditor.session.setMode("ace/mode/json"), this.jsonEditor.setShowPrintMargin(!1), this.jsonEditor.getSession().on("change", function() {
                t.onJsonEditorChanged()
            }), this.jsonEditor.getSession().setUseWorker(!0)
        }, e.prototype.initSurvey = function(o) {
            this.surveyValue = new Survey.Survey(o), this.surveyValue.isEmpty && (this.surveyValue = new Survey.Survey((new t.SurveyJSON5).parse(e.defaultNewSurveyText))), this.survey.mode = "designer", this.survey.render(this.surveyjs), this.surveyObjects.survey = this.survey, this.pagesEditor.survey = this.survey, this.pagesEditor.setSelectedPage(this.survey.currentPage), this.surveyVerbs.survey = this.survey;
            var i = this;
            this.surveyValue.onSelectedQuestionChanged.add(function(t, e) {
                i.surveyObjects.selectObject(t.selectedQuestionValue)
            }), this.surveyValue.onCopyQuestion.add(function(t, e) {
                i.copyQuestion(i.koSelectedObject().value)
            }), this.surveyValue.onCreateDragDropHelper = function() {
                return i.createDragDropHelper()
            }, this.surveyValue.onProcessHtml.add(function(t, e) {
                e.html = i.processHtml(e.html)
            }), this.surveyValue.onCurrentPageChanged.add(function(t, e) {
                i.pagesEditor.setSelectedPage(t.currentPage)
            }), this.surveyValue.onQuestionAdded.add(function(t, e) {
                i.onQuestionAdded(e.question)
            }), this.surveyValue.onQuestionRemoved.add(function(t, e) {
                i.onQuestionRemoved(e.question)
            })
        }, e.prototype.processHtml = function(t) {
            if (!t)
                return t;
            for (var e = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi; e.test(t);)
                t = t.replace(e, "");
            return t
        }, e.prototype.onJsonEditorChanged = function() {
            if (this.timeoutId > -1 && clearTimeout(this.timeoutId), this.isProcessingImmediately)
                this.timeoutId = -1;
            else {
                var t = this;
                this.timeoutId = setTimeout(function() {
                    t.timeoutId = -1, t.processJson(t.text)
                }, e.updateTextTimeout)
            }
        }, e.prototype.processJson = function(e) {
            this.textWorker = new t.SurveyTextWorker(e), this.jsonEditor && this.jsonEditor.getSession().setAnnotations(this.createAnnotations(e, this.textWorker.errors))
        }, e.prototype.doDraggingQuestion = function(t, e) {
            this.createDragDropHelper().startDragNewQuestion(e, t, this.getNewQuestionName())
        }, e.prototype.doDraggingCopiedQuestion = function(t, e) {
            this.createDragDropHelper().startDragCopiedQuestion(e, this.getNewQuestionName(), t)
        }, e.prototype.createDragDropHelper = function() {
            var e = this;
            return new t.DragDropHelper(this.survey, function() {
                e.setModified()
            })
        }, e.prototype.doClickQuestion = function(t) {
            this.doClickQuestionCore(Survey.QuestionFactory.Instance.createQuestion(t, this.getNewQuestionName()))
        }, e.prototype.doClickCopiedQuestion = function(t) {
            var e = this.getNewQuestionName(),
                o = Survey.QuestionFactory.Instance.createQuestion(t.type, e);
            (new Survey.JsonObject).toObject(t, o), o.name = e, this.doClickQuestionCore(o)
        }, e.prototype.getNewQuestionName = function() {
            return t.SurveyHelper.getNewQuestionName(this.survey.getAllQuestions())
        }, e.prototype.doClickQuestionCore = function(t) {
            var e = this.survey.currentPage,
                o = -1;
            null != this.survey.selectedQuestionValue && (o = e.questions.indexOf(this.survey.selectedQuestionValue) + 1), e.addQuestion(t, o), this.setModified()
        }, e.prototype.deleteQuestion = function() {
            var t = this.getSelectedObjAsQuestion();
            t && this.deleteCurrentObject()
        }, e.prototype.selectQuestion = function(t) {
            var e = this.getSelectedObjAsQuestion();
            e && this.surveyObjects.selectNextQuestion(t)
        }, e.prototype.getSelectedObjAsQuestion = function() {
            var e = this.koSelectedObject().value;
            return e && t.SurveyHelper.getObjectType(e) == t.ObjType.Question ? e : null
        }, e.prototype.deleteCurrentObject = function() {
            this.deleteObject(this.koSelectedObject().value)
        }, e.prototype.copyQuestion = function(e) {
            var o = t.SurveyHelper.getObjectType(e);
            if (o == t.ObjType.Question) {
                var i = (new Survey.JsonObject).toJsonObject(e);
                i.type = e.getType();
                var r = this.getCopiedQuestionByName(e.name);
                r ? r.json = i : this.koCopiedQuestions.push({
                    name: e.name,
                    json: i
                }), this.koCopiedQuestions().length > 3 && this.koCopiedQuestions.splice(0, 1)
            }
        }, e.prototype.getCopiedQuestionByName = function(t) {
            for (var e = this.koCopiedQuestions(), o = 0; o < e.length; o++)
                if (e[o].name == t)
                    return e[o];
            return null
        }, e.prototype.deleteObject = function(e) {
            this.surveyObjects.removeObject(e);
            var o = t.SurveyHelper.getObjectType(e);
            o == t.ObjType.Page && (this.survey.removePage(e), this.pagesEditor.removePage(e), this.setModified()), o == t.ObjType.Question && (this.survey.currentPage.removeQuestion(e), this.survey.setselectedQuestion(null), this.surveyObjects.selectObject(this.survey.currentPage), this.setModified()), this.survey.render()
        }, e.prototype.showLiveSurvey = function() {
            var t = this;
            if (this.surveyjsExample) {
                var e = this.getSurveyJSON();
                if (null != e) {
                    e.cookieName && delete e.cookieName;
                    var o = new Survey.Survey(e),
                        i = document.getElementById("surveyjsExampleResults"),
                        r = document.getElementById("surveyjsExamplereRun");
                    i && (i.innerHTML = ""), r && (r.style.display = "none"), o.onComplete.add(function(e) {
                        i && (i.innerHTML = t.getLocString("ed.surveyResults") + JSON.stringify(o.data)), r && (r.style.display = "")
                    }), o.render(this.surveyjsExample)
                } else
                    this.surveyjsExample.innerHTML = this.getLocString("ed.correctJSON")
            }
        }, e.prototype.showSurveyEmbeding = function() {
            var t = this.getSurveyJSON();
            this.surveyEmbeding.json = t, this.surveyEmbeding.surveyId = this.surveyId, this.surveyEmbeding.surveyPostId = this.surveyPostId, this.surveyEmbeding.generateValidJSON = this.options && this.options.generateValidJSON, this.surveyEmbeding.show()
        }, e.prototype.getSurveyJSON = function() {
            return this.koIsShowDesigner() ? (new Survey.JsonObject).toJsonObject(this.survey) : this.textWorker.isJsonCorrect ? (new Survey.JsonObject).toJsonObject(this.textWorker.survey) : null
        }, e.prototype.createAnnotations = function(t, e) {
            for (var o = new Array, i = 0; i < e.length; i++) {
                var r = e[i],
                    n = {
                        row: r.position.start.row,
                        column: r.position.start.column,
                        text: r.text,
                        type: "error"
                    };
                o.push(n)
            }
            return o
        }, e.updateTextTimeout = 1e3, e.defaultNewSurveyText = "{ pages: [ { name: 'page1'}] }", e
    }();
    t.SurveyEditor = e, (new Survey.SurveyTemplateText).replaceText(template_page.html, "page"), (new Survey.SurveyTemplateText).replaceText(template_question.html, "question"), Survey.Survey.prototype.onCreating = function() {
        this.selectedQuestionValue = null, this.onSelectedQuestionChanged = new Survey.Event, this.onCopyQuestion = new Survey.Event, this.onCreateDragDropHelper = null;
        var t = this;
        this.copyQuestionClick = function() {
            t.onCopyQuestion.fire(t)
        }
    }, Survey.Survey.prototype.setselectedQuestion = function(t) {
        if (t != this.selectedQuestionValue) {
            var e = this.selectedQuestionValue;
            this.selectedQuestionValue = t, null != e && e.onSelectedQuestionChanged(), null != this.selectedQuestionValue && this.selectedQuestionValue.onSelectedQuestionChanged(), this.onSelectedQuestionChanged.fire(this, {
                oldSelectedQuestion: e,
                newSelectedQuestion: t
            })
        }
    }, Survey.Survey.prototype.getEditorLocString = function(e) {
        return t.editorLocalization.getString(e)
    }, Survey.Page.prototype.onCreating = function() {
        var t = this;
        this.dragEnterCounter = 0, this.koDragging = ko.observable(-1), this.koDraggingQuestion = ko.observable(null), this.koDraggingBottom = ko.observable(!1), this.koDragging.subscribe(function(e) {
            if (e < 0)
                t.dragEnterCounter = 0, t.koDraggingQuestion(null), t.koDraggingBottom(!1);
            else {
                var o = e >= 0 && e < t.questions.length ? t.questions[e] : null;
                t.koDraggingQuestion(o), t.koDraggingBottom(null == o)
            }
        }), this.koDraggingQuestion.subscribe(function(t) {
            t && t.koIsDragging(!0)
        }), this.koDraggingQuestion.subscribe(function(t) {
            t && t.koIsDragging(!1)
        }, this, "beforeChange"), this.dragEnter = function(e) {
            e.preventDefault(), t.dragEnterCounter++, t.doDragEnter(e)
        }, this.dragLeave = function(e) {
            t.dragEnterCounter--, 0 === t.dragEnterCounter && t.koDragging(-1)
        }, this.dragDrop = function(e) {
            t.doDrop(e)
        }
    }, Survey.Page.prototype.doDrop = function(e) {
        var o = this.data.onCreateDragDropHelper ? this.data.onCreateDragDropHelper() : new t.DragDropHelper(this.data, null);
        o.doDrop(e)
    }, Survey.Page.prototype.doDragEnter = function(e) {
        this.questions.length > 0 || this.koDragging() > 0 || new t.DragDropHelper(this.data, null).isSurveyDragging(e) && this.koDragging(this.questions.length)
    }, Survey.QuestionBase.prototype.onCreating = function() {
        var e = this;
        this.dragDropHelperValue = null, this.koIsDragging = ko.observable(!1), this.dragDropHelper = function() {
            return null == e.dragDropHelperValue && (e.dragDropHelperValue = e.data.onCreateDragDropHelper ? e.data.onCreateDragDropHelper() : new t.DragDropHelper(e.data, null)), e.dragDropHelperValue
        }, this.dragOver = function(t) {
            e.dragDropHelper().doDragDropOver(t, e)
        }, this.dragDrop = function(t) {
            e.dragDropHelper().doDrop(t, e)
        }, this.dragStart = function(t) {
            e.dragDropHelper().startDragQuestion(t, e.name)
        }, this.koIsSelected = ko.observable(!1), this.koOnClick = function() {
            null != e.data && e.data.setselectedQuestion(this)
        }
    }, Survey.QuestionBase.prototype.onSelectedQuestionChanged = function() {
        null != this.data && this.koIsSelected(this.data.selectedQuestionValue == this)
    }
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    t.editorLocalization = {
        currentLocale: "",
        locales: {},
        getString: function(e, o) {
            void 0 === o && (o = null), o || (o = this.currentLocale);
            var i = o ? this.locales[this.currentLocale] : t.defaultStrings;
            i || (i = t.defaultStrings);
            for (var r = e.split("."), n = i, s = 0; s < r.length; s++)
                if (n = n[r[s]], !n)
                    return i === t.defaultStrings ? r[s] : this.getString(e, "en");
            return n
        },
        getPropertyName: function(t, e) {
            void 0 === e && (e = null);
            var o = this.getProperty(t, e);
            return o.name ? o.name : o
        },
        getPropertyTitle: function(t, e) {
            void 0 === e && (e = null);
            var o = this.getProperty(t, e);
            return o.title ? o.title : ""
        },
        getProperty: function(t, e) {
            void 0 === e && (e = null);
            var o = this.getString("p." + t, e);
            if (o !== t)
                return o;
            var i = t.indexOf("_");
            return i < -1 ? o : (t = t.substr(i + 1), this.getString("p." + t, e))
        },
        getLocales: function() {
            var t = [];
            t.push("");
            for (var e in this.locales)
                t.push(e);
            return t
        }
    }, t.defaultStrings = {
        survey: {
            dropQuestion: "Please drop a question here.",
            copy: "Copy"
        },
        qt: {
            checkbox: "Checkbox",
            comment: "Comment",
            dropdown: "Dropdown",
            file: "File",
            html: "Html",
            matrix: "Matrix (single choice)",
            matrixdropdown: "Matrix (multiple choice)",
            matrixdynamic: "Matrix (dynamic rows)",
            multipletext: "Multiple Text",
            radiogroup: "Radiogroup",
            rating: "Rating",
            text: "Text"
        },
        ed: {
            newPageName: "page",
            newQuestionName: "question",
            testSurvey: "Test Survey",
            testSurveyAgain: "Test Survey Again",
            testSurveyWidth: "Survey width: ",
            embedSurvey: "Embed Survey",
            saveSurvey: "Save Survey",
            designer: "Designer",
            jsonEditor: "JSON Editor",
            undo: "Undo",
            redo: "Redo",
            options: "Options",
            generateValidJSON: "Generate Valid JSON",
            generateReadableJSON: "Generate Readable JSON",
            toolbox: "Toolbox",
            delSelObject: "Delete selected object",
            correctJSON: "Please correct JSON.",
            surveyResults: "Survey Result: "
        },
        pe: {
            apply: "Apply",
            reset: "Reset",
            close: "Close",
            delete: "Delete",
            addNew: "Add New",
            removeAll: "Remove All",
            edit: "Edit",
            empty: "<empty>",
            testService: "Test the service",
            value: "Value",
            text: "Text",
            required: "Required?",
            hasOther: "Has Other Item",
            name: "Name",
            title: "Title",
            cellType: "Cell Type",
            colCount: "Column Count",
            editProperty: "Edit property '{0}'",
            items: "[ Items: {0} ]",
            enterNewValue: "Please, enter the value.",
            noquestions: "There is no any question in the survey.",
            createtrigger: "Please create a trigger",
            triggerOn: "On ",
            triggerMakePagesVisible: "Make pages visible:",
            triggerMakeQuestionsVisible: "Make questions visible:",
            triggerCompleteText: "Complete the survey if succeed.",
            triggerNotSet: "The trigger is not set",
            triggerRunIf: "Run if",
            triggerSetToName: "Change value of: ",
            triggerSetValue: "to: ",
            triggerIsVariable: "Do not put the variable into the survey result.",
            verbChangeType: "Change type ",
            verbChangePage: "Change page "
        },
        op: {
            empty: "is empty",
            notempty: "is not empty",
            equal: "equals",
            notequal: "not equals",
            contains: "contains",
            notcontains: "not contains",
            greater: "greater",
            less: "less",
            greaterorequal: "greater or equals",
            lessorequal: "Less or Equals"
        },
        ew: {
            knockout: "Use Knockout version",
            react: "Use React version",
            bootstrap: "For bootstrap framework",
            standard: "No bootstrap",
            showOnPage: "Show survey on a page",
            showInWindow: "Show survey in a window",
            loadFromServer: "Load Survey JSON from server",
            titleScript: "Scripts and styles",
            titleHtml: "HTML",
            titleJavaScript: "JavaScript"
        },
        p: {
            name: "name",
            title: {
                name: "title",
                title: "Leave it empty, if it is the same as 'Name'"
            },
            survey_title: {
                name: "title",
                title: "It will be shown on every page."
            },
            page_title: {
                name: "title",
                title: "Page title"
            }
        }
    }, t.editorLocalization.locales.en = t.defaultStrings
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function t(t) {
            void 0 === t && (t = 0), this.parseType = t
        }
        return t.prototype.parse = function(t, e, o, i) {
            void 0 === e && (e = null), void 0 === o && (o = 0), void 0 === i && (i = -1);
            var r;
            return this.text = String(t), this.at = o, this.endAt = i, this.ch = " ", r = this.value(), this.white(), this.ch && this.error("Syntax error"), "function" == typeof e ? function t(o, i) {
                var r,
                    n,
                    s = o[i];
                if (s && "object" == typeof s)
                    for (r in s)
                        Object.prototype.hasOwnProperty.call(s, r) && (n = t(s, r), void 0 !== n ? s[r] = n : delete s[r]);
                return e.call(o, i, s)
            }({
                "": r
            }, "") : r
        }, t.prototype.error = function(t) {
            var e = new SyntaxError;
            throw e.message = t, e.at = this.at, e
        }, t.prototype.next = function(t) {
            return void 0 === t && (t = null), t && t !== this.ch && this.error("Expected '" + t + "' instead of '" + this.ch + "'"), this.ch = this.chartAt(), this.at += 1, this.ch
        }, t.prototype.peek = function() {
            return this.chartAt()
        }, t.prototype.chartAt = function() {
            return this.endAt > -1 && this.at >= this.endAt ? "" : this.text.charAt(this.at)
        }, t.prototype.identifier = function() {
            var t = this.ch;
            for ("_" !== this.ch && "$" !== this.ch && (this.ch < "a" || this.ch > "z") && (this.ch < "A" || this.ch > "Z") && this.error("Bad identifier"); this.next() && ("_" === this.ch || "$" === this.ch || this.ch >= "a" && this.ch <= "z" || this.ch >= "A" && this.ch <= "Z" || this.ch >= "0" && this.ch <= "9");)
                t += this.ch;
            return t
        }, t.prototype.number = function() {
            var t,
                e = "",
                o = "",
                i = 10;
            if ("-" !== this.ch && "+" !== this.ch || (e = this.ch, this.next(this.ch)), "I" === this.ch)
                return t = this.word(), ("number" != typeof t || isNaN(t)) && this.error("Unexpected word for number"), "-" === e ? -t : t;
            if ("N" === this.ch)
                return t = this.word(), isNaN(t) || this.error("expected word to be NaN"), t;
            switch ("0" === this.ch && (o += this.ch, this.next(), "x" === this.ch || "X" === this.ch ? (o += this.ch, this.next(), i = 16) : this.ch >= "0" && this.ch <= "9" && this.error("Octal literal")), i) {
            case 10:
                for (; this.ch >= "0" && this.ch <= "9";)
                    o += this.ch, this.next();
                if ("." === this.ch)
                    for (o += "."; this.next() && this.ch >= "0" && this.ch <= "9";)
                        o += this.ch;
                if ("e" === this.ch || "E" === this.ch)
                    for (o += this.ch, this.next(), "-" !== this.ch && "+" !== this.ch || (o += this.ch, this.next()); this.ch >= "0" && this.ch <= "9";)
                        o += this.ch, this.next();
                break;
            case 16:
                for (; this.ch >= "0" && this.ch <= "9" || this.ch >= "A" && this.ch <= "F" || this.ch >= "a" && this.ch <= "f";)
                    o += this.ch, this.next()
            }
            return t = "-" === e ? -o : +o, isFinite(t) ? t : void this.error("Bad number")
        }, t.prototype.string = function() {
            var e,
                o,
                i,
                r,
                n = "";
            if ('"' === this.ch || "'" === this.ch)
                for (i = this.ch; this.next();) {
                    if (this.ch === i)
                        return this.next(), n;
                    if ("\\" === this.ch)
                        if (this.next(), "u" === this.ch) {
                            for (r = 0, o = 0; o < 4 && (e = parseInt(this.next(), 16), isFinite(e)); o += 1)
                                r = 16 * r + e;
                            n += String.fromCharCode(r)
                        } else if ("\r" === this.ch)
                            "\n" === this.peek() && this.next();
                        else {
                            if ("string" != typeof t.escapee[this.ch])
                                break;
                            n += t.escapee[this.ch]
                        }
                    else {
                        if ("\n" === this.ch)
                            break;
                        n += this.ch
                    }
                }
            this.error("Bad string")
        }, t.prototype.inlineComment = function() {
            "/" !== this.ch && this.error("Not an inline comment");
            do if (this.next(), "\n" === this.ch || "\r" === this.ch)
                return void this.next();
            while (this.ch)
        }, t.prototype.blockComment = function() {
            "*" !== this.ch && this.error("Not a block comment");
            do for (this.next(); "*" === this.ch;)
                if (this.next("*"), "/" === this.ch)
                    return void this.next("/");
            while (this.ch);
            this.error("Unterminated block comment")
        }, t.prototype.comment = function() {
            "/" !== this.ch && this.error("Not a comment"), this.next("/"), "/" === this.ch ? this.inlineComment() : "*" === this.ch ? this.blockComment() : this.error("Unrecognized comment")
        }, t.prototype.white = function() {
            for (; this.ch;)
                if ("/" === this.ch)
                    this.comment();
                else {
                    if (!(t.ws.indexOf(this.ch) >= 0))
                        return;
                    this.next()
                }
        }, t.prototype.word = function() {
            switch (this.ch) {
            case "t":
                return this.next("t"), this.next("r"), this.next("u"), this.next("e"), !0;
            case "f":
                return this.next("f"), this.next("a"), this.next("l"), this.next("s"), this.next("e"), !1;
            case "n":
                return this.next("n"), this.next("u"), this.next("l"), this.next("l"), null;
            case "I":
                return this.next("I"), this.next("n"), this.next("f"), this.next("i"), this.next("n"), this.next("i"), this.next("t"), this.next("y"), 1 / 0;
            case "N":
                return this.next("N"), this.next("a"), this.next("N"), NaN
            }
            this.error("Unexpected '" + this.ch + "'")
        }, t.prototype.array = function() {
            var t = [];
            if ("[" === this.ch)
                for (this.next("["), this.white(); this.ch;) {
                    if ("]" === this.ch)
                        return this.next("]"), t;
                    if ("," === this.ch ? this.error("Missing array element") : t.push(this.value()), this.white(), "," !== this.ch)
                        return this.next("]"), t;
                    this.next(","), this.white()
                }
            this.error("Bad array")
        }, t.prototype.object = function() {
            var e,
                o,
                i = !0,
                r = {};
            if (this.parseType > 0 && (r[t.positionName] = {
                start: this.at - 1
            }), "{" === this.ch)
                for (this.next("{"), this.white(), o = this.at - 1; this.ch;) {
                    if ("}" === this.ch)
                        return this.parseType > 0 && (r[t.positionName].end = o), this.next("}"), r;
                    if (e = '"' === this.ch || "'" === this.ch ? this.string() : this.identifier(), this.white(), this.parseType > 1 && (r[t.positionName][e] = {
                        start: o,
                        valueStart: this.at
                    }), this.next(":"), r[e] = this.value(), this.parseType > 1 && (o = this.at - 1, r[t.positionName][e].valueEnd = o, r[t.positionName][e].end = o), this.white(), "," !== this.ch)
                        return this.parseType > 1 && (r[t.positionName][e].valueEnd--, r[t.positionName][e].end--), this.parseType > 0 && (r[t.positionName].end = this.at - 1), this.next("}"), r;
                    this.parseType > 1 && (r[t.positionName][e].valueEnd--, i || r[t.positionName][e].end--), this.next(","), this.white(), i = !1
                }
            this.error("Bad object")
        }, t.prototype.value = function() {
            switch (this.white(), this.ch) {
            case "{":
                return this.object();
            case "[":
                return this.array();
            case '"':
            case "'":
                return this.string();
            case "-":
            case "+":
            case ".":
                return this.number();
            default:
                return this.ch >= "0" && this.ch <= "9" ? this.number() : this.word()
            }
        }, t.prototype.stringify = function(t, e, o) {
            if (void 0 === e && (e = null), void 0 === o && (o = null), e && "function" != typeof e && !this.isArray(e))
                throw new Error("Replacer must be a function or an array");
            this.replacer = e, this.indentStr = this.getIndent(o), this.objStack = [];
            var i = {
                "": t
            };
            return void 0 === t ? this.getReplacedValueOrUndefined(i, "", !0) : this.internalStringify(i, "", !0)
        }, t.prototype.getIndent = function(t) {
            if (t) {
                if ("string" == typeof t)
                    return t;
                if ("number" == typeof t && t >= 0)
                    return this.makeIndent(" ", t, !0)
            }
            return ""
        }, t.prototype.getReplacedValueOrUndefined = function(t, e, o) {
            var i = t[e];
            return i && i.toJSON && "function" == typeof i.toJSON && (i = i.toJSON()), "function" == typeof this.replacer ? this.replacer.call(t, e, i) : this.replacer ? o || this.isArray(t) || this.replacer.indexOf(e) >= 0 ? i : void 0 : i
        }, t.prototype.isWordChar = function(t) {
            return t >= "a" && t <= "z" || t >= "A" && t <= "Z" || t >= "0" && t <= "9" || "_" === t || "$" === t
        }, t.prototype.isWordStart = function(t) {
            return t >= "a" && t <= "z" || t >= "A" && t <= "Z" || "_" === t || "$" === t
        }, t.prototype.isWord = function(t) {
            if ("string" != typeof t)
                return !1;
            if (!this.isWordStart(t[0]))
                return !1;
            for (var e = 1, o = t.length; e < o;) {
                if (!this.isWordChar(t[e]))
                    return !1;
                e++
            }
            return !0
        }, t.prototype.isArray = function(t) {
            return Array.isArray ? Array.isArray(t) : "[object Array]" === Object.prototype.toString.call(t)
        }, t.prototype.isDate = function(t) {
            return "[object Date]" === Object.prototype.toString.call(t)
        }, t.prototype.isNaN = function(t) {
            return "number" == typeof t && t !== t
        }, t.prototype.checkForCircular = function(t) {
            for (var e = 0; e < this.objStack.length; e++)
                if (this.objStack[e] === t)
                    throw new TypeError("Converting circular structure to JSON")
        }, t.prototype.makeIndent = function(t, e, o) {
            if (void 0 === o && (o = !1), !t)
                return "";
            t.length > 10 && (t = t.substring(0, 10));
            for (var i = o ? "" : "\n", r = 0; r < e; r++)
                i += t;
            return i
        }, t.prototype.escapeString = function(e) {
            return t.escapable.lastIndex = 0, t.escapable.test(e) ? '"' + e.replace(t.escapable, function(e) {
                var o = t.meta[e];
                return "string" == typeof o ? o : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4)
            }) + '"' : '"' + e + '"'
        }, t.prototype.internalStringify = function(t, e, o) {
            var i,
                r,
                n = this.getReplacedValueOrUndefined(t, e, o);
            switch (n && !this.isDate(n) && (n = n.valueOf()), typeof n) {
            case "boolean":
                return n.toString();
            case "number":
                return isNaN(n) || !isFinite(n) ? "null" : n.toString();
            case "string":
                return this.escapeString(n.toString());
            case "object":
                if (null === n)
                    return "null";
                if (this.isArray(n)) {
                    this.checkForCircular(n), i = "[", this.objStack.push(n);
                    for (var s = 0; s < n.length; s++)
                        r = this.internalStringify(n, s, !1), i += this.makeIndent(this.indentStr, this.objStack.length), i += null === r || "undefined" == typeof r ? "null" : r, s < n.length - 1 ? i += "," : this.indentStr && (i += "\n");
                    this.objStack.pop(), i += this.makeIndent(this.indentStr, this.objStack.length, !0) + "]"
                } else {
                    this.checkForCircular(n), i = "{";
                    var a = !1;
                    this.objStack.push(n);
                    for (var u in n)
                        if (n.hasOwnProperty(u)) {
                            var l = this.internalStringify(n, u, !1);
                            if (o = !1, "undefined" != typeof l && null !== l) {
                                i += this.makeIndent(this.indentStr, this.objStack.length), a = !0;
                                var d = this.isWord(u) ? u : this.escapeString(u);
                                i += d + ":" + (this.indentStr ? " " : "") + l + ","
                            }
                        }
                    this.objStack.pop(), i = a ? i.substring(0, i.length - 1) + this.makeIndent(this.indentStr, this.objStack.length) + "}" : "{}"
                }
                return i;
            default:
                return
            }
        }, t.positionName = "pos", t.escapee = {
            "'": "'",
            '"': '"',
            "\\": "\\",
            "/": "/",
            "\n": "",
            b: "\b",
            f: "\f",
            n: "\n",
            r: "\r",
            t: "\t"
        }, t.ws = [" ", "\t", "\r", "\n", "\v", "\f", " ", "\ufeff"], t.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, t.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, t.meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        }, t
    }();
    t.SurveyJSON5 = e
}(SurveyEditor || (SurveyEditor = {}));
var SurveyEditor;
!function(t) {
    var e = function() {
        function t() {}
        return t
    }();
    t.SurveyObjectItem = e;
    var o = function() {
        function o(t, e) {
            this.koObjects = t, this.koSelected = e
        }
        return Object.defineProperty(o.prototype, "survey", {
            get: function() {
                return this.surveyValue
            },
            set: function(t) {
                this.survey != t && (this.surveyValue = t, this.rebuild())
            },
            enumerable: !0,
            configurable: !0
        }), o.prototype.addPage = function(t) {
            var e = this.createPage(t),
                o = this.survey.pages.indexOf(t);
            if (o > 0) {
                var i = this.survey.pages[o - 1];
                o = this.getItemIndex(i) + 1, o += i.questions.length
            } else
                o = 1;
            this.addItem(e, o), o++;
            for (var r = 0; r < t.questions.length; r++) {
                var n = this.createQuestion(t.questions[r]);
                this.addItem(n, o + r)
            }
            this.koSelected(e)
        }, o.prototype.addQuestion = function(t, e) {
            var o = this.getItemIndex(t);
            if (!(o < 0)) {
                var i = t.questions.indexOf(e) + 1;
                o += i;
                var r = this.createQuestion(e);
                this.addItem(r, o), this.koSelected(r)
            }
        }, o.prototype.selectObject = function(t) {
            for (var e = this.koObjects(), o = 0; o < e.length; o++)
                if (e[o].value == t)
                    return void this.koSelected(e[o])
        }, o.prototype.removeObject = function(e) {
            var o = this.getItemIndex(e);
            if (!(o < 0)) {
                var i = 1;
                if (t.SurveyHelper.getObjectType(e) == t.ObjType.Page) {
                    var r = e;
                    i += r.questions.length
                }
                this.koObjects.splice(o, i)
            }
        }, o.prototype.nameChanged = function(t) {
            var e = this.getItemIndex(t);
            e < 0 || this.koObjects()[e].text(this.getText(t))
        }, o.prototype.selectNextQuestion = function(e) {
            var o = this.getSelectedQuestion(),
                i = this.getItemIndex(o);
            if (i < 0)
                return o;
            var r = this.koObjects(),
                n = i + (e ? -1 : 1);
            if (n < r.length && t.SurveyHelper.getObjectType(r[n].value) == t.ObjType.Question)
                i = n;
            else
                for (n = i; n < r.length && t.SurveyHelper.getObjectType(r[n].value) == t.ObjType.Question;)
                    i = n, n += e ? 1 : -1;
            this.koSelected(r[i])
        }, o.prototype.getSelectedQuestion = function() {
            if (!this.koSelected())
                return null;
            var e = this.koSelected().value;
            return e && t.SurveyHelper.getObjectType(e) == t.ObjType.Question ? e : null
        }, o.prototype.addItem = function(t, e) {
            e > this.koObjects().length ? this.koObjects.push(t) : this.koObjects.splice(e, 0, t)
        }, o.prototype.rebuild = function() {
            var t = [];
            if (null == this.survey)
                return this.koObjects(t), void this.koSelected(null);
            t.push(this.createItem(this.survey, "Survey"));
            for (var e = 0; e < this.survey.pages.length; e++) {
                var o = this.survey.pages[e];
                t.push(this.createPage(o));
                for (var i = 0; i < o.questions.length; i++)
                    t.push(this.createQuestion(o.questions[i]))
            }
            this.koObjects(t), this.koSelected(this.survey)
        }, o.prototype.createPage = function(t) {
            return this.createItem(t, this.getText(t))
        }, o.prototype.createQuestion = function(t) {
            return this.createItem(t, this.getText(t))
        }, o.prototype.createItem = function(t, o) {
            var i = new e;
            return i.value = t, i.text = ko.observable(o), i
        }, o.prototype.getItemIndex = function(t) {
            for (var e = this.koObjects(), o = 0; o < e.length; o++)
                if (e[o].value == t)
                    return o;
            return -1
        }, o.prototype.getText = function(e) {
            var i = o.intend;
            return t.SurveyHelper.getObjectType(e) != t.ObjType.Page && (i += o.intend), i + t.SurveyHelper.getObjectName(e)
        }, o.intend = "...", o
    }();
    t.SurveyObjects = o
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(t) {
        function e() {
            t.call(this), this.title = ko.observable();
            var e = this;
            e.onApplyClick = function() {
                e.apply()
            }, e.onResetClick = function() {
                e.reset()
            }
        }
        return __extends(e, t), e.prototype.setTitle = function(t) {
            this.title(t)
        }, e.prototype.hasError = function() {
            return !1
        }, e.prototype.onBeforeApply = function() {}, e.prototype.reset = function() {
            this.value = this.value
        }, e.prototype.setObject = function(t) {
            this.object = t
        }, Object.defineProperty(e.prototype, "isEditable", {
            get: function() {
                return !1
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.apply = function() {
            this.hasError() || (this.onBeforeApply(), this.onChanged && this.onChanged(this.value))
        }, e
    }(t.SurveyPropertyEditorBase);
    t.SurveyPropertyModalEditor = e;
    var o = function(t) {
        function e() {
            t.call(this), this.koValue = ko.observable()
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "text"
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "isEditable", {
            get: function() {
                return !0
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.getValueText = function(t) {
            if (!t)
                return null;
            var e = t;
            return e.length > 20 && (e = e.substr(0, 20) + "..."), e
        }, e.prototype.onValueChanged = function() {
            this.koValue(this.value)
        }, e.prototype.onBeforeApply = function() {
            this.setValueCore(this.koValue())
        }, e
    }(e);
    t.SurveyPropertyTextEditor = o;
    var i = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "html"
            },
            enumerable: !0,
            configurable: !0
        }), e
    }(o);
    t.SurveyPropertyHtmlEditor = i, t.SurveyPropertyEditorBase.registerEditor("text", function() {
        return new o
    }), t.SurveyPropertyEditorBase.registerEditor("html", function() {
        return new i
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(e) {
        function o() {
            e.call(this), this.koItems = ko.observableArray(), this.value = [];
            var t = this;
            t.onDeleteClick = function(e) {
                t.koItems.remove(e)
            }, t.onClearClick = function(e) {
                t.koItems.removeAll()
            }, t.onAddClick = function() {
                t.AddItem()
            }
        }
        return __extends(o, e), o.prototype.getValueText = function(e) {
            var o = e ? e.length : 0;
            return t.editorLocalization.getString("pe.items").format(o)
        }, o.prototype.getCorrectedValue = function(t) {
            return null != t && Array.isArray(t) || (t = []), t
        }, o.prototype.AddItem = function() {
            this.koItems.push(this.createNewEditorItem())
        }, o.prototype.onValueChanged = function() {
            this.koItems(this.getItemsFromValue())
        }, o.prototype.getItemsFromValue = function() {
            for (var t = [], e = this.value, o = 0; o < e.length; o++)
                t.push(this.createEditorItem(e[o]));
            return t
        }, o.prototype.onBeforeApply = function() {
            for (var t = [], e = this.koItems(), o = 0; o < e.length; o++)
                t.push(this.createItemFromEditorItem(e[o]));
            this.setValueCore(t)
        }, o.prototype.createNewEditorItem = function() {
            throw "Override 'createNewEditorItem' method"
        }, o.prototype.createEditorItem = function(t) {
            return t
        }, o.prototype.createItemFromEditorItem = function(t) {
            return t
        }, o
    }(t.SurveyPropertyModalEditor);
    t.SurveyPropertyItemsEditor = e
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "itemvalues"
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.hasError = function() {
            for (var t = !1, e = 0; e < this.koItems().length; e++) {
                var o = this.koItems()[e];
                o.koHasError(!o.koValue()), t = t || o.koHasError()
            }
            return t
        }, e.prototype.createNewEditorItem = function() {
            return {
                koValue: ko.observable(),
                koText: ko.observable(),
                koHasError: ko.observable(!1)
            }
        }, e.prototype.createEditorItem = function(t) {
            var e = t,
                o = null;
            return t.value && (e = t.value, o = t.text), {
                koValue: ko.observable(e),
                koText: ko.observable(o),
                koHasError: ko.observable(!1)
            }
        }, e.prototype.createItemFromEditorItem = function(t) {
            var e = t.koText() && t.koText() != t.koValue() ? t.koText() : null;
            return {
                value: t.koValue(),
                text: e
            }
        }, e
    }(t.SurveyPropertyItemsEditor);
    t.SurveyPropertyItemValuesEditor = e, t.SurveyPropertyEditorBase.registerEditor("itemvalues", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(t) {
        function e() {
            t.call(this)
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "matrixdropdowncolumns"
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.hasError = function() {
            for (var t = !1, e = 0; e < this.koItems().length; e++)
                t = t || this.koItems()[e].hasError();
            return t
        }, e.prototype.createNewEditorItem = function() {
            return new o(new Survey.MatrixDropdownColumn(""))
        }, e.prototype.createEditorItem = function(t) {
            return new o(t)
        }, e.prototype.createItemFromEditorItem = function(t) {
            var e = t;
            return e.apply(), e.column
        }, e
    }(t.SurveyPropertyItemsEditor);
    t.SurveyPropertyDropdownColumnsEditor = e;
    var o = function() {
        function e(e) {
            this.column = e, this.cellTypeChoices = this.getPropertyChoices("cellType"), this.colCountChoices = this.getPropertyChoices("colCount"), this.koName = ko.observable(e.name), this.koCellType = ko.observable(e.cellType), this.koColCount = ko.observable(e.colCount), this.koIsRequired = ko.observable(!!e.isRequired), this.koHasOther = ko.observable(!!e.hasOther), this.koTitle = ko.observable(e.name === e.title ? "" : e.title), this.koShowChoices = ko.observable(!1), this.koChoices = ko.observableArray(e.choices), this.koHasError = ko.observable(!1), this.choicesEditor = new t.SurveyPropertyItemValuesEditor, this.choicesEditor.object = this.column, this.choicesEditor.value = this.koChoices();
            var o = this;
            this.onShowChoicesClick = function() {
                o.koShowChoices(!o.koShowChoices())
            }, this.koHasChoices = ko.computed(function() {
                return "dropdown" == o.koCellType() || "checkbox" == o.koCellType() || "radiogroup" == o.koCellType()
            }), this.koHasColCount = ko.computed(function() {
                return "checkbox" == o.koCellType() || "radiogroup" == o.koCellType()
            })
        }
        return e.prototype.hasError = function() {
            return this.koHasError(!this.koName()), this.koHasError() || this.choicesEditor.hasError()
        }, e.prototype.apply = function() {
            this.column.name = this.koName(), this.column.title = this.koTitle(), this.column.cellType = this.koCellType(), this.column.colCount = this.koColCount(), this.column.isRequired = this.koIsRequired(), this.column.hasOther = this.koHasOther(), this.choicesEditor.onApplyClick(), this.column.choices = this.choicesEditor.value
        }, e.prototype.getPropertyChoices = function(t) {
            for (var e = Survey.JsonObject.metaData.getProperties("matrixdropdowncolumn"), o = 0; o < e.length; o++)
                if (e[o].name == t)
                    return e[o].choices;
            return []
        }, e
    }();
    t.SurveyPropertyMatrixDropdownColumnsItem = o, t.SurveyPropertyEditorBase.registerEditor("matrixdropdowncolumns", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(e) {
        function o() {
            e.call(this), this.koUrl = ko.observable(), this.koPath = ko.observable(), this.koValueName = ko.observable(), this.koTitleName = ko.observable(), this.createSurvey();
            var t = this;
            this.koUrl.subscribe(function(e) {
                t.question.choicesByUrl.url = e, t.run()
            }), this.koPath.subscribe(function(e) {
                t.question.choicesByUrl.path = e, t.run()
            }), this.koValueName.subscribe(function(e) {
                t.question.choicesByUrl.valueName = e, t.run()
            }), this.koTitleName.subscribe(function(e) {
                t.question.choicesByUrl.titleName = e, t.run()
            })
        }
        return __extends(o, e), Object.defineProperty(o.prototype, "editorType", {
            get: function() {
                return "restfull"
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(o.prototype, "restfullValue", {
            get: function() {
                return this.value
            },
            enumerable: !0,
            configurable: !0
        }), o.prototype.getValueText = function(e) {
            if (!e || !e.url)
                return t.editorLocalization.getString("pe.empty");
            var o = e.url;
            return o.length > 20 && (o = o.substr(0, 20) + "..."), o
        }, o.prototype.onValueChanged = function() {
            var t = this.restfullValue;
            this.koUrl(t ? t.url : ""), this.koPath(t ? t.path : ""), this.koValueName(t ? t.valueName : ""), this.koTitleName(t ? t.titleName : ""), this.survey.render("restfullSurvey")
        }, o.prototype.onBeforeApply = function() {
            var t = new Survey.ChoicesRestfull;
            t.url = this.koUrl(), t.path = this.koPath(), t.valueName = this.koValueName(), t.titleName = this.koTitleName(), this.setValueCore(t)
        }, o.prototype.run = function() {
            this.question.choicesByUrl.run()
        }, o.prototype.createSurvey = function() {
            this.survey = new Survey.Survey, this.survey.showNavigationButtons = !1, this.survey.showQuestionNumbers = "off";
            var e = this.survey.addNewPage("page1");
            this.question = e.addNewQuestion("dropdown", "q1"), this.question.title = t.editorLocalization.getString("pe.testService"), this.question.choices = [], this.survey.render("restfullSurvey")
        }, o
    }(t.SurveyPropertyModalEditor);
    t.SurveyPropertyResultfullEditor = e, t.SurveyPropertyEditorBase.registerEditor("restfull", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(e) {
        function o() {
            e.call(this)
        }
        return __extends(o, e), Object.defineProperty(o.prototype, "editorType", {
            get: function() {
                return "textitems"
            },
            enumerable: !0,
            configurable: !0
        }), o.prototype.createNewEditorItem = function() {
            for (var e = [], o = this.koItems(), i = 0; i < o.length; i++)
                e.push({
                    name: o[i].koName()
                });
            var r = {
                koName: ko.observable(t.SurveyHelper.getNewName(e, "text")),
                koTitle: ko.observable()
            };
            return this.createValidatorsEditor(r, []), r
        }, o.prototype.createEditorItem = function(t) {
            var e = {
                koName: ko.observable(t.name),
                koTitle: ko.observable(t.title)
            };
            return this.createValidatorsEditor(e, t.validators), e
        }, o.prototype.createItemFromEditorItem = function(t) {
            var e = new Survey.MultipleTextItem(t.koName(), t.koTitle());
            return e.validators = t.validators, e
        }, o.prototype.createValidatorsEditor = function(e, o) {
            e.validators = o.slice();
            var i = this,
                r = function(t) {
                    e.validators = t, e.koText(i.getText(t.length))
                },
                n = new t.SurveyPropertyValidatorsEditor;
            e.editor = n, n.onChanged = function(t) {
                r(t)
            }, n.object = e, n.title(t.editorLocalization.getString("pe.editProperty").format("Validators")), n.value = e.validators, e.koText = ko.observable(this.getText(o.length))
        }, o.prototype.getText = function(e) {
            return t.editorLocalization.getString("pe.items").format(e)
        }, o
    }(t.SurveyPropertyItemsEditor);
    t.SurveyPropertyTextItemsEditor = e, t.SurveyPropertyEditorBase.registerEditor("textitems", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(t) {
        function e() {
            t.call(this), this.availableTriggers = [], this.triggerClasses = [];
            var e = this;
            this.onDeleteClick = function() {
                e.koItems.remove(e.koSelected())
            }, this.onAddClick = function(t) {
                e.addItem(t)
            }, this.koSelected = ko.observable(null), this.koPages = ko.observableArray(), this.koQuestions = ko.observableArray(), this.triggerClasses = Survey.JsonObject.metaData.getChildrenClasses("surveytrigger", !0), this.availableTriggers = this.getAvailableTriggers()
        }
        return __extends(e, t), Object.defineProperty(e.prototype, "editorType", {
            get: function() {
                return "triggers"
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.onValueChanged = function() {
            t.prototype.onValueChanged.call(this), this.object && (this.koPages(this.getNames(this.object.pages)), this.koQuestions(this.getNames(this.object.getAllQuestions()))), this.koSelected && this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null)
        }, e.prototype.addItem = function(t) {
            var e = Survey.JsonObject.metaData.createClass(t),
                o = this.createPropertyTrigger(e);
            this.koItems.push(o), this.koSelected(o)
        }, e.prototype.createEditorItem = function(t) {
            var e = new Survey.JsonObject,
                o = Survey.JsonObject.metaData.createClass(t.getType());
            return e.toObject(t, o), this.createPropertyTrigger(o)
        }, e.prototype.createItemFromEditorItem = function(t) {
            var e = t;
            return e.createTrigger()
        }, e.prototype.getAvailableTriggers = function() {
            for (var t = [], e = 0; e < this.triggerClasses.length; e++)
                t.push(this.triggerClasses[e].name);
            return t
        }, e.prototype.getNames = function(t) {
            for (var e = [], o = 0; o < t.length; o++) {
                var i = t[o];
                i.name && e.push(i.name)
            }
            return e
        }, e.prototype.createPropertyTrigger = function(t) {
            var e = null;
            return "visibletrigger" == t.getType() && (e = new i(t, this.koPages, this.koQuestions)), "setvaluetrigger" == t.getType() && (e = new r(t, this.koQuestions)), e || (e = new o(t)), e
        }, e
    }(t.SurveyPropertyItemsEditor);
    t.SurveyPropertyTriggersEditor = e;
    var o = function() {
        function e(t) {
            this.trigger = t, this.operators = ["empty", "notempty", "equal", "notequal", "contains", "notcontains", "greater", "less", "greaterorequal", "lessorequal"], this.availableOperators = [], this.createOperators(), this.triggerType = t.getType(), this.koType = ko.observable(this.triggerType), this.koName = ko.observable(t.name), this.koOperator = ko.observable(t.operator), this.koValue = ko.observable(t.value);
            var e = this;
            this.koRequireValue = ko.computed(function() {
                return "empty" != e.koOperator() && "notempty" != e.koOperator()
            }), this.koIsValid = ko.computed(function() {
                return !(!e.koName() || e.koRequireValue() && !e.koValue())
            }), this.koText = ko.computed(function() {
                return e.koName(), e.koOperator(), e.koValue(), e.getText()
            })
        }
        return e.prototype.createTrigger = function() {
            var t = Survey.JsonObject.metaData.createClass(this.triggerType);
            return t.name = this.koName(), t.operator = this.koOperator(), t.value = this.koValue(), t
        }, e.prototype.createOperators = function() {
            for (var e = 0; e < this.operators.length; e++) {
                var o = this.operators[e];
                this.availableOperators.push({
                    name: o,
                    text: t.editorLocalization.getString("op." + o)
                })
            }
        }, e.prototype.getText = function() {
            return this.koIsValid() ? t.editorLocalization.getString("pe.triggerRunIf") + " '" + this.koName() + "' " + this.getOperatorText() + this.getValueText() : t.editorLocalization.getString("pe.triggerNotSet")
        }, e.prototype.getOperatorText = function() {
            for (var t = this.koOperator(), e = 0; e < this.availableOperators.length; e++)
                if (this.availableOperators[e].name == t)
                    return this.availableOperators[e].text;
            return t
        }, e.prototype.getValueText = function() {
            return this.koRequireValue() ? " " + this.koValue() : ""
        }, e
    }();
    t.SurveyPropertyTrigger = o;
    var i = function(e) {
        function o(o, i, r) {
            e.call(this, o), this.trigger = o, this.pages = new n(t.editorLocalization.getString("pe.triggerMakePagesVisible"), i(), o.pages), this.questions = new n(t.editorLocalization.getString("pe.triggerMakeQuestionsVisible"), r(), o.questions)
        }
        return __extends(o, e), o.prototype.createTrigger = function() {
            var t = e.prototype.createTrigger.call(this);
            return t.pages = this.pages.koChoosen(), t.questions = this.questions.koChoosen(), t
        }, o
    }(o);
    t.SurveyPropertyVisibleTrigger = i;
    var r = function(t) {
        function e(e, o) {
            t.call(this, e), this.trigger = e, this.koQuestions = o, this.kosetToName = ko.observable(e.setToName), this.kosetValue = ko.observable(e.setValue), this.koisVariable = ko.observable(e.isVariable)
        }
        return __extends(e, t), e.prototype.createTrigger = function() {
            var e = t.prototype.createTrigger.call(this);
            return e.setToName = this.kosetToName(), e.setValue = this.kosetValue(), e.isVariable = this.koisVariable(), e
        }, e
    }(o);
    t.SurveyPropertySetValueTrigger = r;
    var n = function() {
        function t(t, e, o) {
            this.title = t, this.koChoosen = ko.observableArray(o);
            for (var i = [], r = 0; r < e.length; r++) {
                var n = e[r];
                o.indexOf(n) < 0 && i.push(n)
            }
            this.koObjects = ko.observableArray(i), this.koSelected = ko.observable(), this.koChoosenSelected = ko.observable();
            var s = this;
            this.onDeleteClick = function() {
                s.deleteItem()
            }, this.onAddClick = function() {
                s.addItem()
            }
        }
        return t.prototype.deleteItem = function() {
            this.changeItems(this.koChoosenSelected(), this.koChoosen, this.koObjects)
        }, t.prototype.addItem = function() {
            this.changeItems(this.koSelected(), this.koObjects, this.koChoosen)
        }, t.prototype.changeItems = function(t, e, o) {
            e.remove(t), o.push(t), e.sort(), o.sort()
        }, t
    }();
    t.SurveyPropertyTriggerObjects = n, t.SurveyPropertyEditorBase.registerEditor("triggers", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
var __extends = this && this.__extends || function(t, e) {
        function o() {
            this.constructor = t
        }
        for (var i in e)
            e.hasOwnProperty(i) && (t[i] = e[i]);
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o)
    },
    SurveyEditor;
!function(t) {
    var e = function(e) {
        function i() {
            e.call(this), this.availableValidators = [], this.validatorClasses = [];
            var o = this;
            this.selectedObjectEditor = new t.SurveyObjectEditor, this.selectedObjectEditor.onPropertyValueChanged.add(function(t, e) {
                o.onPropertyValueChanged(e.property, e.object, e.newValue)
            }), this.koSelected = ko.observable(null), this.koSelected.subscribe(function(t) {
                o.selectedObjectEditor.selectedObject = null != t ? t.validator : null
            }), this.validatorClasses = Survey.JsonObject.metaData.getChildrenClasses("surveyvalidator", !0), this.availableValidators = this.getAvailableValidators(), this.onDeleteClick = function() {
                o.koItems.remove(o.koSelected())
            }, this.onAddClick = function(t) {
                o.addItem(t)
            }
        }
        return __extends(i, e), Object.defineProperty(i.prototype, "editorType", {
            get: function() {
                return "validators"
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.onValueChanged = function() {
            e.prototype.onValueChanged.call(this), this.koSelected && this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null)
        }, i.prototype.createEditorItem = function(t) {
            var e = new Survey.JsonObject,
                i = Survey.JsonObject.metaData.createClass(t.getType());
            return e.toObject(t, i), new o(i)
        }, i.prototype.createItemFromEditorItem = function(t) {
            var e = t;
            return e.validator
        }, i.prototype.addItem = function(t) {
            var e = new o(Survey.JsonObject.metaData.createClass(t));
            this.koItems.push(e), this.koSelected(e)
        }, i.prototype.getAvailableValidators = function() {
            for (var t = [], e = 0; e < this.validatorClasses.length; e++)
                t.push(this.validatorClasses[e].name);
            return t
        }, i.prototype.onPropertyValueChanged = function(t, e, o) {
            null != this.koSelected() && (this.koSelected().validator[t.name] = o)
        }, i
    }(t.SurveyPropertyItemsEditor);
    t.SurveyPropertyValidatorsEditor = e;
    var o = function() {
        function t(t) {
            this.validator = t, this.text = t.getType()
        }
        return t
    }();
    t.SurveyPropertyValidatorItem = o, t.SurveyPropertyEditorBase.registerEditor("validators", function() {
        return new e
    })
}(SurveyEditor || (SurveyEditor = {}));
