/// <reference path="../src/base.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Base");
        QUnit.test("Event hasEvents property", function (assert) {
            var event = new Survey.Event();
            assert.equal(event.isEmpty, true, "There is no callbacks at the beginning");
            var func = function () { };
            event.add(func);
            assert.equal(event.isEmpty, false, "a callbacks is added");
            event.remove(func);
            assert.equal(event.isEmpty, true, "a callbacks is removed");
        });
        QUnit.test("Event no parameters", function (assert) {
            var event = new Survey.Event();
            var counter = 0;
            var func = function () { counter++; };
            event.add(func);
            event.fire(null, null);
            assert.equal(counter, 1, "function called one time");
            event.remove(func);
            event.fire(null, null);
            assert.equal(counter, 1, "function should not be called the second time");
        });
        QUnit.test("Event with parameters", function (assert) {
            var event = new Survey.Event();
            var counter = 0;
            event.add(function (s, params) { counter += s; params.allow = true; });
            var options = { allow: false };
            assert.equal(options.allow, false, "Initial options.allow == false");
            event.fire(5, options);
            assert.equal(options.allow, true, "function should change allow to true");
            assert.equal(counter, 5, "function should increase counter on 5");
        });
        QUnit.test("Item value", function (assert) {
            var value = new Survey.ItemValue("Item");
            assert.equal(value.value, "Item", "simple text value");
            assert.equal(value.text, "Item", "get text from value");
            value.text = "My text";
            assert.equal(value.text, "My text", "get text from text property");
            value.text = null;
            assert.equal(value.text, "Item", "get text from value");
            value.value = 5;
            assert.equal(value.text, "5", "get text from value and convert it to string");
            value.value = null;
            assert.equal(value.value, null, "value was set to null");
            assert.equal(value.text, null, "text is null if value is null");
            value.value = "Item|Text Item";
            assert.equal(value.value, "Item", "use the text separator: value");
            assert.equal(value.text, "Text Item", "use the text separator: text");
        });
        QUnit.test("ItemValue.setData()", function (assert) {
            var items = new Array();
            Survey.ItemValue.setData(items, [{ value: 7, text: "Item 1" }, 5, "item", "value1|text1"]);
            assert.equal(items.length, 4, "there are 4 items");
            assert.equal(items[1].value, 5, "set correct value property for the second item");
            assert.equal(items[1].text, "5", "set correct text property for the second item");
            assert.equal(items[2].value, "item", "set correct value property for the third item");
            assert.equal(items[2].text, "item", "set correct text property for the third item");
            assert.equal(items[3].value, "value1", "set correct value property for the fourth item");
            assert.equal(items[3].text, "text1", "set correct text property for the fourth item");
        });
        QUnit.test("ItemValue.setData() empty text", function (assert) {
            var items = new Array();
            items.push(new Survey.ItemValue(1));
            items.push(new Survey.ItemValue(2));
            var newItems = new Array();
            Survey.ItemValue.setData(newItems, items);
            assert.equal(newItems.length, 2, "there are 2 items");
            assert.equal(newItems[0].value, 1, "the first value is 1");
            assert.equal(newItems[0].hasText, false, "There is no text");
        });
        QUnit.test("ItemValue.setData() boolean", function (assert) {
            var items = new Array();
            Survey.ItemValue.setData(items, [{ value: true, text: "Yes" }, { value: false, text: "No" }]);
            assert.equal(items.length, 2, "there are 2 items");
            assert.equal(items[0].value, true, "set correct value property for the first item");
            assert.equal(items[0].text, "Yes", "set correct text property for the first item");
            assert.equal(items[1].value, false, "set correct value property for the second item");
            assert.equal(items[1].text, "No", "set correct text property for the second item");
        });
        QUnit.test("ItemValue.getData()", function (assert) {
            var items = new Array();
            items.push(new Survey.ItemValue(7, "Item 1"));
            items.push(new Survey.ItemValue(5));
            items.push(new Survey.ItemValue("item"));
            var data = Survey.ItemValue.getData(items);
            Survey.ItemValue.setData(items, [{ value: 7, text: "Item 1" }, 5, "item"]);
            assert.deepEqual(data, [{ value: 7, text: "Item 1" }, 5, "item"], "convert some items to simple values");
        });
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../src/base.ts" />
/// <reference path="../src/choicesRestfull.ts" />
/// <reference path="../src/question_dropdown.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("choicesRestfull");
        var ChoicesRestfullTester = (function (_super) {
            __extends(ChoicesRestfullTester, _super);
            function ChoicesRestfullTester() {
                _super.apply(this, arguments);
            }
            ChoicesRestfullTester.prototype.runJson = function (json) {
                this.onLoad(json);
            };
            return ChoicesRestfullTester;
        }(Survey.ChoicesRestfull));
        var QuestionDropdownModelTester = (function (_super) {
            __extends(QuestionDropdownModelTester, _super);
            function QuestionDropdownModelTester(name) {
                _super.call(this, name);
            }
            QuestionDropdownModelTester.prototype.createRestfull = function () { return new ChoicesRestfullTester(); };
            QuestionDropdownModelTester.prototype.runChoicesByUrl = function (json) {
                this.choicesByUrl.runJson(json);
            };
            return QuestionDropdownModelTester;
        }(Survey.QuestionDropdownModel));
        QUnit.test("Load countries", function (assert) {
            var test = new ChoicesRestfullTester();
            var items = [];
            test.getResultCallback = function (res) { items = res; };
            var json = getCountries();
            test.path = "RestResponse;result";
            test.runJson(json);
            assert.equal(items.length, 5, "there are 5 countries");
            assert.equal(items[0].value, "Afghanistan", "the first country is Afghanistan");
            assert.equal(items[4].value, "American Samoa", "the fifth country is American Samoa");
        });
        QUnit.test("Test dropdown", function (assert) {
            var question = new QuestionDropdownModelTester("q1");
            assert.equal(question.choices.length, 0, "There is no choices by default");
            assert.equal(question.visibleChoices.length, 0, "There is no visible choices by default");
            var json = getCountries();
            question.choicesByUrl.path = "RestResponse;result";
            question.runChoicesByUrl(json);
            assert.equal(question.choices.length, 0, "Choices do not used");
            assert.equal(question.visibleChoices.length, 5, "There are 5 countries now");
        });
        function getCountries() {
            return {
                "RestResponse": {
                    "messages": ["More webservices are available at http://www.groupkt.com/post/f2129b88/services.htm", "Total [249] records found."],
                    "result": [{
                            "name": "Afghanistan",
                            "alpha2_code": "AF",
                            "alpha3_code": "AFG"
                        }, {
                            "name": "Ã…land Islands",
                            "alpha2_code": "AX",
                            "alpha3_code": "ALA"
                        }, {
                            "name": "Albania",
                            "alpha2_code": "AL",
                            "alpha3_code": "ALB"
                        }, {
                            "name": "Algeria",
                            "alpha2_code": "DZ",
                            "alpha3_code": "DZA"
                        }, {
                            "name": "American Samoa",
                            "alpha2_code": "AS",
                            "alpha3_code": "ASM"
                        }]
                }
            };
        }
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/base.ts" />
/// <reference path="../src/conditions.ts" />
/// <reference path="../src/conditionsParser.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Conditions");
        QUnit.test("Condition", function (assert) {
            var op = new Survey.Condition();
            op.right = 5;
            op.left = 5;
            assert.equal(op.perform(), true, "equal: 5 == 5");
            op.left = 3;
            assert.equal(op.perform(), false, "equal: 3 != 5");
            op.operator = "notequal";
            op.left = 5;
            assert.equal(op.perform(), false, "notequal: 5 == 5");
            op.left = 3;
            assert.equal(op.perform(), true, "notequal: 3 != 5");
            op.operator = "empty";
            op.left = null;
            assert.equal(op.perform(), true, "empty: null");
            op.left = 1;
            assert.equal(op.perform(), false, "empty: 1");
            op.operator = "notempty";
            op.left = null;
            assert.equal(op.perform(), false, "notempty: null");
            op.left = 1;
            assert.equal(op.perform(), true, "notempty: 1");
            op.operator = "contains";
            op.right = 3;
            op.left = [1, 2, 3, 4, 5];
            assert.equal(op.perform(), true, "contains: 3 from [1, 2, 3, 4, 5]");
            op.left = [1, 2, 4, 5];
            assert.equal(op.perform(), false, "contains: 3 from [1, 2, 4, 5]");
            op.operator = "notcontains";
            op.left = [1, 2, 3, 4, 5];
            assert.equal(op.perform(), false, "notcontains: 3 from [1, 2, 3, 4, 5]");
            op.left = [1, 2, 4, 5];
            assert.equal(op.perform(), true, "notcontains: 3 from [1, 2,  4, 5]");
            op.operator = "greater";
            op.right = 4;
            op.left = 5;
            assert.equal(op.perform(), true, "greater: 5 > 4");
            op.left = 3;
            assert.equal(op.perform(), false, "greater: 3 > 4");
            op.operator = "less";
            op.left = 5;
            assert.equal(op.perform(), false, "less: 5 < 4");
            op.left = 3;
            assert.equal(op.perform(), true, "less: 3 < 4");
            op.operator = "greaterorequal";
            op.left = 4;
            assert.equal(op.perform(), true, "orequal: 4 >= 4");
            op.left = 3;
            assert.equal(op.perform(), false, "orequal: 3 >= 4");
            op.operator = "lessorequal";
            op.left = 5;
            assert.equal(op.perform(), false, "lessorequal: 4 <= 5");
            op.left = 4;
            assert.equal(op.perform(), true, "less: 4 <= 4");
        });
        QUnit.test("Condition with quotes", function (assert) {
            var op = new Survey.Condition();
            op.left = "yes";
            op.right = "'yes'";
            assert.equal(op.perform(), true, "equal: yes == 'yes'");
        });
        function checkItemCondition(op, expectedOp) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'a'" + op + "2", node);
            return node.children[0].operator == expectedOp;
        }
        QUnit.test("Parse item conditions", function (assert) {
            //equal
            assert.ok(checkItemCondition("=", "equal"), "= is equal");
            assert.ok(checkItemCondition("==", "equal"), "== is equal");
            assert.ok(checkItemCondition(" Equal ", "equal"), "equal is equal");
            //not equal
            assert.ok(checkItemCondition("<>", "notequal"), "<> is notequal");
            assert.ok(checkItemCondition("!=", "notequal"), "!= is notequal");
            assert.ok(checkItemCondition(" NotEqual ", "notequal"), "NotEqual is notequal");
            //greater
            assert.ok(checkItemCondition(">", "greater"), "> is greater");
            assert.ok(checkItemCondition(" Greater ", "greater"), "Greater is greater");
            //less
            assert.ok(checkItemCondition("<", "less"), "< is less");
            assert.ok(checkItemCondition(" Less ", "less"), "Less is less");
            //greaterorequal
            assert.ok(checkItemCondition(">=", "greaterorequal"), ">= is greaterorequal");
            assert.ok(checkItemCondition("=>", "greaterorequal"), "=> is greaterorequal");
            assert.ok(checkItemCondition(" GreaterOrEqual ", "greaterorequal"), "GreaterorEqual is greaterorequal");
            //lessorequal
            assert.ok(checkItemCondition("<=", "lessorequal"), "<= is lessorequal");
            assert.ok(checkItemCondition("=<", "lessorequal"), "=< is lessorequal");
            assert.ok(checkItemCondition(" LessOrEqual ", "lessorequal"), "LessOrEqual is lessorequal");
            //contains
            assert.ok(checkItemCondition(" Contains ", "contains"), "Contains is contains");
            assert.ok(checkItemCondition(" contain ", "contains"), "contain is contains");
            //notcontains
            assert.ok(checkItemCondition(" NotContains ", "notcontains"), "NotContains is notcontains");
            assert.ok(checkItemCondition(" NotContain ", "notcontains"), "NotContain is notcontains");
        });
        QUnit.test("Condition: on item", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'a' > 2", node);
            assert.equal(node.children.length, 1);
            assert.equal(node.children[0].left, "a");
            assert.equal(node.children[0].operator, "greater");
            assert.equal(node.children[0].right, 2);
            assert.equal(node.connective, "and");
        });
        QUnit.test("Condition: without right condition", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            assert.ok(parser.parse("'a' empty", node), "empty");
            assert.ok(parser.parse("'a' notempty", node), "notempty");
        });
        QUnit.test("Condition: on item - no spaces", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("5>2", node);
            assert.equal(node.children.length, 1);
            assert.equal(node.children[0].left, "5");
            assert.equal(node.children[0].operator, "greater");
            assert.equal(node.children[0].right, 2);
            assert.equal(node.connective, "and");
        });
        QUnit.test("Condition: on item - string value and name has spaces", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'my question'<>'this first value'", node);
            assert.equal(node.children.length, 1);
            assert.equal(node.children[0].left, "my question");
            assert.equal(node.children[0].operator, "notequal");
            assert.equal(node.children[0].right, "this first value");
            assert.equal(node.connective, "and");
        });
        QUnit.test("Condition: two items or", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'a' = 1 or 'b' = 2", node);
            assert.equal(node.children.length, 2);
            assert.equal(node.connective, "or");
            assert.equal(node.children[0].left, "a");
            assert.equal(node.children[0].operator, "equal");
            assert.equal(node.children[0].right, 1);
            assert.equal(node.children[1].left, "b");
            assert.equal(node.children[1].operator, "equal");
            assert.equal(node.children[1].right, 2);
        });
        QUnit.test("Condition: a and b or c", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'a' = 1 and 'b' = 2 or 'c' = 3", node);
            assert.equal(node.children.length, 2);
            assert.equal(node.connective, "or");
            var left = node.children[0];
            assert.equal(left.children.length, 2);
            assert.equal(left.connective, "and");
            assert.equal(left.children[0].left, "a");
            assert.equal(left.children[0].operator, "equal");
            assert.equal(left.children[0].right, 1);
            assert.equal(left.children[1].left, "b");
            assert.equal(left.children[1].operator, "equal");
            assert.equal(left.children[1].right, 2);
            var right = node.children[1];
            assert.equal(right.children.length, 1);
            assert.equal(right.connective, "and");
            assert.equal(right.children[0].left, "c");
            assert.equal(right.children[0].operator, "equal");
            assert.equal(right.children[0].right, 3);
        });
        QUnit.test("Condition: a and (b or c)", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'a' = 1 and('b' = 2 or 'c' = 3)", node);
            assert.equal(node.children.length, 2);
            assert.equal(node.connective, "and");
            var left = node.children[0];
            assert.equal(left.left, "a");
            assert.equal(left.operator, "equal");
            assert.equal(left.right, 1);
            var right = node.children[1];
            assert.equal(right.children.length, 2);
            assert.equal(right.connective, "or");
            assert.equal(right.children[0].left, "b");
            assert.equal(right.children[0].operator, "equal");
            assert.equal(right.children[0].right, 2);
            assert.equal(right.children[1].left, "c");
            assert.equal(right.children[1].operator, "equal");
            assert.equal(right.children[1].right, 3);
        });
        QUnit.test("Run one condition", function (assert) {
            var runner = new Survey.ConditionRunner("{a} > 5");
            var values = { a: 6 };
            assert.equal(runner.run(values), true, "6 > 5");
            values = { a: 5 };
            assert.equal(runner.run(values), false, "5 > 5");
            var values2 = { b: 5 };
            assert.equal(runner.run(values2), false, "undefined > 5");
        });
        QUnit.test("Run complex condition", function (assert) {
            var runner = new Survey.ConditionRunner("{age} >= 21 and ({sex} = 'male' or {kids} > 1)");
            var values = { age: 21, sex: 'male', kids: 1 };
            assert.equal(runner.run(values), true, "21 >= 21 and (male = male or 1 > 1");
            var values = { age: 21, sex: 'female', kids: 1 };
            assert.equal(runner.run(values), false, "21 >= 21 and (male = female or 1 > 1)");
            var values = { age: 21, sex: 'female', kids: 2 };
            assert.equal(runner.run(values), true, "21 >= 21 and (male = female or 2 > 1)");
            var values = { age: 20, sex: 'male', kids: 2 };
            assert.equal(runner.run(values), false, "20 >= 21 and (male = male or 2 > 1)");
        });
        QUnit.test("Expression Tree to Text", function (assert) {
            var parser = new Survey.ConditionsParser();
            var node = new Survey.ConditionNode();
            parser.parse("'age' >= 21 and ('sex' = 'male' or 'kids' > 1)", node);
            assert.equal(parser.toString(node), "'age' >= 21 and ('sex' = 'male' or 'kids' > 1)");
        });
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../src/jsonobject.ts" />
var Survey;
(function (Survey) {
    var JsonSerializationTests;
    (function (JsonSerializationTests) {
        var Car = (function () {
            function Car() {
            }
            Car.prototype.getType = function () { return "car"; };
            return Car;
        }());
        var FastCar = (function (_super) {
            __extends(FastCar, _super);
            function FastCar() {
                _super.apply(this, arguments);
            }
            FastCar.prototype.getType = function () { return "fast"; };
            return FastCar;
        }(Car));
        var BigCar = (function (_super) {
            __extends(BigCar, _super);
            function BigCar() {
                _super.apply(this, arguments);
            }
            BigCar.prototype.getType = function () { return "big"; };
            return BigCar;
        }(Car));
        var SportCar = (function (_super) {
            __extends(SportCar, _super);
            function SportCar() {
                _super.apply(this, arguments);
            }
            SportCar.prototype.getType = function () { return "sport"; };
            return SportCar;
        }(FastCar));
        var Truck = (function (_super) {
            __extends(Truck, _super);
            function Truck() {
                _super.apply(this, arguments);
            }
            Truck.prototype.getType = function () { return "truck"; };
            return Truck;
        }(BigCar));
        var Dealer = (function () {
            function Dealer() {
                this.cars = new Array();
                this.stringArray = [];
                this.defaultValue = "default";
                this.trucks = new Array();
            }
            Dealer.prototype.getType = function () { return "dealer"; };
            return Dealer;
        }());
        var ItemValueListOwner = (function () {
            function ItemValueListOwner() {
                this.items = new Array();
            }
            ItemValueListOwner.prototype.getType = function () { return "itemvaluelistowner"; };
            return ItemValueListOwner;
        }());
        var LongNameItemBase = (function () {
            function LongNameItemBase() {
            }
            LongNameItemBase.prototype.getType = function () { return "item_thelongpart"; };
            return LongNameItemBase;
        }());
        var LongNameItemA = (function (_super) {
            __extends(LongNameItemA, _super);
            function LongNameItemA() {
                _super.apply(this, arguments);
            }
            LongNameItemA.prototype.getType = function () { return "itemA_thelongpart"; };
            return LongNameItemA;
        }(LongNameItemBase));
        var LongNameItemB = (function (_super) {
            __extends(LongNameItemB, _super);
            function LongNameItemB() {
                _super.apply(this, arguments);
            }
            LongNameItemB.prototype.getType = function () { return "itemB_thelongpart"; };
            return LongNameItemB;
        }(LongNameItemBase));
        var LongNamesOwner = (function () {
            function LongNamesOwner() {
                this.items = new Array();
            }
            LongNamesOwner.prototype.getType = function () { return "LongNamesOwner"; };
            return LongNamesOwner;
        }());
        var NonCreatingObject = (function () {
            function NonCreatingObject() {
            }
            NonCreatingObject.prototype.getType = function () { return "shouldnotcreate"; };
            return NonCreatingObject;
        }());
        var CreatingObject = (function (_super) {
            __extends(CreatingObject, _super);
            function CreatingObject() {
                _super.apply(this, arguments);
            }
            CreatingObject.prototype.getType = function () { return "shouldcreate"; };
            return CreatingObject;
        }(NonCreatingObject));
        var CreatingObjectContainer = (function () {
            function CreatingObjectContainer() {
                this.items = new Array();
            }
            CreatingObjectContainer.prototype.getType = function () { return "container"; };
            return CreatingObjectContainer;
        }());
        Survey.JsonObject.metaData.addClass("dealer", ["name", "dummyname", "car", "cars", "stringArray", { name: "defaultValue", default: "default" },
            { name: "cars", baseClassName: "car" },
            { name: "truck", className: "truck" }, { name: "trucks", className: "truck" },
            { name: "changeNameOnSet", onSetValue: function (obj, value, jsonConv) { obj.name = value; } }]);
        Survey.JsonObject.metaData.addClass("fast", [], function () { return new FastCar(); }, "car");
        Survey.JsonObject.metaData.addClass("big", [], null, "car");
        Survey.JsonObject.metaData.addClass("car", ["name"]);
        Survey.JsonObject.metaData.addClass("truck", [{ name: "maxWeight:number", choices: function () { return [500, 1500]; } }], function () { return new Truck(); }, "big");
        Survey.JsonObject.metaData.addClass("sport", [{ name: "!maxSpeed", choices: [100, 150, 200, 250] }], function () { return new SportCar(); }, "fast");
        Survey.JsonObject.metaData.addClass("itemvaluelistowner", [{ name: "items", onGetValue: function (obj) { return Survey.ItemValue.getData(obj.items); }, onSetValue: function (obj, value) { Survey.ItemValue.setData(obj.items, value); } }]);
        Survey.JsonObject.metaData.addClass("item_thelongpart", ["baseSt"]);
        Survey.JsonObject.metaData.addClass("itemA_thelongpart", ["A"], function () { return new LongNameItemA(); }, "LongNameItemBase");
        Survey.JsonObject.metaData.addClass("itemB_thelongpart", ["B"], function () { return new LongNameItemB(); }, "LongNameItemBase");
        Survey.JsonObject.metaData.addClass("LongNamesOwner", [{ name: "items", baseClassName: "item_thelongpart", classNamePart: "_thelongpart" }]);
        Survey.JsonObject.metaData.addClass("shouldnotcreate", ["A"], function () { return new NonCreatingObject(); });
        Survey.JsonObject.metaData.addClass("container", [{ name: "obj", className: "shouldnotcreate" }, { name: "items", className: "shouldnotcreate" }]);
        Survey.JsonObject.metaData.overrideClassCreatore("shouldnotcreate", function () { return new CreatingObject(); });
        QUnit.module("JsonSerializationTests");
        QUnit.test("Metadata for non inherited class", function (assert) {
            assert.equal(Survey.JsonObject.metaData.getProperties("dealer").length, 9, "Flat properties list");
            assert.equal(Survey.JsonObject.metaData.getProperties("dealer")[0].name, "name", "Name property");
        });
        QUnit.test("Metadata add at the beginning parent class properties ", function (assert) {
            assert.equal(Survey.JsonObject.metaData.getProperties("truck").length, 2, "1 + 1 parent propreties");
            assert.equal(Survey.JsonObject.metaData.getProperties("truck")[0].name, "name", "parent properties first");
        });
        QUnit.test("One object - one property serialization", function (assert) {
            var dealer = new Dealer();
            dealer.name = "small";
            dealer.unserializedName = "none";
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"name\":\"small\"}", "serialize just one property");
        });
        QUnit.test("String array serialization", function (assert) {
            var dealer = new Dealer();
            dealer.stringArray = ["one", "two"];
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"stringArray\":[\"one\",\"two\"]}", "serialize array");
        });
        QUnit.test("Use onGetValue during serialization", function (assert) {
            var dealer = new Dealer();
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{}", "default value of this property is not serialized");
            dealer.defaultValue = "nondefault";
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"defaultValue\":\"nondefault\"}", "serialize non default property as any other");
        });
        QUnit.test("Serialize object with it's type", function (assert) {
            var dealer = new Dealer();
            var truck = new Truck();
            truck.maxWeight = 10000;
            dealer.car = truck;
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"car\":{\"type\":\"truck\",\"maxWeight\":10000}}", "serialize object with it's type");
        });
        QUnit.test("Serialize arrays with serializable objects", function (assert) {
            var dealer = new Dealer();
            var truck = new Truck();
            truck.maxWeight = 10000;
            var sport = new SportCar();
            sport.maxSpeed = 320;
            dealer.cars = [sport, truck];
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"cars\":[{\"type\":\"sport\",\"maxSpeed\":320},{\"type\":\"truck\",\"maxWeight\":10000}]}", "serialize objects with their type");
        });
        QUnit.test("Serialize object and get type by it's property", function (assert) {
            var dealer = new Dealer();
            var truck = new Truck();
            dealer.truck = new Truck();
            dealer.truck.maxWeight = 10000;
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"truck\":{\"maxWeight\":10000}}", "serialize object without it's type");
        });
        QUnit.test("Serialize arrays with serializable objects and get type by it's property", function (assert) {
            var dealer = new Dealer();
            dealer.trucks.push(new Truck());
            dealer.trucks.push(new Truck());
            dealer.trucks[0].maxWeight = 10000;
            dealer.trucks[1].maxWeight = 15000;
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.equal(JSON.stringify(jsObj), "{\"trucks\":[{\"maxWeight\":10000},{\"maxWeight\":15000}]}", "serialize objects without their type");
        });
        QUnit.test("One object - one property deserialization", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "name": "small" }, dealer);
            assert.equal(dealer.name, "small", "deserialize just one property");
        });
        QUnit.test("String array deserialization", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "stringArray": ["one", "two"] }, dealer);
            assert.deepEqual(dealer.stringArray, ["one", "two"], "deserialize array");
        });
        QUnit.test("Deserialize object with it's type", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "car": { "type": "truck", "maxWeight": 10000 } }, dealer);
            var truck = dealer.car;
            assert.equal(truck.maxWeight, 10000, "deserialize object with it's type");
            assert.equal(truck.getType(), "truck", "the live object");
            assert.notEqual(truck.type, "truck", "type is removed");
        });
        QUnit.test("Deserialize arrays with serializable objects", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "cars": [{ "type": "sport", "maxSpeed": 320 }, { "type": "truck", "maxWeight": 10000 }] }, dealer);
            assert.equal(dealer.cars.length, 2, "two objects in array should be deserialized");
            var sport = dealer.cars[0];
            var truck = dealer.cars[1];
            assert.equal(sport.maxSpeed, 320, "deserialize the first object");
            assert.equal(sport.getType(), "sport", "deserialize the first object");
            assert.equal(truck.maxWeight, 10000, "deserialize the second object");
            assert.equal(truck.getType(), "truck", "deserialize the second object");
        });
        QUnit.test("Deserialize object and get type by it's property className", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "truck": { "maxWeight": 10000 } }, dealer);
            assert.equal(dealer.truck.maxWeight, 10000, "deserialize object with it's type");
            assert.equal(dealer.truck.getType(), "truck", "the live object");
        });
        QUnit.test("Deserialize arrays with serializable objects and get type by it's property className", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "trucks": [{ "maxWeight": 10000 }, { "maxWeight": 15000 }] }, dealer);
            assert.equal(dealer.trucks.length, 2, "two objects in array should be deserialized");
            assert.equal(dealer.trucks[0].maxWeight, 10000, "deserialize the first object");
            assert.equal(dealer.trucks[0].getType(), "truck", "deserialize the first object");
            assert.equal(dealer.trucks[1].maxWeight, 15000, "deserialize the second object");
            assert.equal(dealer.trucks[1].getType(), "truck", "deserialize the second object");
        });
        QUnit.test("Use on setValue during deserialization", function (assert) {
            var dealer = new Dealer();
            new Survey.JsonObject().toObject({ "changeNameOnSet": "nameIsChanged" }, dealer);
            assert.equal(dealer.name, "nameIsChanged", "the property name is set");
        });
        QUnit.test("ItemValueListOwner serialization", function (assert) {
            var list = new ItemValueListOwner();
            list.items.push(new Survey.ItemValue(7, "Item 1"));
            list.items.push(new Survey.ItemValue(5));
            list.items.push(new Survey.ItemValue("item"));
            var jsObj = new Survey.JsonObject().toJsonObject(list);
            assert.equal(JSON.stringify(jsObj), "{\"items\":[{\"value\":7,\"text\":\"Item 1\"},5,\"item\"]}", "serialize ItemValueListOwner");
        });
        QUnit.test("ItemValueListOwner deserialization", function (assert) {
            var list = new ItemValueListOwner();
            new Survey.JsonObject().toObject({ "items": [{ "value": 7, "text": "Item 1" }, 5, "item", "value1|text1"] }, list);
            assert.equal(list.items.length, 4, "there are 4 items");
            assert.equal(list.items[1].value, 5, "set correct value property for the second item");
            assert.equal(list.items[1].text, "5", "set correct text property for the second item");
            assert.equal(list.items[3].value, "value1", "set correct value property for the fourth item");
            assert.equal(list.items[3].text, "text1", "set correct text property for the fourth item");
        });
        QUnit.test("LongNamesOwner serialization", function (assert) {
            var owner = new LongNamesOwner();
            var l1 = new LongNameItemA();
            l1.A = 5;
            var l2 = new LongNameItemB();
            l2.B = 15;
            owner.items.push(l1);
            owner.items.push(l2);
            var jsObj = new Survey.JsonObject().toJsonObject(owner);
            assert.equal(JSON.stringify(jsObj), "{\"items\":[{\"type\":\"itemA\",\"A\":5},{\"type\":\"itemB\",\"B\":15}]}", "serialize LongNamesOwner");
        });
        QUnit.test("ItemValueListOwner deserialization", function (assert) {
            var owner = new LongNamesOwner();
            new Survey.JsonObject().toObject({ items: [{ type: "itemA", A: 5 }, { type: "itemB_thelongpart", B: 15 }] }, owner);
            assert.equal(owner.items.length, 2, "there are 2 items");
            assert.equal(owner.items[0].getType(), "itemA_thelongpart", "the first object is live");
            assert.equal(owner.items[1].getType(), "itemB_thelongpart", "the second object is live");
        });
        QUnit.test("Do not change Json", function (assert) {
            var json = { items: [{ type: "itemA", A: 5 }, { type: "itemB_thelongpart", B: 15 }] };
            var jsonText = JSON.stringify(json);
            var owner = new LongNamesOwner();
            new Survey.JsonObject().toObject(json, owner);
            assert.equal(JSON.stringify(json), jsonText, "Json object should be the same after deserialization");
        });
        QUnit.test("Unknown property error on deserialization", function (assert) {
            var owner = new LongNamesOwner();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ unknown1: 4, items: [{ type: "itemA", A: 5 }, { unknown2: 5, type: "itemB_thelongpart", B: 15 }] }, owner);
            assert.equal(jsonObj.errors.length, 2, "it should be two errors");
            assert.equal(jsonObj.errors[0].propertyName, "unknown1", "the property Name in the first error");
            assert.equal(jsonObj.errors[0].className, "LongNamesOwner", "the class Name in the first error");
            assert.equal(jsonObj.errors[1].propertyName, "unknown2", "the property Name in the second error");
            assert.equal(jsonObj.errors[1].className, "itemB_thelongpart", "the class Name in the second error");
        });
        QUnit.test("Having 'pos' property for objects with errors", function (assert) {
            var owner = new LongNamesOwner();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ pos: { start: 20 }, unknown1: 4, items: [{ pos: { start: 30, end: 50 }, type: "itemA", A: 5 }, { pos: { start: 30, end: 50 }, unknown2: 5, type: "itemB_thelongpart", B: 15 }] }, owner);
            assert.equal(jsonObj.errors.length, 2, "it should be two errors");
            assert.equal(jsonObj.errors[0].at, 20);
            assert.equal(jsonObj.errors[1].at, 30);
        });
        QUnit.test("Do not remove 'pos' property from objects", function (assert) {
            var dealer = new Dealer();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ pos: { start: 1 }, "cars": [{ pos: { start: 10 }, "maxSpeed": 320 }, { pos: { start: 20 }, "type": "truck", "maxWeight": 10000 }] }, dealer);
            var truck = dealer.cars[0];
            assert.equal(truck["pos"].start, 20, "deserialize the second object");
        });
        QUnit.test("Deserialize arrays with missing type property", function (assert) {
            var dealer = new Dealer();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ "cars": [{ "maxSpeed": 320 }, { "type": "truck", "maxWeight": 10000 }] }, dealer);
            assert.equal(dealer.cars.length, 1, "can only one object deserialized");
            var truck = dealer.cars[0];
            assert.equal(truck.maxWeight, 10000, "deserialize the second object");
            assert.equal(truck.getType(), "truck", "deserialize the second object");
            assert.equal(jsonObj.errors.length, 1, "there should be one error");
            assert.equal(jsonObj.errors[0].type, "missingtypeproperty", "The missing type property error");
        });
        QUnit.test("Deserialize arrays with incorrect type property", function (assert) {
            var dealer = new Dealer();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ "cars": [{ "type": "unknown", "maxSpeed": 320 }, { "type": "truck", "maxWeight": 10000 }] }, dealer);
            assert.equal(dealer.cars.length, 1, "can only one object deserialized");
            var truck = dealer.cars[0];
            assert.equal(truck.maxWeight, 10000, "deserialize the second object");
            assert.equal(truck.getType(), "truck", "deserialize the second object");
            assert.equal(jsonObj.errors.length, 1, "there should be one error");
            assert.equal(jsonObj.errors[0].type, "incorrecttypeproperty", "The incorrect type property error");
        });
        QUnit.test("Deserialization - required property error", function (assert) {
            var dealer = new Dealer();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ "cars": [{ "type": "sport" }] }, dealer);
            assert.equal(dealer.cars.length, 1, "One object is deserialized");
            assert.equal(jsonObj.errors.length, 1, "there should be one error about required property");
            assert.equal(jsonObj.errors[0].type, "requiredproperty", "The required property error");
        });
        QUnit.test("Deserialization - required property error", function (assert) {
            var children = Survey.JsonObject.metaData.getChildrenClasses("car");
            assert.equal(children.length, 4, "There are 4 children classes");
            children = Survey.JsonObject.metaData.getChildrenClasses("car", true);
            assert.equal(children.length, 3, "There are 3 children classes that can be created.");
        });
        QUnit.test("Property Type test", function (assert) {
            var properties = Survey.JsonObject.metaData.getProperties("truck");
            assert.equal(properties[0].name, "name", "It is a 'name' property");
            assert.equal(properties[0].type, "string", "Name property is string");
            assert.equal(properties[1].name, "maxWeight", "It is a 'maxWeight' property");
            assert.equal(properties[1].type, "number", "maxWeight property is number");
        });
        QUnit.test("Property Choices test", function (assert) {
            var properties = Survey.JsonObject.metaData.getProperties("truck");
            assert.equal(properties[0].name, "name", "It is a 'name' property");
            assert.equal(properties[0].type, "string", "Name property is string");
            assert.equal(properties[1].name, "maxWeight", "It is a 'maxWeight' property");
            assert.equal(properties[1].type, "number", "maxWeight property is number");
        });
        QUnit.test("Property Choices test", function (assert) {
            var properties = Survey.JsonObject.metaData.getProperties("sport");
            assert.equal(properties[1].name, "maxSpeed", "It is a 'maxSpeed' property");
            assert.deepEqual(properties[1].choices, [100, 150, 200, 250], "'maxSpeed' property choices");
        });
        QUnit.test("Property Choices func test", function (assert) {
            var properties = Survey.JsonObject.metaData.getProperties("truck");
            assert.equal(properties[1].name, "maxWeight", "It is a 'maxWeight' property");
            assert.deepEqual(properties[1].choices, [500, 1500], "'maxWeight' property choices");
        });
        QUnit.test("Create inherited class instead of origional", function (assert) {
            var container = new CreatingObjectContainer();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ items: [{ "type": "shouldnotcreate", "A": 320 }], obj: { "A": 200 } }, container);
            assert.equal(container.items.length, 1, "one object is added");
            assert.equal(container.items[0].getType(), "shouldcreate", "created the right class in array");
            assert.equal(container.obj.getType(), "shouldcreate", "created the right class in property");
        });
        QUnit.test("toJsonObject should create new instance of objects", function (assert) {
            var dealer = new Dealer();
            var truck = new Truck();
            truck.maxWeight = 10000;
            var sport = new SportCar();
            sport.maxSpeed = 320;
            dealer.cars = [sport, truck];
            var jsObj = new Survey.JsonObject().toJsonObject(dealer);
            assert.notEqual(jsObj.cars, dealer.cars);
            assert.notEqual(jsObj.cars[0], dealer.cars[0]);
            dealer.cars.push(sport);
            assert.equal(dealer.cars.length, 3);
            assert.equal(jsObj.cars.length, 2);
        });
    })(JsonSerializationTests = Survey.JsonSerializationTests || (Survey.JsonSerializationTests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/surveyStrings.ts" />
/// <reference path="../src/survey.ts" />
var Survey;
(function (Survey) {
    var LocalizationsTests;
    (function (LocalizationsTests) {
        QUnit.module("LocalizationsTests");
        QUnit.test("get default strings", function (assert) {
            assert.equal(Survey.surveyLocalization.getString("pageNextText"), "Next");
            Survey.surveyLocalization.currentLocale = "en";
            assert.equal(Survey.surveyLocalization.getString("pageNextText"), "Next");
            Survey.surveyLocalization.currentLocale = "unknown";
            assert.equal(Survey.surveyLocalization.getString("pageNextText"), "Next");
            Survey.surveyLocalization.currentLocale = "";
        });
        QUnit.test("add new localization", function (assert) {
            var newLoc = { pageNextText: "Mynext" };
            Survey.surveyLocalization.locales["myen"] = newLoc;
            assert.equal(Survey.surveyLocalization.getString("pageNextText"), "Next");
            Survey.surveyLocalization.currentLocale = "myen";
            assert.equal(Survey.surveyLocalization.getString("pageNextText"), "Mynext");
            assert.equal(Survey.surveyLocalization.getString("pagePrevText"), "Previous");
            Survey.surveyLocalization.currentLocale = "";
        });
        QUnit.test("set german localization", function (assert) {
            var locales = Survey.surveyLocalization.getLocales();
            assert.ok(locales.indexOf("en") > -1, "has en");
            assert.ok(locales.indexOf("de") > -1, "has de");
        });
        QUnit.test("set german localization", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.locale = "de";
            assert.equal(survey.completeText, "Fertig");
            Survey.surveyLocalization.currentLocale = "";
        });
        QUnit.test("set finnish localization", function (assert) {
            var locales = Survey.surveyLocalization.getLocales();
            assert.ok(locales.indexOf("en") > -1, "has en");
            assert.ok(locales.indexOf("fi") > -1, "has fi");
        });
        QUnit.test("set finnish localization", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.locale = "fi";
            assert.equal(survey.completeText, "Valmis");
            Survey.surveyLocalization.currentLocale = "";
        });
    })(LocalizationsTests = Survey.LocalizationsTests || (Survey.LocalizationsTests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/survey.ts" />
/// <reference path="../src/page.ts" />
/// <reference path="../src/question.ts" />
/// <reference path="../src/question_baseselect.ts" />
/// <reference path="../src/question_checkbox.ts" />
/// <reference path="../src/question_matrix.ts" />
/// <reference path="../src/question_multipletext.ts" />
/// <reference path="../src/question_radiogroup.ts" />
/// <reference path="../src/question_matrixdropdown.ts" />
/// <reference path="../src/question_matrixdynamic.ts" />
/// <reference path="../src/questionfactory.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Survey_Questions");
        QUnit.test("Only some questions support comment", function (assert) {
            var questionText = Survey.QuestionFactory.Instance.createQuestion("text", "textQuestion");
            assert.equal(questionText.supportComment(), false, "Text question doesn't support comment.");
            assert.equal(questionText.hasComment, false, "Text question doesn't support comment.");
            questionText.hasComment = true;
            assert.equal(questionText.hasComment, false, "You can't set has comment to the text question.");
            var questionDropDown = Survey.QuestionFactory.Instance.createQuestion("dropdown", "dropdownQuestion");
            assert.equal(questionDropDown.supportComment(), true, "Drop down question supports comment.");
            assert.equal(questionDropDown.hasComment, false, "Has comment is false by  default.");
            questionDropDown.hasComment = true;
            assert.equal(questionDropDown.hasComment, true, "You can set comment for drop down question.");
        });
        QUnit.test("Only some questions support other", function (assert) {
            var questionText = Survey.QuestionFactory.Instance.createQuestion("text", "textQuestion");
            assert.equal(questionText.supportOther(), false, "Text question doesn't support other.");
            assert.equal(questionText.hasOther, false, "Text question doesn't support other.");
            questionText.hasOther = true;
            assert.equal(questionText.hasOther, false, "You can't set has other to the text question.");
            var questionDropDown = Survey.QuestionFactory.Instance.createQuestion("dropdown", "dropdownQuestion");
            assert.equal(questionDropDown.supportOther(), true, "Drop down question supports other.");
            assert.equal(questionDropDown.hasOther, false, "Has other is false by  default.");
            questionDropDown.hasOther = true;
            assert.equal(questionDropDown.hasOther, true, "You can set other for drop down question.");
        });
        QUnit.test("Comment and other could not be set together", function (assert) {
            var questionDropDown = Survey.QuestionFactory.Instance.createQuestion("dropdown", "dropdownQuestion");
            assert.equal(questionDropDown.hasComment, false, "Initial comment is turn off.");
            assert.equal(questionDropDown.hasOther, false, "Initial other is turn off.");
            questionDropDown.hasOther = true;
            assert.equal(questionDropDown.hasOther, true, "set initially other to true");
            questionDropDown.hasComment = true;
            assert.equal(questionDropDown.hasComment, true, "After set comment to true");
            assert.equal(questionDropDown.hasOther, false, "After set comment to true");
            questionDropDown.hasOther = true;
            assert.equal(questionDropDown.hasComment, false, "After set other to true");
            assert.equal(questionDropDown.hasOther, true, "After set other to true");
        });
        QUnit.test("visibleChoices changes on setting others to true/false", function (assert) {
            var question = new Survey.QuestionSelectBase("dropdownQuestion");
            question.choices = ["One", "Two", "Three"];
            assert.equal(question.visibleChoices.length, 3, "By default visibleChoices equals to choices");
            question.hasOther = true;
            assert.equal(question.visibleChoices.length, 4, "Add one more item for others");
            question.hasOther = false;
            assert.equal(question.visibleChoices.length, 3, "Remove the others item");
        });
        QUnit.test("Question Title property", function (assert) {
            var question = new Survey.QuestionTextModel("q1");
            assert.equal(question.title, "q1", "get the question name by default");
            question.title = "My title";
            assert.equal(question.title, "My title", "get the question name by default");
        });
        QUnit.test("Pre-proccess value for Checkbox", function (assert) {
            var survey = new Survey.SurveyModel();
            var page = survey.addNewPage("Page 1");
            var question = new Survey.QuestionCheckboxModel("checkboxQuestion");
            question.choices = ["One", "Two", "Three"];
            page.addQuestion(question);
            survey.setValue("checkboxQuestion", "One");
            assert.equal(question.value, ["One"], "convert value to array");
        });
        QUnit.test("Matrix Question: visible rows", function (assert) {
            var matrix = new Survey.QuestionMatrixModel("q1");
            assert.equal(matrix.hasRows, false, "There is now rows by default.");
            assert.equal(matrix.visibleRows.length, 1, "There is always at least one row");
            assert.equal(matrix.visibleRows[0].name, null, "The default row name is empty");
            assert.equal(matrix.visibleRows[0].fullName, "q1", "The default row fullName is the question name");
            matrix.rows = ["row1", "row2"];
            assert.equal(matrix.hasRows, true, "There are two rows");
            assert.equal(matrix.visibleRows.length, 2, "Use the added row");
            assert.equal(matrix.visibleRows[0].name, "row1", "the row name is 'row1'");
            assert.equal(matrix.visibleRows[0].fullName, "q1_row1", "The default row fullName is the question name");
        });
        QUnit.test("Matrix Question: get/set values for empty rows", function (assert) {
            var matrix = new Survey.QuestionMatrixModel("q1");
            matrix.columns = ["col1", "col2"];
            matrix.value = "col1";
            var rows = matrix.visibleRows;
            assert.equal(rows[0].value, "col1", "set the row value correctly");
            rows[0].value = "col2";
            assert.equal(rows[0].value, "col2", "the row value changed");
            assert.equal(matrix.value, "col2", "the matrix value changed correctly");
        });
        QUnit.test("Matrix Question: get/set values for two rows", function (assert) {
            var matrix = new Survey.QuestionMatrixModel("q1");
            matrix.rows = ["row1", "row2"];
            matrix.columns = ["col1", "col2"];
            matrix.value = { row1: "col1" };
            var rows = matrix.visibleRows;
            assert.equal(rows[0].value, "col1", "set the row value correctly");
            rows[0].value = "col2";
            assert.equal(rows[0].value, "col2", "the row value changed");
            assert.deepEqual(matrix.value, { row1: "col2" }, "the matrix value changed correctly");
            rows[1].value = "col1";
            assert.deepEqual(matrix.value, { row1: "col2", row2: "col1" }, "the matrix value changed correctly");
        });
        QUnit.test("Matrix Question set values after visible row generated", function (assert) {
            var matrix = new Survey.QuestionMatrixModel("q1");
            matrix.rows = ["row1", "row2"];
            matrix.columns = ["col1", "col2"];
            var rows = matrix.visibleRows;
            matrix.value = { row1: "col1" };
            assert.equal(rows[0].value, "col1", "set the row value correctly");
        });
        QUnit.test("Multiple Text Item: text property", function (assert) {
            var mItem = new Survey.MultipleTextItemModel("text1");
            assert.equal(mItem.title, "text1", "get value from name");
            mItem.title = "display1";
            assert.equal(mItem.title, "display1", "get value from textValue");
        });
        QUnit.test("Multiple Text Question: get/set values for two texts", function (assert) {
            var mText = new Survey.QuestionMultipleTextModel("q1");
            mText.items.push(new Survey.MultipleTextItemModel("text1"));
            mText.items.push(new Survey.MultipleTextItemModel("text2"));
            mText.value = { text1: "val1" };
            assert.equal(mText.items[0].value, "val1", "get the value from the question");
            mText.items[1].value = "val2";
            assert.deepEqual(mText.value, { text1: "val1", text2: "val2" }, "set the value from the text item");
        });
        QUnit.test("Validators for text question", function (assert) {
            var mText = new Survey.QuestionTextModel("");
            assert.equal(mText.hasErrors(), false, "There is no error by default");
            mText.validators.push(new Survey.NumericValidator(10, 20));
            assert.equal(mText.hasErrors(), false, "There is no error since the value is empty");
            mText.value = "ss";
            assert.equal(mText.hasErrors(), true, "The value should be numeric");
            mText.value = 25;
            assert.equal(mText.hasErrors(), true, "The value should be between 10 and 20");
            mText.value = "15";
            assert.equal(mText.hasErrors(), false, "The value is fine now.");
            assert.equal(mText.value, 15, "Convert to numeric");
        });
        QUnit.test("Validators for multiple text question", function (assert) {
            var mText = new Survey.QuestionMultipleTextModel("q1");
            mText.items.push(new Survey.MultipleTextItemModel("t1"));
            assert.equal(mText.hasErrors(), false, "There is no error by default");
            mText.items[0].validators.push(new Survey.NumericValidator(10, 20));
            mText.value = { t1: "ss" };
            assert.equal(mText.hasErrors(), true, "The value should be numeric");
            mText.value = { t1: 25 };
            assert.equal(mText.hasErrors(), true, "The value should be between 10 and 20");
            assert.equal(mText.errors[0].getText().indexOf("t1") >= 0, true, "Error contains information about item name");
            mText.value = { t1: 15 };
            assert.equal(mText.hasErrors(), false, "The value is fine now.");
            assert.equal(mText.items[0].value, 15, "Convert to numeric");
        });
        QUnit.test("Validators for array value question", function (assert) {
            var question = new Survey.QuestionCheckboxModel("q1");
            question.choices = ["item1", "item2", "item3", "item4", "item5"];
            question.value = ["item1"];
            assert.equal(question.hasErrors(), false, "There is no error by default");
            question.validators.push(new Survey.AnswerCountValidator(2, 3));
            question.value = ["item1"];
            assert.equal(question.hasErrors(), true, "It should be at least two items selected");
            question.value = ["item1", "item2", "item3"];
            assert.equal(question.hasErrors(), false, "There is one item in value");
            question.value = ["item1", "item2", "item3", "item4"];
            assert.equal(question.hasErrors(), true, "It should be less then 3 items");
            question.value = ["item1", "item3"];
            assert.equal(question.hasErrors(), false, "There is two items in value");
        });
        QUnit.test("Show errors if others value is selected, but not entered", function (assert) {
            var radio = new Survey.QuestionRadiogroupModel("q1");
            new Survey.SurveyModel().addNewPage("p1").addQuestion(radio);
            radio.choices = ["one"];
            radio.hasOther = true;
            assert.equal(radio.hasErrors(), false, "There is no error by default");
            radio.value = radio.otherItem.value;
            assert.equal(radio.hasErrors(), true, "The other comment should be entered");
            radio.comment = "Many";
            assert.equal(radio.hasErrors(), false, "We have entered the comment");
        });
        QUnit.test("SelectBase visibleChoices order", function (assert) {
            var question = new Survey.QuestionSelectBase("dropdownQuestion");
            question.choices = ["B", "A", "D", "C"];
            assert.equal(question.choicesOrder, "none", "The default value is 'none'");
            assert.equal(question.visibleChoices[0].text, "B", "By default visible choices is not sorted");
            question.choicesOrder = "asc";
            assert.equal(question.visibleChoices[0].text, "A", "Sorted order is 'asc'");
            question.choicesOrder = "desc";
            assert.equal(question.visibleChoices[0].text, "D", "Sorted order is 'desc'");
        });
        QUnit.test("Question callbacks test", function (assert) {
            var question = new Survey.QuestionTextModel("textQuestion");
            var valueChanged = 0;
            var commentChanged = 0;
            var visibleChanged = 0;
            var visibleIndexChanged = 0;
            question.valueChangedCallback = function () { valueChanged++; };
            question.commentChangedCallback = function () { commentChanged++; };
            question.visibilityChangedCallback = function () { visibleChanged++; };
            question.visibleIndexChangedCallback = function () { visibleIndexChanged++; };
            question.value = "test";
            question.comment = "comment";
            question.visible = false;
            question.setVisibleIndex(5);
            assert.equal(valueChanged, 1, "value changed on time");
            assert.equal(commentChanged, 1, "comment changed on time");
            assert.equal(visibleChanged, 1, "visibiblity changed on time");
            assert.equal(visibleIndexChanged, 1, "visibleIndex changed on time");
        });
        QUnit.test("Init SelectBase with comment comment", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.data = { q: "other", "q-Comment": "aaaa" };
            survey.addNewPage("page1");
            var question = new Survey.QuestionSelectBase("q");
            question.choices = ["A", "B", "C", "D"];
            survey.pages[0].addQuestion(question);
            assert.equal(question.comment, "aaaa", "Set the initial comment");
        });
        QUnit.test("SelectBase store others value not in comment", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addNewPage("page1");
            var question = new Survey.QuestionSelectBase("q");
            question.choices = ["A", "B", "C", "D"];
            question.hasOther = true;
            survey.pages[0].addQuestion(question);
            survey.storeOthersAsComment = false;
            question.value = null;
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, {}, "There is no data in survey");
            question.value = "A";
            question.comment = "test";
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, { q: "A" }, "'A' is set");
            question.comment = null;
            question.value = question.otherItem.value;
            assert.equal(question.isOtherSelected, true, "Any other value that is not from choices is other");
            assert.deepEqual(survey.data, { q: question.otherItem.value }, "Other Item is set");
            question.comment = "commentTest";
            assert.equal(question.isOtherSelected, true, "Any other value that is not from choices is other");
            assert.deepEqual(survey.data, { q: "commentTest" }, "Other text is set");
            survey.setValue("q", "A");
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(question.value, "A", "'A' is set to the question");
            survey.setValue("q", "FF");
            assert.equal(question.isOtherSelected, true, "set other from survey");
            assert.equal(question.value, question.otherItem.value, "value is otherItem.value");
            question.value = "B";
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, { q: "B" }, "'B' is set");
        });
        QUnit.test("Checkbox store others value not in comment", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addNewPage("page1");
            var question = new Survey.QuestionCheckboxModel("q");
            question.choices = ["A", "B", "C", "D"];
            question.hasOther = true;
            survey.pages[0].addQuestion(question);
            survey.storeOthersAsComment = false;
            question.value = null;
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, {}, "There is no data in survey");
            question.value = ["A"];
            question.comment = "test";
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, { q: ["A"] }, "'A' is set");
            question.comment = null;
            question.value = ["A", question.otherItem.value];
            assert.equal(question.isOtherSelected, true, "Any other value that is not from choices is other");
            assert.deepEqual(survey.data, { q: ["A", question.otherItem.value] }, "Other Item is set");
            question.comment = "commentTest";
            assert.equal(question.isOtherSelected, true, "Any other value that is not from choices is other");
            assert.deepEqual(survey.data, { q: ["A", "commentTest"] }, "Other text is set");
            survey.setValue("q", ["A"]);
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(question.value, ["A"], "'A' is set to the question");
            survey.setValue("q", ["A", "FF"]);
            assert.equal(question.isOtherSelected, true, "set other from survey");
            assert.deepEqual(question.value, ["A", question.otherItem.value], "value is otherItem.value");
            question.value = ["A", "B"];
            assert.equal(question.isOtherSelected, false, "Others is not selected");
            assert.deepEqual(survey.data, { q: ["A", "B"] }, "'B' is set");
        });
        QUnit.test("Matrixdropdown cells tests", function (assert) {
            var question = new Survey.QuestionMatrixDropdownModel("matrixDropdown");
            question.rows = ["row1", "row2", "row3"];
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            question.choices = [1, 2, 3];
            question.columns[1].choices = [4, 5];
            question.value = { 'row2': { 'column1': 2 } };
            var visibleRows = question.visibleRows;
            assert.equal(visibleRows.length, 3, "There are three rows");
            assert.equal(visibleRows[0].cells.length, 2, "There are two cells in each row");
            assert.equal(visibleRows[2].cells.length, 2, "There are two cells in each row");
            var q1 = (visibleRows[0].cells[0].question);
            var q2 = (visibleRows[0].cells[1].question);
            assert.deepEqual(q1.choices, question.choices, "get choices from matrix");
            assert.deepEqual(q2.choices, question.columns[1].choices, "get choices from column");
            assert.equal(visibleRows[0].cells[1].value, null, "value is not set");
            assert.equal(visibleRows[1].cells[0].value, 2, "value was set");
            question.value = null;
            visibleRows[0].cells[1].value = 4;
            assert.deepEqual(question.value, { 'row1': { 'column2': 4 } }, "set the cell value correctly");
            visibleRows[0].cells[1].value = null;
            assert.deepEqual(question.value, null, "set to null if all cells are null");
        });
        QUnit.test("Matrixdynamic cells tests", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDynamic");
            question.rowCount = 3;
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            question.choices = [1, 2, 3];
            question.columns[1].choices = [4, 5];
            question.value = [{}, { 'column1': 2 }, {}];
            var visibleRows = question.visibleRows;
            assert.equal(visibleRows.length, 3, "There are three rows");
            assert.equal(visibleRows[0].cells.length, 2, "There are two cells in each row");
            assert.equal(visibleRows[2].cells.length, 2, "There are two cells in each row");
            var q1 = (visibleRows[0].cells[0].question);
            var q2 = (visibleRows[0].cells[1].question);
            assert.deepEqual(q1.choices, question.choices, "get choices from matrix");
            assert.deepEqual(q2.choices, question.columns[1].choices, "get choices from column");
            assert.equal(visibleRows[0].cells[1].value, null, "value is not set");
            assert.equal(visibleRows[1].cells[0].value, 2, "value was set");
            question.value = null;
            visibleRows[1].cells[1].value = 4;
            assert.deepEqual(question.value, [{}, { 'column2': 4 }, {}], "set the cell value correctly");
            visibleRows[1].cells[1].value = null;
            assert.deepEqual(question.value, null, "set to null if all cells are null");
        });
        QUnit.test("Matrixdropdown value tests after cells generation", function (assert) {
            var question = new Survey.QuestionMatrixDropdownModel("matrixDropdown");
            question.rows = ["row1", "row2", "row3"];
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            question.choices = [1, 2, 3];
            question.columns[1].choices = [4, 5];
            var visibleRows = question.visibleRows;
            question.value = { 'row2': { 'column1': 2 } };
            assert.equal(visibleRows[1].cells[0].value, 2, "value was set");
        });
        QUnit.test("Matrixdynamic value tests after cells generation", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDymanic");
            question.rowCount = 3;
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            question.choices = [1, 2, 3];
            question.columns[1].choices = [4, 5];
            var visibleRows = question.visibleRows;
            question.value = [{}, { 'column1': 2 }, {}];
            assert.equal(visibleRows[1].cells[0].value, 2, "value was set");
        });
        QUnit.test("Matrixdynamic add/remove rows", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDymanic");
            question.rowCount = 3;
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            question.value = [{}, { 'column1': 2 }, {}];
            question.removeRow(1);
            assert.equal(question.rowCount, 2, "one row is removed");
            assert.equal(question.value, null, "value is null now");
            question.addRow();
            assert.equal(question.rowCount, 3, "one row is added");
        });
        QUnit.test("Matrixdynamic required column", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDymanic");
            question.rowCount = 2;
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            question.columns.push(new Survey.MatrixDropdownColumn("column2"));
            var rows = question.visibleRows;
            assert.equal(question.hasErrors(), false, "No errors");
            question.columns[0].isRequired = true;
            var rows = question.visibleRows;
            assert.equal(question.hasErrors(), true, "column1 should not be empty. All rows are empty");
            question.value = [{ 'column1': 2 }, {}];
            assert.equal(question.hasErrors(), true, "column1 should not be empty. the second row is empty");
            question.value = [{ 'column1': 2 }, { 'column1': 3 }];
            assert.equal(question.hasErrors(), false, "column1 should not be empty. all values are set");
        });
        QUnit.test("Matrixdynamic hasOther column", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDymanic");
            question.choices = [1, 2, 3];
            question.rowCount = 1;
            question.columns.push(new Survey.MatrixDropdownColumn("column1"));
            var rows = question.visibleRows;
            assert.equal(question.hasErrors(), false, "Everything is fine so far");
            rows[0].cells[0].question.value = "other";
            assert.equal(question.hasErrors(), true, "Should set other value");
        });
        QUnit.test("Matrixdropdown different cell types", function (assert) {
            var question = new Survey.QuestionMatrixDropdownModel("matrixDropdown");
            question.columns.push(new Survey.MatrixDropdownColumn("dropdown"));
            question.columns.push(new Survey.MatrixDropdownColumn("checkbox"));
            question.columns.push(new Survey.MatrixDropdownColumn("radiogroup"));
            question.columns.push(new Survey.MatrixDropdownColumn("text"));
            question.columns.push(new Survey.MatrixDropdownColumn("comment"));
            for (var i = 0; i < question.columns.length; i++) {
                question.columns[i].cellType = question.columns[i].name;
            }
            question.rows = ["row1", "row2", "row3"];
            for (var i = 0; i < question.columns.length; i++) {
                var col = question.columns[i];
                var row = question.visibleRows[0];
                assert.equal(row.cells[i].question.getType(), col.name, "Expected " + col.name + ", but was" + row.cells[i].question.getType());
            }
        });
        QUnit.test("Matrixdropdown isRequiredInAllRows", function (assert) {
            var question = new Survey.QuestionMatrixDynamicModel("matrixDropdown");
            question.rowCount = 2;
            question.columns.push(new Survey.MatrixDropdownColumn("dropdown"));
            var rows = question.visibleRows;
            assert.equal(question.hasErrors(), false, "There is no errors in the matrix. Null is possible");
            assert.equal(rows[0].isEmpty, true, "There is no error in the first row");
            assert.equal(rows[1].isEmpty, true, "There is no error in the second row");
            question.minRowCount = 2;
            assert.equal(question.hasErrors(), true, "Error, value in all rows are required");
        });
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/jsonobject.ts" />
/// <reference path="../src/survey.ts" />
/// <reference path="../src/page.ts" />
/// <reference path="../src/question.ts" />
/// <reference path="../src/question_baseselect.ts" />
/// <reference path="../src/question_text.ts" />
/// <reference path="../src/question_multipletext.ts" />
/// <reference path="../src/question_checkbox.ts" />
/// <reference path="../src/questionfactory.ts" />
var Survey;
(function (Survey) {
    var SerializationTests;
    (function (SerializationTests) {
        QUnit.module("SurveySerialization");
        QUnit.test("Serialize two pages", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addNewPage("Page 1");
            survey.addNewPage("Page 2");
            var jsObj = new Survey.JsonObject().toJsonObject(survey);
            assert.equal(JSON.stringify(jsObj), "{\"pages\":[{\"name\":\"Page 1\"},{\"name\":\"Page 2\"}]}", "serialize two pages");
        });
        QUnit.test("Deserialize two pages", function (assert) {
            var survey = new Survey.SurveyModel();
            new Survey.JsonObject().toObject({ "pages": [{ "name": "Page1" }, { "name": "Page2" }] }, survey);
            assert.equal(survey.pages.length, 2, "Two pages from json");
            assert.equal(survey.pages[0].name, "Page1", "property name is set");
            assert.equal(survey.pages[0].data, survey, "data interface is set");
            assert.equal(survey.pages[1].getType(), "page", "it is a live object");
        });
        QUnit.test("Serialize two questions", function (assert) {
            var page = new Survey.PageModel("Page1");
            var textQuestion = new Survey.QuestionTextModel("textQuestion");
            textQuestion.isRequired = true;
            var checkBoxQuestion = new Survey.QuestionCheckboxModel("checkboxQuestion");
            checkBoxQuestion.choices = ["red", "white"];
            checkBoxQuestion.isRequired = true;
            checkBoxQuestion.hasComment = true;
            page.addQuestion(textQuestion);
            page.addQuestion(checkBoxQuestion);
            var jsObj = new Survey.JsonObject().toJsonObject(page);
            assert.equal(JSON.stringify(jsObj), "{\"name\":\"Page1\",\"questions\":[{\"type\":\"text\",\"name\":\"textQuestion\",\"isRequired\":true},{\"type\":\"checkbox\",\"name\":\"checkboxQuestion\",\"isRequired\":true,\"hasComment\":true,\"choices\":[\"red\",\"white\"]}]}", "serialize two questions");
        });
        QUnit.test("Deserialize two questions", function (assert) {
            var survey = new Survey.SurveyModel();
            var page = new Survey.PageModel("Page1");
            survey.addPage(page);
            new Survey.JsonObject().toObject({
                "questions": [{ "type": "text", "name": "textQuestion", "isRequired": "true" }, { "type": "checkbox", "name": "checkboxQuestion", "isRequired": "true", "choices": ["red", "white"] }]
            }, page);
            var checkbox = page.questions[1];
            assert.equal(page.questions.length, 2, "Two questions from json");
            assert.equal(page.questions[0].name, "textQuestion", "property name is set");
            assert.equal(page.questions[1].getType(), "checkbox", "it is a live object");
            assert.equal(checkbox.choices.length, 2, "property choices is set correctly: length");
            assert.equal(checkbox.choices[0].value, "red", "property choices is set correctly: value");
            assert.equal(checkbox.choices[0].text, "red", "property choices is set correctly: text");
            assert.equal(checkbox.choices[1].value, "white", "property choices is set correctly: value");
            assert.equal(checkbox.choices[1].text, "white", "property choices is set correctly: text");
            survey.setValue("textQuestion", "newValue");
            assert.equal(page.questions[0].value, "newValue", "data interface is working");
        });
        QUnit.test("Full survey deserialize with one question", function (assert) {
            var survey = new Survey.SurveyModel();
            new Survey.JsonObject().toObject({ pages: [{ "name": "page1",
                        "questions": [{ "type": "text", "name": "textQuestion", "isRequired": "true" }, { "type": "checkbox", "name": "checkboxQuestion", "isRequired": "true", "choices": ["red", "white"] }]
                    }] }, survey);
            survey.setValue("textQuestion", "newValue");
            assert.equal(survey.pages[0].questions[0].value, "newValue", "data interface is working");
        });
        QUnit.test("Full survey deserialize with one question bypass pages object", function (assert) {
            var survey = new Survey.SurveyModel();
            new Survey.JsonObject().toObject({
                questions: [{ "type": "text", "name": "textQuestion", "isRequired": "true" }, { "type": "checkbox", "name": "checkboxQuestion", "isRequired": "true", "choices": ["red", "white"] }]
            }, survey);
            survey.setValue("textQuestion", "newValue");
            assert.equal(survey.pages[0].questions[0].value, "newValue", "data interface is working");
        });
        QUnit.test("Serialize survey data", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.setValue("question1", "value1");
            survey.setValue("question2", true);
            survey.setValue("question3", ["red", "white"]);
            var data = survey.data;
            var expectedData = { "question1": "value1", "question2": true, "question3": ["red", "white"] };
            assert.deepEqual(data, expectedData, "check if get data works correctly");
        });
        QUnit.test("Deserialize survey data", function (assert) {
            var survey = new Survey.SurveyModel();
            var data = { "question1": "value1", "question2": true, "question3": ["red", "white"] };
            survey.data = data;
            assert.equal(survey.getValue("question1"), "value1", "survey data for question 1");
            assert.equal(survey.getValue("question2"), true, "survey data for question 2");
            assert.deepEqual(survey.getValue("question3"), ["red", "white"], "survey data for question 3");
        });
        QUnit.test("Serialize mutltiple text question", function (assert) {
            var mtQuestion = new Survey.QuestionMultipleTextModel("q1");
            mtQuestion.items.push(new Survey.MultipleTextItemModel("item1"));
            mtQuestion.items.push(new Survey.MultipleTextItemModel("item2", "text2"));
            var jsObj = new Survey.JsonObject().toJsonObject(mtQuestion);
            assert.equal(JSON.stringify(jsObj), "{\"name\":\"q1\",\"items\":[{\"name\":\"item1\"},{\"name\":\"item2\",\"title\":\"text2\"}]}", "serialize multiple text question");
        });
        QUnit.test("Serialize restfull choices", function (assert) {
            var question = new Survey.QuestionDropdownModel("q1");
            question.choicesByUrl.path = "name";
            var jsObj = new Survey.JsonObject().toJsonObject(question);
            assert.equal(JSON.stringify(jsObj), "{\"name\":\"q1\",\"choicesByUrl\":{\"path\":\"name\"}}", "serialize choicesByUrl");
        });
        QUnit.test("Deserialize question with missing name", function (assert) {
            var survey = new Survey.SurveyModel();
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({
                questions: [{ "type": "text", "isRequired": "true" }]
            }, survey);
            assert.equal(survey.pages[0].questions.length, 1, "one question is deserialize.");
            assert.equal(jsonObj.errors.length, 1, "one serialization error");
            assert.equal(jsonObj.errors[0].type, "requiredproperty", "The required property error");
        });
        QUnit.test("Deserialize choicesByUrl", function (assert) {
            var question = new Survey.QuestionDropdownModel("q1");
            assert.equal(question.choicesByUrl.isEmpty, true, "It is created, but no data");
            var jsonObj = new Survey.JsonObject();
            jsonObj.toObject({ type: "dropdown", name: "country", choicesByUrl: { url: 'http://services.groupkt.com/country/get/all', path: 'RestResponse;result' } }, question);
            assert.equal(question.choicesByUrl.getType(), "choicesByUrl", "It is the real object");
            assert.equal(question.choicesByUrl.isEmpty, false, "There are data");
            assert.equal(question.choicesByUrl.path, 'RestResponse;result', "data is copied correctly");
        });
    })(SerializationTests = Survey.SerializationTests || (Survey.SerializationTests = {}));
})(Survey || (Survey = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../src/survey.ts" />
/// <reference path="../src/page.ts" />
/// <reference path="../src/question.ts" />
/// <reference path="../src/question_baseselect.ts" />
/// <reference path="../src/question_checkbox.ts" />
/// <reference path="../src/question_matrix.ts" />
/// <reference path="../src/question_html.ts" />
/// <reference path="../src/question_file.ts" />
/// <reference path="../src/questionfactory.ts" />
/// <reference path="../src/trigger.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Survey");
        QUnit.test("set data property", function (assert) {
            var survey = new Survey.SurveyModel();
            assert.deepEqual(survey.data, {}, "there is no data");
            survey.data = { strVal: 'item1', intVal: 5 };
            assert.deepEqual(survey.data, { strVal: 'item1', intVal: 5 }, "set the object");
            survey.data = null;
            assert.deepEqual(survey.data, {}, "clear data");
        });
        QUnit.test("Add two pages", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addPage(new Survey.PageModel("Page 1"));
            survey.addPage(new Survey.PageModel("Page 2"));
            assert.equal(survey.PageCount, 2, "Two pages");
        });
        QUnit.test("Current Page", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addPage(createPageWithQuestion("Page 1"));
            assert.equal(survey.currentPage, survey.pages[0], "the first page is  current");
            survey.currentPage = null;
            assert.equal(survey.currentPage, survey.pages[0], "can't set curent page to null");
            var sPage = createPageWithQuestion("new Page");
            survey.addPage(sPage);
            survey.currentPage = sPage;
            assert.equal(survey.currentPage, survey.pages[1], "second page is current");
            survey.pages.pop();
            assert.equal(survey.currentPage, survey.pages[0], "the first page is current after removing the current one");
        });
        QUnit.test("Remove Page", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.mode = "designer";
            survey.addPage(new Survey.PageModel("Page 1"));
            survey.addPage(new Survey.PageModel("Page 2"));
            assert.equal(survey.PageCount, 2, "Two pages");
            assert.equal(survey.currentPage.name, "Page 1", "the first page is  current");
            survey.removePage(survey.pages[0]);
            assert.equal(survey.PageCount, 1, "One page left");
            assert.equal(survey.currentPage.name, "Page 2", "the second page is  current");
        });
        QUnit.test("Next, Prev, IsFirst and IsLast Page and progressText", function (assert) {
            var survey = new Survey.SurveyModel();
            assert.equal(survey.progressText, "", "there is pages");
            survey.addPage(createPageWithQuestion("Page 1"));
            survey.addPage(createPageWithQuestion("Second page"));
            survey.addPage(createPageWithQuestion("Third page"));
            assert.equal(survey.currentPage, survey.pages[0], "Current Page is  First");
            assert.equal(survey.isFirstPage, true, "Current Page is  First");
            assert.equal(survey.isLastPage, false, "Current Page is  First");
            assert.equal(survey.progressText, "Page 1 of 3", "Current Page is  First");
            survey.nextPage();
            assert.equal(survey.currentPage, survey.pages[1], "Current Page is  Second");
            assert.equal(survey.isFirstPage, false, "Current Page is  Second");
            assert.equal(survey.isLastPage, false, "Current Page is  Second");
            assert.equal(survey.progressText, "Page 2 of 3", "Current Page is  First");
            survey.nextPage();
            assert.equal(survey.currentPage, survey.pages[2], "Current Page is  Third");
            assert.equal(survey.isFirstPage, false, "Current Page is  Third");
            assert.equal(survey.isLastPage, true, "Current Page is  Third");
            assert.equal(survey.progressText, "Page 3 of 3", "Current Page is  First");
            survey.prevPage();
            assert.equal(survey.currentPage, survey.pages[1], "Current Page is  Second");
            assert.equal(survey.isFirstPage, false, "Current Page is  Second");
            assert.equal(survey.isLastPage, false, "Current Page is  Second");
            assert.equal(survey.progressText, "Page 2 of 3", "Current Page is  First");
            survey.prevPage();
            assert.equal(survey.currentPage, survey.pages[0], "Current Page is  First");
            assert.equal(survey.isFirstPage, true, "Current Page is  First");
            assert.equal(survey.isLastPage, false, "Current Page is  First");
            assert.equal(survey.progressText, "Page 1 of 3", "Current Page is  First");
        });
        QUnit.test("Next, Prev, Next", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addPage(createPageWithQuestion("Page 1"));
            survey.addPage(createPageWithQuestion("Page 2"));
            survey.addPage(createPageWithQuestion("Page 3"));
            assert.equal(survey.currentPage, survey.pages[0], "Initial page is  first");
            survey.nextPage();
            assert.equal(survey.currentPage, survey.pages[1], "After next the current page is  second");
            survey.prevPage();
            assert.equal(survey.currentPage, survey.pages[0], "After the prev the current page is again first");
            survey.nextPage();
            assert.equal(survey.currentPage, survey.pages[1], "After second next the current page is  second");
        });
        QUnit.test("Survey state", function (assert) {
            var survey = new Survey.SurveyModel();
            assert.equal(survey.state, "empty", "There is no a visible page");
            survey.addPage(createPageWithQuestion("Page 1"));
            survey.addPage(createPageWithQuestion("Page 2"));
            assert.equal(survey.state, "running", "Survey is in run mode");
            survey.nextPage();
            assert.equal(survey.state, "running", "Survey is in run mode");
            survey.completeLastPage();
            assert.equal(survey.state, "completed", "Survey is completed");
        });
        QUnit.test("Question Creator", function (assert) {
            var inst = Survey.QuestionFactory.Instance;
            inst.registerQuestion("question1", function (name) { return new Survey.Question(name); });
            inst.registerQuestion("question2", function (name) { return new Survey.Question(name); });
            assert.equal(inst.createQuestion("question1", "Q1").name, "Q1", "Create first type of question");
            assert.equal(inst.createQuestion("question2", "Q2").name, "Q2", "Create second type of question");
            assert.equal(inst.createQuestion("question3", "Q3"), null, "Create unexisting type of question");
        });
        QUnit.test("Question Creator getAllQuestions", function (assert) {
            var inst = Survey.QuestionFactory.Instance;
            inst.registerQuestion("question3", function (name) { return new Survey.Question(name); });
            inst.registerQuestion("question4", function (name) { return new Survey.Question(name); });
            var names = inst.getAllTypes();
            assert.ok(names.indexOf("question3") > -1, "contains a new type");
        });
        QUnit.test("Add questions to page", function (assert) {
            var page = new Survey.PageModel("Page 1");
            page.addNewQuestion("text", "Q1");
            page.addNewQuestion("checkbox", "Q2");
            assert.equal(page.questions.length, 2, "Two questions");
            assert.equal(page.questions[0].getType(), "text", "Text question");
            assert.equal(page.questions[1].getType(), "checkbox", "Checkbox question");
        });
        QUnit.test("Survey.getQuestionByName", function (assert) {
            var survey = new Survey.SurveyModel();
            var page = survey.addNewPage("Page 1");
            page.addNewQuestion("text", "Q1");
            page.addNewQuestion("checkbox", "Q2");
            page = survey.addNewPage("Page 1");
            page.addNewQuestion("text", "Q3");
            page.addNewQuestion("checkbox", "Q4");
            assert.equal(survey.getQuestionByName("Q2").name, "Q2", "find question on the first page");
            assert.equal(survey.getQuestionByName("Q3").name, "Q3", "find question on the second page");
            assert.equal(survey.getQuestionByName("Q0"), null, "return null");
        });
        QUnit.test("SurveyData interface implementation", function (assert) {
            var surveyData;
            surveyData = new Survey.SurveyModel();
            assert.equal(surveyData.getValue("test1"), null, "No data");
            assert.equal(surveyData.getValue("test2"), null, "No data");
            surveyData.setValue("test1", 1);
            surveyData.setValue("test2", "1");
            assert.equal(surveyData.getValue("test1"), 1, "Has value 1");
            assert.equal(surveyData.getValue("test2"), "1", "Has value '1'");
        });
        QUnit.test("Store question value in the survey", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addPage(new Survey.PageModel("Page 1"));
            var question = survey.pages[0].addNewQuestion("text", "question");
            assert.equal(survey.getValue("question"), null, "No value");
            assert.equal(question.value, null, "No value");
            question.value = "mytext";
            assert.equal(survey.getValue("question"), "mytext", "set value from question");
            assert.equal(question.value, "mytext", "set value from question");
            survey.setValue("question", "myNewtext");
            assert.equal(survey.getValue("question"), "myNewtext", "set value from survey");
            assert.equal(question.value, "myNewtext", "set value from survey");
        });
        QUnit.test("Store comments in the survey", function (assert) {
            var survey = new Survey.SurveyModel();
            survey.addPage(new Survey.PageModel("Page 1"));
            var question = survey.pages[0].addNewQuestion("text", "question");
            assert.equal(survey.getComment("question"), "", "Comment is empty");
            assert.equal(question.comment, "", "Comment is empty");
            question.comment = "myComment";
            assert.equal(survey.getComment("question"), "myComment", "set comment from question");
            assert.equal(question.comment, "myComment", "set comment from question");
            survey.setComment("question", "myNewComment");
            assert.equal(survey.getComment("question"), "myNewComment", "set comment from survey");
            assert.equal(question.comment, "myNewComment", "set comment from survey");
        });
        QUnit.test("Should set required questions before go on the  next page or finish", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.notEqual(survey, null, "Survey is not  null");
            survey.pages[0].questions[0].isRequired = true;
            survey.pages[1].questions[0].isRequired = true;
            assert.equal(survey.nextPage(), false, "Can not go to the next page");
            assert.equal(survey.pages[0].questions[0].hasErrors(), true, "The question is not filled out.");
            assert.equal(survey.pages[0].hasErrors(), true, "The page is not filled out.");
            survey.pages[0].questions[0].value = "Test";
            assert.equal(survey.nextPage(), true, "Can go to the next page");
            assert.equal(survey.pages[0].questions[0].hasErrors(), false, "The question is filled out.");
            assert.equal(survey.pages[0].hasErrors(), false, "The page is filled out.");
        });
        QUnit.test("Invisible required questions should not be take into account", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.notEqual(survey, null, "Survey is not  null");
            survey.pages[0].questions[0].isRequired = true;
            assert.equal(survey.nextPage(), false, "Can not go to the next page");
            survey.pages[0].questions[0].visible = false;
            assert.equal(survey.nextPage(), true, "You can go to the next page now.");
        });
        QUnit.test("onValueChanged event", function (assert) {
            var survey = twoPageSimplestSurvey();
            var name = "";
            var newValue = null;
            var counter = 0;
            survey.onValueChanged.add(function (sender, options) {
                name = options.name;
                newValue = options.value;
                counter++;
            });
            survey.setValue("question1", "value1");
            assert.equal(name, "question1", "onValueChanged event, property name is correct");
            assert.equal(newValue, "value1", "onValueChanged event, property newValue is correct");
            assert.equal(counter, 1, "onValueChanged event is called one time");
            survey.pages[0].questions[0].value = "val";
            assert.equal(counter, 2, "onValueChanged event is called one time");
        });
        QUnit.test("onValueChanged event - do not call on equal value", function (assert) {
            var survey = new Survey.SurveyModel();
            var counter = 0;
            survey.onValueChanged.add(function (sender, options) { counter++; });
            survey.setValue("name", 1);
            assert.equal(counter, 1, "onValueChanged event is called one time");
            survey.setValue("name", 1);
            assert.equal(counter, 1, "1 is the same value");
            survey.setValue("name", { col1: [1, { cel2: "2" }] });
            assert.equal(counter, 2, "onValueChanged event is called two times");
            survey.setValue("name", { col1: [1, { cel2: "2" }] });
            assert.equal(counter, 2, "2, the value is the same");
            survey.setValue("name", { col1: [1, { cel2: "2" }, 3] });
            assert.equal(counter, 3, "onValueChanged event is called three times");
            survey.setValue("name", { col1: [1, { cel2: "2" }, 3] });
            assert.equal(counter, 3, "3, the value is the same");
            var value = survey.getValue("name");
            value.col1.push(4);
            survey.setValue("name", value);
            assert.equal(counter, 4, "onValueChanged event is called fourth times");
        });
        QUnit.test("onValueChanged event is not called on changing matrix value", function (assert) {
            var survey = twoPageSimplestSurvey();
            var matrixQuestion = new Survey.QuestionMatrixModel("matrix");
            survey.pages[0].addQuestion(matrixQuestion);
            matrixQuestion.columns = ["col1", "col2"];
            matrixQuestion.rows = ["row1", "row2"];
            var name = "";
            var newValue = null;
            var counter = 0;
            survey.onValueChanged.add(function (sender, options) {
                name = options.name;
                newValue = options.value;
                counter++;
            });
            matrixQuestion.visibleRows[0].value = "col2";
            assert.equal(counter, 1, "onValueChanged event is called one time");
            assert.equal(name, "matrix", "onValueChanged event, property name is correct");
            assert.deepEqual(newValue, { "row1": "col2" }, "onValueChanged event, property newValue is correct");
        });
        QUnit.test("onValueChanged event is not called on changing multi text value", function (assert) {
            var survey = twoPageSimplestSurvey();
            var multiTextQuestion = new Survey.QuestionMultipleTextModel("multitext");
            survey.pages[0].addQuestion(multiTextQuestion);
            multiTextQuestion.items.push(new Survey.MultipleTextItemModel("item1"));
            multiTextQuestion.items.push(new Survey.MultipleTextItemModel("item2"));
            var name = "";
            var newValue = null;
            var counter = 0;
            survey.onValueChanged.add(function (sender, options) {
                name = options.name;
                newValue = options.value;
                counter++;
            });
            multiTextQuestion.items[1].value = "text1";
            assert.equal(counter, 1, "onValueChanged event is called one time");
            assert.equal(name, "multitext", "onValueChanged event, property name is correct");
            assert.deepEqual(newValue, { "item2": "text1" }, "onValueChanged event, property newValue is correct");
        });
        QUnit.test("onVisibleChanged event", function (assert) {
            var survey = twoPageSimplestSurvey();
            var name = "";
            var visibility = true;
            var counter = 0;
            survey.onVisibleChanged.add(function (sender, options) {
                name = options.name;
                visibility = options.visible;
                counter++;
            });
            survey.getQuestionByName("question1").visible = false;
            assert.equal(name, "question1", "onVisibleChanged event, property name is correct");
            assert.equal(visibility, false, "onVisibleChanged event, property visibility is correct");
            assert.equal(counter, 1, "onVisibleChanged event is called one time");
            survey.getQuestionByName("question1").visible = true;
            assert.equal(name, "question1", "onVisibleChanged event, property name is correct");
            assert.equal(visibility, true, "onVisibleChanged event, property visibility is correct");
            assert.equal(counter, 2, "onVisibleChanged event is called two time");
            survey.getQuestionByName("question1").visible = true;
            assert.equal(counter, 2, "onVisibleChanged event is called two time");
        });
        QUnit.test("Question visibleIndex", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.equal(survey.getQuestionByName("question1").visibleIndex, 0, "the first question");
            assert.equal(survey.getQuestionByName("question3").visibleIndex, 2, "the third question");
            survey.getQuestionByName("question1").visible = false;
            assert.equal(survey.getQuestionByName("question3").visibleIndex, 1, "the third question is now visible as second");
            survey.showQuestionNumbers = "off";
            assert.equal(survey.getQuestionByName("question1").visibleIndex, -1, "off:the first question");
            assert.equal(survey.getQuestionByName("question2").visibleIndex, -1, "off:the second question");
            assert.equal(survey.getQuestionByName("question3").visibleIndex, -1, "off:the third question");
            survey.showQuestionNumbers = "onPage";
            assert.equal(survey.getQuestionByName("question1").visibleIndex, -1, "onPage:the first question");
            assert.equal(survey.getQuestionByName("question2").visibleIndex, 0, "onPage:the second question");
            assert.equal(survey.getQuestionByName("question3").visibleIndex, 0, "onPage:the third question");
        });
        QUnit.test("showQuestionNumbers - question fullTitle", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.equal(survey.getQuestionByName("question1").fullTitle, "1. question1", "the first question showQuestionNumbers=on");
            assert.equal(survey.getQuestionByName("question3").fullTitle, "3. question3", "the thrid question showQuestionNumbers=on");
            survey.showQuestionNumbers = "onPage";
            assert.equal(survey.getQuestionByName("question1").fullTitle, "1. question1", "the first question showQuestionNumbers=onPage");
            assert.equal(survey.getQuestionByName("question3").fullTitle, "1. question3", "the thrid question showQuestionNumbers=onPage");
            survey.showQuestionNumbers = "off";
            assert.equal(survey.getQuestionByName("question1").fullTitle, "question1", "the first question showQuestionNumbers=onPage");
            assert.equal(survey.getQuestionByName("question3").fullTitle, "question3", "the thrid question showQuestionNumbers=onPage");
        });
        QUnit.test("Question visibleIndex and no title question", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.equal(survey.getQuestionByName("question1").visibleIndex, 0, "the first question");
            assert.equal(survey.getQuestionByName("question3").visibleIndex, 2, "the third question");
            var question = new Survey.QuestionHtmlModel("html1");
            survey.pages[0].addQuestion(question, 0);
            assert.equal(survey.getQuestionByName("html1").visibleIndex, -1, "html question");
            assert.equal(survey.getQuestionByName("question1").visibleIndex, 0, "the first question + html question");
            assert.equal(survey.getQuestionByName("question3").visibleIndex, 2, "the third question + html question");
        });
        QUnit.test("Pages visibleIndex and num", function (assert) {
            var survey = twoPageSimplestSurvey();
            survey.addNewPage("page 3").addNewQuestion("text", "q4");
            assert.equal(survey.pages[0].visibleIndex, 0, "start:page 1");
            assert.equal(survey.pages[1].visibleIndex, 1, "start:page 2");
            assert.equal(survey.pages[2].visibleIndex, 2, "start:page 3");
            assert.equal(survey.pages[0].num, -1, "start:page 1, num");
            assert.equal(survey.pages[1].num, -1, "start:page 2, num");
            assert.equal(survey.pages[2].num, -1, "start:page 3, num");
            survey.showPageNumbers = true;
            assert.equal(survey.pages[0].num, 1, "showPageNumbers:page 1, num");
            assert.equal(survey.pages[1].num, 2, "showPageNumbers:page 2, num");
            assert.equal(survey.pages[2].num, 3, "showPageNumbers:page 3, num");
            survey.pages[0].visible = false;
            assert.equal(survey.pages[0].visibleIndex, -1, "page[0].visible=false:page 1");
            assert.equal(survey.pages[1].visibleIndex, 0, "page[0].visible=false:page 2");
            assert.equal(survey.pages[2].visibleIndex, 1, "page[0].visible=false:page 3");
            assert.equal(survey.pages[0].num, -1, "page[0].visible=false:page 1, num");
            assert.equal(survey.pages[1].num, 1, "page[0].visible=false:page 2, num");
            assert.equal(survey.pages[2].num, 2, "page[0].visible=false:page 3, num");
        });
        QUnit.test("Pages num", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.equal(survey.pages[0].num, -1, "false:the first page");
            assert.equal(survey.pages[1].num, -1, "false:the second page");
            survey.showPageNumbers = true;
            assert.equal(survey.pages[0].num, 1, "true:the first page");
            assert.equal(survey.pages[1].num, 2, "true:the second page");
        });
        QUnit.test("onVisibleChanged event", function (assert) {
            var survey = twoPageSimplestSurvey();
            survey.onValidateQuestion.add(function (sender, options) {
                if (options.name == "question1" && options.value > 100) {
                    options.error = "Question 1 should be higher than 100";
                }
            });
            assert.equal(survey.isCurrentPageHasErrors, false, "There is no error if the value is empty");
            survey.setValue("question1", 1);
            assert.equal(survey.isCurrentPageHasErrors, false, "the value is less than 100");
            survey.setValue("question1", 101);
            assert.equal(survey.isCurrentPageHasErrors, true, "the value is more than 100, no errors");
        });
        QUnit.test("Page visibility", function (assert) {
            var page = new Survey.PageModel("page");
            assert.equal(page.isVisible, false, "page is invisible if there is no questions in it");
            page.addNewQuestion("text", "q1");
            assert.equal(page.isVisible, true, "there is one question");
            page.visible = false;
            assert.equal(page.isVisible, false, "we made the page invisible");
            page.visible = true;
            assert.equal(page.isVisible, true, "we made the page visible");
            page.questions[0].visible = false;
            assert.equal(page.isVisible, false, "there is no visible questions on the page");
            page.questions[0].visible = true;
            assert.equal(page.isVisible, true, "we have made the question visible again");
        });
        QUnit.test("Survey visiblePages and start using them", function (assert) {
            var survey = twoPageSimplestSurvey();
            assert.equal(survey.visiblePages.length, 2, "All pages are visible");
            assert.equal(survey.currentPage.name, "Page 1", "the first page is current");
            survey.pages[0].visible = false;
            assert.equal(survey.visiblePages.length, 1, "The first page becomes invisible");
            assert.equal(survey.currentPage.name, "Page 2", "the second page is current, because the first is invisible");
        });
        QUnit.test("Survey visiblePages, make second and third invisbile and go the last page on next", function (assert) {
            var survey = twoPageSimplestSurvey();
            survey.currentPage = survey.pages[0];
            survey.addNewPage("Page 3").addNewQuestion("text", "p3q1");
            survey.addNewPage("Page 4").addNewQuestion("text", "p4q1");
            survey.pages[1].visible = false;
            survey.pages[2].questions[0].visible = false;
            survey.nextPage();
            assert.equal(survey.currentPage.name, "Page 4", "Bypass two invisible pages");
        });
        QUnit.test("Visible trigger test", function (assert) {
            var survey = twoPageSimplestSurvey();
            var trigger = new Survey.SurveyTriggerVisible();
            survey.triggers.push(trigger);
            trigger.name = "question1";
            trigger.value = "Hello";
            trigger.pages = ["Page 2"];
            trigger.questions = ["question2"];
            survey.setValue("question1", "H");
            assert.equal(survey.getQuestionByName("question2").visible, false, "It is invisible now");
            assert.equal(survey.pages[1].visible, false, "It is invisible now");
            survey.setValue("question1", "Hello");
            assert.equal(survey.getQuestionByName("question2").visible, true, "trigger makes it visible");
            assert.equal(survey.pages[1].visible, true, "trigger makes it visible");
            survey.setValue("question2", "He");
            assert.equal(survey.getQuestionByName("question2").visible, true, "trigger should not be called");
            assert.equal(survey.pages[1].visible, true, "trigger should not be called");
        });
        QUnit.test("Complete trigger test", function (assert) {
            var survey = twoPageSimplestSurvey();
            var trigger = new Survey.SurveyTriggerComplete();
            survey.triggers.push(trigger);
            trigger.name = "question1";
            trigger.value = "Hello";
            survey.setValue("question1", "H");
            assert.equal(survey.state, "running");
            survey.setValue("question1", "Hello");
            assert.equal(survey.state, "running");
            survey.nextPage();
            assert.equal(survey.state, "completed");
        });
        QUnit.test("Value trigger test", function (assert) {
            var survey = twoPageSimplestSurvey();
            var trigger = new Survey.SurveyTriggerSetValue();
            survey.triggers.push(trigger);
            trigger.name = "question1";
            trigger.value = "Hello";
            trigger.setToName = "name1";
            trigger.setValue = "val1";
            assert.equal(survey.getValue("name1"), null, "value is not set");
            survey.setValue("question1", "Hello");
            assert.equal(survey.getValue("name1"), "val1", "value is set");
        });
        QUnit.test("String format", function (assert) {
            var strResult = Survey.surveyLocalization.getString("textMinLength")["format"](10);
            assert.equal(strResult, "Please enter at least 10 symbols.", "The format string is working");
        });
        QUnit.test("Serialize email validator", function (assert) {
            var validator = new Survey.EmailValidator();
            var json = new Survey.JsonObject().toJsonObject(validator);
            assert.ok(json, "Convert to Json Successful");
            var newValidator = {};
            new Survey.JsonObject().toObject(json, newValidator);
            assert.ok(newValidator, "Convert from Json Successful");
        });
        QUnit.test("pre process title", function (assert) {
            var survey = twoPageSimplestSurvey();
            survey.pages[0].title = "Page {PageNo} from {PageCount}.";
            assert.equal(survey.pages[0].processedTitle, "Page 1 from 2.");
            survey.pages[0].addNewQuestion("text", "email");
            survey.setValue("email", "andrew.telnov@gmail.com");
            survey.setVariable("var1", "[it is var1]");
            survey.setValue("val1", "[it is val1]");
            survey.completedHtml = "<div>Your e-mail: <b>{email}</b>{var1}{val1}</div>";
            assert.equal(survey.processedCompletedHtml, "<div>Your e-mail: <b>andrew.telnov@gmail.com</b>[it is var1][it is val1]</div>");
        });
        QUnit.test("question fullTitle", function (assert) {
            var survey = twoPageSimplestSurvey();
            var question = survey.pages[0].questions[1];
            question.title = "My Title";
            assert.equal(question.fullTitle, "2. My Title");
            question.isRequired = true;
            assert.equal(question.fullTitle, "2. * My Title");
            survey.questionStartIndex = "100";
            assert.equal(question.fullTitle, "101. * My Title");
            survey.questionStartIndex = "A";
            assert.equal(question.fullTitle, "B. * My Title");
            survey.questionTitleTemplate = "{no}) {title} ({require})";
            assert.equal(question.fullTitle, "B) My Title (*)");
        });
        QUnit.test("clearInvisibleValues", function (assert) {
            var survey = twoPageSimplestSurvey();
            survey.clearInvisibleValues = true;
            var question1 = survey.pages[0].questions[0];
            question1.value = "myValue";
            var question2 = survey.pages[0].questions[1];
            question2.value = "myValue";
            question1.visible = false;
            survey.doComplete();
            assert.equal(question1.value, null, "Clear value of an invisible question");
            assert.equal(question2.value, "myValue", "Keep value of a visible question");
        });
        QUnit.test("merge values", function (assert) {
            var MySurvey = (function (_super) {
                __extends(MySurvey, _super);
                function MySurvey() {
                    _super.call(this);
                }
                MySurvey.prototype.doMergeValues = function (src, dest) {
                    _super.prototype.mergeValues.call(this, src, dest);
                };
                return MySurvey;
            }(Survey.SurveyModel));
            var survey = new MySurvey();
            var dest = {};
            survey.doMergeValues({ val: 1 }, dest);
            assert.deepEqual(dest, { val: 1 });
            survey.doMergeValues({ val2: { val1: "str" } }, dest);
            assert.deepEqual({ val: 1, val2: { val1: "str" } }, dest);
            survey.doMergeValues({ val2: { val2: 2 } }, dest);
            assert.deepEqual({ val: 1, val2: { val1: "str", val2: 2 } }, dest);
        });
        QUnit.test("Several questions in one row", function (assert) {
            var page = new Survey.PageModel();
            for (var i = 0; i < 10; i++) {
                page.addQuestion(new Survey.QuestionTextModel("q" + (i + 1)));
            }
            assert.equal(page.rows.length, 10, "10 rows for each question");
            page.questions[0].startWithNewLine = false;
            assert.equal(page.rows.length, 10, "still 10 rows for each question");
            assert.equal(page.rows[0].questions[0].renderWidth, "100%", "the render width is 100%");
            for (var i = 0; i < 10; i++) {
                page.questions[i].startWithNewLine = i % 2 == 0;
            }
            assert.equal(page.rows.length, 10, "every second has startWithNewLine equals false, still 10 row");
            for (var i = 0; i < 10; i++) {
                assert.equal(page.rows[i].questions.length, i % 2 == 0 ? 2 : 0, "every second row has two question and another 0");
                assert.equal(page.rows[i].visible, i % 2 == 0 ? true : false, "every second row is visible");
                if (i % 2 == 0) {
                    assert.equal(page.rows[i].questions[0].renderWidth, "50%", "the render width is 50%");
                    assert.equal(page.rows[i].questions[0].rightIndent, 1, "the indent is 1");
                    assert.equal(page.rows[i].questions[1].renderWidth, "50%", "the render width is 50%");
                    assert.equal(page.rows[i].questions[1].rightIndent, 0, "the indent is 0");
                }
            }
        });
        QUnit.test("test goNextPageAutomatic property", function (assert) {
            var survey = twoPageSimplestSurvey();
            var dropDownQ = survey.pages[1].addNewQuestion("dropdown", "question5");
            dropDownQ.choices = [1, 2, 3];
            dropDownQ.hasOther = true;
            survey.goNextPageAutomatic = true;
            assert.equal(survey.currentPage.name, survey.pages[0].name, "the first page is default page");
            survey.setValue("question1", 1);
            survey.setValue("question2", 2);
            assert.equal(survey.currentPage.name, survey.pages[1].name, "go to the second page automatically");
            survey.currentPage.questions[0].value = "3";
            survey.currentPage.questions[1].value = "4";
            dropDownQ.value = dropDownQ.otherItem.value;
            assert.equal(survey.currentPage.name, survey.pages[1].name, "stay on the second page");
            assert.notEqual(survey.state, "completed", "survey is still running");
            dropDownQ.comment = "other value";
            assert.equal(survey.state, "completed", "complete the survey");
        });
        QUnit.test("test goNextPageAutomatic property", function (assert) {
            var survey = twoPageSimplestSurvey();
            var dropDownQ = survey.pages[1].addNewQuestion("dropdown", "question5");
            dropDownQ.choices = [1, 2, 3];
            dropDownQ.hasOther = true;
            survey.goNextPageAutomatic = true;
            assert.equal(survey.currentPage.name, survey.pages[0].name, "the first page is default page");
            survey.setValue("question1", 1);
            survey.setValue("question2", 2);
            assert.equal(survey.currentPage.name, survey.pages[1].name, "go to the second page automatically");
            survey.currentPage.questions[0].value = "3";
            survey.currentPage.questions[1].value = "4";
            dropDownQ.value = dropDownQ.otherItem.value;
            assert.equal(survey.currentPage.name, survey.pages[1].name, "stay on the second page");
            assert.notEqual(survey.state, "completed", "survey is still running");
            dropDownQ.comment = "other value";
            assert.equal(survey.state, "completed", "complete the survey");
        });
        QUnit.test("goNextPageAutomatic: should not work for complex questions like matrix, checkbox, multiple text", function (assert) {
            var questions = [];
            questions.push({ question: new Survey.QuestionCheckboxModel("check"), auto: false, value: [1] });
            questions.push({ question: new Survey.QuestionRadiogroupModel("radio"), auto: true, value: 1 });
            questions.push({ question: new Survey.QuestionDropdownModel("dropdown"), auto: true, value: 1 });
            questions.push({ question: new Survey.QuestionCommentModel("comment"), auto: false, value: "1" });
            questions.push({ question: new Survey.QuestionFileModel("file"), auto: false, value: "1" });
            questions.push({ question: new Survey.QuestionFileModel("html"), auto: false, value: null });
            questions.push({ question: new Survey.QuestionMatrixModel("matrix"), auto: false, value: [{ item1: 1 }] });
            questions.push({ question: new Survey.QuestionMatrixDropdownModel("matrixdropdown"), auto: false, value: [{ item1: 1 }] });
            questions.push({ question: new Survey.QuestionMatrixDynamicModel("matrixdynamic"), auto: false, value: [{ item1: 1 }] });
            questions.push({ question: new Survey.QuestionMultipleTextModel("multitext"), auto: false, value: [{ item1: "1" }] });
            questions.push({ question: new Survey.QuestionRatingModel("rating"), auto: true, value: 1 });
            questions.push({ question: new Survey.QuestionTextModel("text"), auto: true, value: "1" });
            var pageIndex = 0;
            for (var i = 0; i < questions.length; i++) {
                var q = questions[i];
                var survey = new Survey.SurveyModel();
                var page = survey.addNewPage("firstpage");
                page.addQuestion(q.question);
                survey.goNextPageAutomatic = true;
                if (q.value) {
                    q.question.value = q.value;
                }
                var state = q.auto ? "completed" : "running";
                assert.equal(survey.state, state, "goNextPageAutomatic is incorrect for question: " + q.question.name);
            }
        });
        QUnit.test("simple condition test", function (assert) {
            var survey = new Survey.SurveyModel({
                pages: [{ name: "page1",
                        questions: [
                            { type: "checkbox", name: "q1", choices: ["yes", "no"] },
                            { type: "checkbox", name: "q2", choices: ["yes", "no"] }]
                    }, { name: "page2", visibleIf: "{q1} = 'yes' or {q2} = 'no'",
                        questions: [
                            { type: "text", name: "q3", visibleIf: "{q1} = 'yes' and {q2} = 'no'", },
                            { type: "text", name: "q4" }]
                    }
                ]
            });
            var q3 = survey.getQuestionByName("q3");
            assert.equal(survey.pages[1].visible, false, "initially the page becomes invisible");
            assert.equal(q3.visible, false, "initially q3 becomes invisible");
            survey.setValue("q1", "yes");
            survey.setValue("q2", "no");
            assert.equal(survey.pages[1].visible, true, "the page becomes visible, q1 = 'yes'");
            assert.equal(q3.visible, true, "q3 becomes visible, q1 = 'yes' and q2 = 'no'");
            survey.setValue("q2", "yes");
            assert.equal(survey.pages[1].visible, true, "the page becomes visible, q1 = 'yes'");
            assert.equal(q3.visible, false, "q3 becomes invisible, q1 = 'yes' and q2 = 'yes'");
            survey.setValue("q1", "no");
            assert.equal(survey.pages[1].visible, false, "the page becomes invisible, q1 = 'no'");
            assert.equal(q3.visible, false, "q3becomes invisible, q1 = 'no' and q2 = 'yes'");
        });
        QUnit.test("multiple triger on checkbox stop working.", function (assert) {
            var survey = new Survey.SurveyModel({
                pages: [{
                        questions: [
                            { type: "checkbox", name: "question1", choices: ["one", "two", "three"] },
                            { type: "text", name: "question2", visible: false },
                            { type: "text", name: "question3", visible: false },
                            { type: "text", name: "question4", visible: false }]
                    }],
                triggers: [{ type: "visible", operator: "contains", value: "one", name: "question1", questions: ["question2"] },
                    { type: "visible", operator: "contains", value: "two", name: "question1", questions: ["question3"] }]
            });
            var check = survey.getQuestionByName("question1");
            var value = ["one"];
            check.value = value;
            assert.equal(survey.getQuestionByName("question2").visible, true, "The second question is visible");
            value.push("two");
            check.value = value;
            assert.equal(survey.getQuestionByName("question3").visible, true, "The third question is visible");
        });
        function twoPageSimplestSurvey() {
            var survey = new Survey.SurveyModel();
            var page = survey.addNewPage("Page 1");
            page.addNewQuestion("text", "question1");
            page.addNewQuestion("text", "question2");
            page = survey.addNewPage("Page 2");
            page.addNewQuestion("text", "question3");
            page.addNewQuestion("text", "question4");
            return survey;
        }
        function createPageWithQuestion(name) {
            var page = new Survey.PageModel(name);
            page.addNewQuestion("text", "q1");
            return page;
        }
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../src/base.ts" />
/// <reference path="../src/trigger.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Triggers");
        var TriggerTester = (function (_super) {
            __extends(TriggerTester, _super);
            function TriggerTester(succFunc, failureFunc) {
                if (succFunc === void 0) { succFunc = null; }
                if (failureFunc === void 0) { failureFunc = null; }
                _super.call(this);
                this.succFunc = succFunc;
                this.failureFunc = failureFunc;
            }
            TriggerTester.prototype.onSuccess = function () { if (this.succFunc)
                this.succFunc(); };
            TriggerTester.prototype.onFailure = function () { if (this.failureFunc)
                this.failureFunc(); };
            return TriggerTester;
        }(Survey.Trigger));
        var SurveyTriggerVisibleOwnerTester = (function () {
            function SurveyTriggerVisibleOwnerTester() {
                this.items = [{ name: 'Item1', visible: false }, { name: 'Item2', visible: true }];
            }
            SurveyTriggerVisibleOwnerTester.prototype.getObjects = function (pages, questions) { return this.items; };
            SurveyTriggerVisibleOwnerTester.prototype.doComplete = function () { };
            SurveyTriggerVisibleOwnerTester.prototype.setTriggerValue = function (name, value, isVariable) { };
            return SurveyTriggerVisibleOwnerTester;
        }());
        QUnit.test("Check trigger operations", function (assert) {
            var trigger = new TriggerTester(null);
            assert.equal(trigger.operator, "equal", "The default is equal");
            trigger.operator = "eq";
            assert.equal(trigger.operator, "equal", "There is no operator 'eq'");
            trigger.operator = "less";
            assert.equal(trigger.operator, "less", "It can be changed on 'less'");
        });
        QUnit.test("Simple custom trigger", function (assert) {
            var counterSuccess = 0;
            var counterFalure = 0;
            var trigger = new TriggerTester(function () { counterSuccess++; }, function () { counterFalure++; });
            trigger.value = 6;
            trigger.check(5);
            assert.equal(counterSuccess, 0, "5 != 6");
            assert.equal(counterFalure, 1, "5 != 6");
            trigger.check(6);
            assert.equal(counterSuccess, 1, "6 == 6");
            assert.equal(counterFalure, 1, "6 == 6");
            trigger.value = 2;
            trigger.operator = "contains";
            trigger.check([]);
            assert.equal(counterSuccess, 1, "2 in []");
            assert.equal(counterFalure, 2, "2 in []");
            trigger.check([2, 3]);
            assert.equal(counterSuccess, 2, "2 in [2, 3]");
            assert.equal(counterFalure, 2, "2 not in [2, 3]");
            trigger.value = 2;
            trigger.operator = "notcontains";
            trigger.check([]);
            assert.equal(counterSuccess, 3, "2 not in []");
            assert.equal(counterFalure, 2, "2 not in []");
            trigger.check([2, 3]);
            assert.equal(counterSuccess, 3, "2 not in []");
            assert.equal(counterFalure, 3, "2 not in [2, 3]");
        });
        QUnit.test("Visibility trigger", function (assert) {
            var owner = new SurveyTriggerVisibleOwnerTester();
            var trigger = new Survey.SurveyTriggerVisible();
            trigger.setOwner(owner);
            assert.equal(owner.items[0].visible, false, "By default the item.visible = false");
            trigger.value = 10;
            trigger.check(10);
            assert.equal(owner.items[0].visible, true, "The trigger should succeed");
            trigger.check(11);
            assert.equal(owner.items[0].visible, false, "The trigger should failed");
        });
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/base.ts" />
/// <reference path="../src/validator.ts" />
var Survey;
(function (Survey) {
    var Tests;
    (function (Tests) {
        QUnit.module("Validators");
        QUnit.test("Numeric validator", function (assert) {
            var validator = new Survey.NumericValidator();
            assert.notEqual(validator.validate("s5").error, null, "Could not convert to numeric");
            assert.equal(validator.validate(5), null, "There is no limits here");
            assert.equal(validator.validate("5").value, 5, "Convert to numeric");
            assert.equal(validator.validate("5").error, null, "There is no error");
            validator.minValue = 10;
            assert.notEqual(validator.validate(5).error, null, "There is should be an error. The value is low.");
            validator.maxValue = 20;
            assert.notEqual(validator.validate(25).error, null, "There is should be an error. The value is high.");
            assert.equal(validator.validate("15").error, null, "There value is between minValue and maxValue");
            assert.equal(validator.validate(15), null, "everything is fine - return null");
        });
        QUnit.test("Email validator", function (assert) {
            var validator = new Survey.EmailValidator();
            assert.equal(validator.validate("my@mail.com"), null, "Could convert the correct e-mail");
            assert.notEqual(validator.validate("@mail.com").error, null, "Could convert the incorrect correct e-mail");
        });
    })(Tests = Survey.Tests || (Survey.Tests = {}));
})(Survey || (Survey = {}));

/// <reference path="../src/textPreProcessor.ts" />
var Survey;
(function (Survey) {
    var TextPreprocessorTests;
    (function (TextPreprocessorTests) {
        QUnit.module("TextPreprocessorTests");
        QUnit.test("Replace simple names", function (assert) {
            var processor = new Survey.TextPreProcessor();
            processor.onProcess = function (name) { return "aaa" + name; };
            var result = processor.process("test1 {111} test2");
            assert.equal(result, "test1 aaa111 test2", "in the middle");
            result = processor.process("{111} test2");
            assert.equal(result, "aaa111 test2", "at the start");
            result = processor.process("test1{111}");
            assert.equal(result, "test1aaa111", "at the end");
            result = processor.process("test1{aaa bbb}");
            assert.equal(result, "test1{aaa bbb}", "do not process several words");
            result = processor.process("test1{aaa-bbb}");
            assert.equal(result, "test1{aaa-bbb}", "do not process several words separed by any symbols");
            result = processor.process("test1{   bbb   }");
            assert.equal(result, "test1aaabbb", "removespaces");
            result = processor.process("test1{ }");
            assert.equal(result, "test1{ }", "do not process empty");
        });
        QUnit.test("onHasValue event", function (assert) {
            var processor = new Survey.TextPreProcessor();
            processor.onProcess = function (name) { return "Andrew"; };
            processor.onHasValue = function (name) { return name == "myname"; };
            var result = processor.process("test1 {name} test2");
            assert.equal(result, "test1 {name} test2", "do not process - name is unknown");
            var result = processor.process("test1 {myname} test2");
            assert.equal(result, "test1 Andrew test2", "process successfull");
        });
    })(TextPreprocessorTests = Survey.TextPreprocessorTests || (Survey.TextPreprocessorTests = {}));
})(Survey || (Survey = {}));

/// <reference path="../../src/base.ts" />
/// <reference path="../../src/survey.ts" />
/// <reference path="../../src/knockout/kosurvey.ts" />
/// <reference path="../../src/knockout/standard/kosurveystandard.ts" />
/// <reference path="../../src/knockout/kopage.ts" />
/// <reference path="../../src/knockout/koquestion_rating.ts" />
/// <reference path="../../src/question.ts" />
/// <reference path="../../src/page.ts" />
/// <reference path="../../src/question_baseselect.ts" />
/// <reference path="../../src/question_checkbox.ts" />
/// <reference path="../../src/question_matrix.ts" />
/// <reference path="../../src/question_multipletext.ts" />
var SurveykoTests;
(function (SurveykoTests) {
    QUnit.module("koTests");
    QUnit.test("Serialize two pages", function (assert) {
        var survey = new Survey.Survey();
        survey.addNewPage("Page 1");
        survey.addNewPage("Page 2");
        assert.ok(survey.pages[0]["koNo"], "creates the koPage class");
        var jsObj = new Survey.JsonObject().toJsonObject(survey);
        assert.equal(JSON.stringify(jsObj), "{\"pages\":[{\"name\":\"Page 1\"},{\"name\":\"Page 2\"}]}", "serialize two pages");
    });
    QUnit.test("Deserialize two pages", function (assert) {
        var survey = new Survey.Survey();
        new Survey.JsonObject().toObject({ "pages": [{ "name": "Page1" }, { "name": "Page2" }] }, survey);
        assert.equal(survey.pages.length, 2, "Two pages from json");
        assert.ok(survey.pages[0]["koNo"], "creates the koPage class");
    });
    QUnit.test("Deserialize rate widget, custom rateValues", function (assert) {
        var survey = new Survey.Survey();
        new Survey.JsonObject().toObject({ pages: [{ questions: [{ type: "rating", name: "question7", rateValues: [{ value: "1", text: "A" }, "B", "C", "D"] }] }] }, survey);
        var question = survey.pages[0].questions[0];
        assert.equal(question.visibleRateValues[1].value, "B", "correctly deserialized");
    });
})(SurveykoTests || (SurveykoTests = {}));

/// <reference path="../../src/base.ts" />
/// <reference path="../../src/survey.ts" />
/// <reference path="../../src/knockout/kosurvey.ts" />
/// <reference path="../../src/knockout/standard/kosurveystandard.ts" />
/// <reference path="../../src/knockout/kopage.ts" />
/// <reference path="../../src/question.ts" />
/// <reference path="../../src/page.ts" />
/// <reference path="../../src/question_baseselect.ts" />
/// <reference path="../../src/knockout/koquestion_checkbox.ts" />
/// <reference path="../../src/knockout/koquestion_matrix.ts" />
/// <reference path="../../src/knockout/koquestion_matrixdropdown.ts" />
/// <reference path="../../src/knockout/koquestion_dropdown.ts" />
/// <reference path="../../src/knockout/koquestion_multipletext.ts" />
/// <reference path="../../src/knockout/koquestion_text.ts" />
var SurveykoTests;
(function (SurveykoTests) {
    QUnit.module("koTests");
    QUnit.test("Survey.koCurrentPage", function (assert) {
        var survey = new Survey.Survey();
        survey.addPage(createPageWithQuestion("Page 1"));
        survey.addPage(createPageWithQuestion("Page 2"));
        survey.addPage(createPageWithQuestion("Page 3"));
        assert.equal(survey.currentPage, survey.pages[0], "the first page is current");
        assert.equal(survey.koCurrentPage(), survey.currentPage, "ko current page is equal");
        assert.equal(survey.koIsFirstPage(), true, "is first page");
        assert.equal(survey.koIsLastPage(), false, "is first page");
        survey.nextPage();
        assert.equal(survey.koCurrentPage(), survey.pages[1], "ko current page is equal");
        assert.equal(survey.koIsFirstPage(), false, "is second page");
        assert.equal(survey.koIsLastPage(), false, "is second page");
        survey.nextPage();
        assert.equal(survey.koCurrentPage(), survey.pages[2], "ko current page is equal");
        assert.equal(survey.koIsFirstPage(), false, "is last page");
        assert.equal(survey.koIsLastPage(), true, "is last page");
    });
    QUnit.test("Set value through observable value", function (assert) {
        var question = new Survey.QuestionText("q");
        question["koValue"]("test");
        assert.equal(question.value, "test", "value is set correctly.");
    });
    QUnit.test("koOtherVisible for one choice items", function (assert) {
        var question = new Survey.QuestionDropdown("q");
        assert.equal(question["koOtherVisible"](), false, "Initially is not visible");
        question["koValue"](question.otherItem.value);
        assert.equal(question["koOtherVisible"](), true, "Other visible is true after selecting it");
    });
    QUnit.test("Create koValue as observable array for checkbox", function (assert) {
        var question = new Survey.QuestionCheckbox("q");
        question["koValue"].push("test1");
        question["koValue"].push("test2");
        assert.deepEqual(question["koValue"](), ["test1", "test2"], "koValue is observable array");
        assert.deepEqual(question.value, ["test1", "test2"], "value is set correctly.");
    });
    QUnit.test("Default value for checkbox", function (assert) {
        var survey = new Survey.Survey();
        survey.addNewPage("p1");
        var question = new Survey.QuestionCheckbox("q");
        survey.pages[0].addQuestion(question);
        assert.deepEqual(question["koValue"](), [], "the koValue by default should be empty array");
    });
    QUnit.test("koOtherVisible for multi choice items", function (assert) {
        var question = new Survey.QuestionCheckbox("q");
        assert.equal(question["koOtherVisible"](), false, "Initially is not visible");
        question["koValue"].push("test1");
        question["koValue"].push(question.otherItem.value);
        assert.equal(question["koOtherVisible"](), true, "Other visible is true after selecting it");
        question["koValue"].pop();
        assert.equal(question["koOtherVisible"](), false, "Other visible is true after selecting it");
    });
    QUnit.test("Update koValue on changing data in Survey or Question.value ", function (assert) {
        var survey = new Survey.Survey();
        survey.setValue("textQuestion", "initialValue");
        var page = survey.addNewPage("my page");
        var question = page.addNewQuestion("text", "textQuestion");
        assert.equal(question["koValue"](), "initialValue", "get initial value");
        question.value = "setFromValue";
        assert.equal(question["koValue"](), "setFromValue", "set from question value");
        survey.setValue("textQuestion", "setFromSurvey");
        assert.equal(question["koValue"](), "setFromSurvey", "set from survey");
    });
    QUnit.test("Update koValue on changing data in Survey or Question.value for Multiple Answer Question ", function (assert) {
        var survey = new Survey.Survey();
        survey.setValue("checkboxQuestion", "initialValue");
        var page = survey.addNewPage("my page");
        var question = page.addNewQuestion("checkbox", "checkboxQuestion");
        assert.deepEqual(question["koValue"](), ["initialValue"], "get initial value");
        question.value = "setFromValue";
        assert.deepEqual(question["koValue"](), ["setFromValue"], "set from question value");
        survey.setValue("checkboxQuestion", "setFromSurvey");
        assert.deepEqual(question["koValue"](), ["setFromSurvey"], "set from survey");
    });
    QUnit.test("Question Matrix: koValue in MatrixValue", function (assert) {
        var matrix = new Survey.QuestionMatrix("q1");
        matrix.rows = ["row1", "row2"];
        matrix.columns = ["col1", "col2"];
        matrix.value = { row1: "col2" };
        var visibleRows = matrix.visibleRows;
        assert.equal(visibleRows[0]["koValue"](), "col2", "set the correct value");
        visibleRows[0]["koValue"]("col1");
        visibleRows[1]["koValue"]("col2");
        assert.deepEqual(matrix.value, { row1: "col1", row2: "col2" }, "the matrix value changed correctly");
    });
    QUnit.test("Question Matrix: change matrix value after visibleRows generation", function (assert) {
        var matrix = new Survey.QuestionMatrix("q1");
        matrix.rows = ["row1", "row2"];
        matrix.columns = ["col1", "col2"];
        var visibleRows = matrix.visibleRows;
        matrix.value = { row1: "col2" };
        assert.equal(visibleRows[0]["koValue"](), "col2", "set the correct value");
    });
    QUnit.test("Question MatrixDropdown: change matrix value after visibleRows generation", function (assert) {
        var matrix = new Survey.QuestionMatrixDropdown("q1");
        matrix.rows = ["row1", "row2", "row3"];
        matrix.columns.push(new Survey.MatrixDropdownColumn("column1"));
        matrix.columns.push(new Survey.MatrixDropdownColumn("column2"));
        matrix.choices = [1, 2, 3];
        matrix.columns[1].choices = [4, 5];
        var visibleRows = matrix.visibleRows;
        matrix.value = { 'row2': { 'column1': 2 } };
        assert.equal(visibleRows[1].cells[0].question["koValue"](), 2, "value was set");
    });
    QUnit.test("Question MultipleText: koValue in TextItem", function (assert) {
        var mQuestion = new Survey.QuestionMultipleText("q1");
        mQuestion.items.push(new Survey.MultipleTextItem("i1"));
        mQuestion.items.push(new Survey.MultipleTextItem("i2"));
        mQuestion.value = { i1: 10 };
        assert.equal(mQuestion.items[0]["koValue"](), 10, "set the correct value to item.koValue from question");
        mQuestion.items[0]["koValue"](20);
        assert.equal(mQuestion.items[0]["koValue"](), 20, "set the correct value to item.koValue from question item");
        assert.deepEqual(mQuestion.value, { i1: 20 }, "set the correct value to question.Value from question item");
        mQuestion.value = null;
        assert.equal(mQuestion.items[0]["koValue"](), null, "empty the value");
    });
    QUnit.test("Question MultipleText: koRows", function (assert) {
        var mQuestion = new Survey.QuestionMultipleText("q1");
        mQuestion.items.push(new Survey.MultipleTextItem("i1"));
        mQuestion.items.push(new Survey.MultipleTextItem("i2"));
        mQuestion.colCount = 2;
        assert.equal(mQuestion["koRows"]().length, 1, "just one row");
        assert.equal(mQuestion["koRows"]()[0].length, 2, "two items in one row");
        mQuestion.colCount = 1;
        assert.equal(mQuestion["koRows"]().length, 2, "two rows now");
        assert.equal(mQuestion["koRows"]()[0].length, 1, "just one item in the first row");
    });
    QUnit.test("Set notification on setting survey data", function (assert) {
        var survey = new Survey.Survey();
        var page = survey.addNewPage("page1");
        var question = page.addNewQuestion("text", "q1");
        question["koValue"]("value1");
        survey.data = { "q1": "value2" };
        assert.equal(survey.getValue("q1"), "value2", "survey data for q1");
        assert.equal(question["koValue"](), "value2", "knockout value is updated.");
    });
    QUnit.test("On make survey data empy for Multiple text question", function (assert) {
        var survey = new Survey.Survey();
        var page = survey.addNewPage("page1");
        var question = new Survey.QuestionMultipleText("q1");
        page.addQuestion(question);
        question.items.push(new Survey.MultipleTextItem("i1"));
        question.items.push(new Survey.MultipleTextItem("i2"));
        question.value = { i1: 10 };
        survey.data = null;
        assert.equal(question.items[0]["koValue"](), null, "Make the data empty");
    });
    QUnit.test("koVisible property", function (assert) {
        var survey = new Survey.Survey();
        var page = survey.addNewPage("page1");
        var question = page.addNewQuestion("text", "q1");
        assert.equal(question["koVisible"](), true, "it is true by default");
        question.visible = false;
        assert.equal(question["koVisible"](), false, "it is false now");
    });
    QUnit.test("koComment property", function (assert) {
        var survey = new Survey.Survey();
        survey.data = { q: "other", "q-Comment": "aaaa" };
        var page = survey.addNewPage("page1");
        var question = new Survey.QuestionDropdown("q");
        page.addQuestion(question);
        question.choices = ["A", "B", "C", "D"];
        assert.equal(question["koComment"](), "aaaa", "Set ko Comment");
    });
    QUnit.test("Load title correctly from JSON", function (assert) {
        var survey = new Survey.Survey({ questions: [{ type: "text", name: "question1" }] });
        assert.equal(survey.pages[0].questions[0]["koTitle"](), "1. question1", "title is getting from name");
    });
    function createPageWithQuestion(name) {
        var page = new Survey.Page(name);
        page.addNewQuestion("text", "q1");
        return page;
    }
})(SurveykoTests || (SurveykoTests = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../../src/base.ts" />
/// <reference path="../../src/knockout/templatetext.ts" />
var SurveykoTests;
(function (SurveykoTests) {
    QUnit.module("Template Text");
    var SurveyTemplateTextTest = (function (_super) {
        __extends(SurveyTemplateTextTest, _super);
        function SurveyTemplateTextTest(template) {
            _super.call(this);
            this.template = template;
        }
        Object.defineProperty(SurveyTemplateTextTest.prototype, "text", {
            get: function () { return this.template; },
            set: function (value) { this.template = value; },
            enumerable: true,
            configurable: true
        });
        return SurveyTemplateTextTest;
    }(Survey.SurveyTemplateTextBase));
    SurveykoTests.SurveyTemplateTextTest = SurveyTemplateTextTest;
    QUnit.test("Replace the page", function (assert) {
        var template = new SurveyTemplateTextTest('<script type="text/ html" id="survey-page">Test1</script>');
        template.replaceText("MyTest", "page");
        assert.equal(template.template, '<script type="text/ html" id="survey-page">MyTest</script>', "the template page replaced correctly");
    });
    QUnit.test("Replace the question", function (assert) {
        var template = new SurveyTemplateTextTest('<script type="text/ html" id="survey-question">Test1</script>');
        template.replaceText("MyTest", "question");
        assert.equal(template.template, '<script type="text/ html" id="survey-question">MyTest</script>', "the template question replaced correctly");
    });
    QUnit.test("Replace the rating question", function (assert) {
        var template = new SurveyTemplateTextTest('<script type="text/ html" id="survey-question-rating">Test1</script>');
        template.replaceText("MyTest", "question", "rating");
        assert.equal(template.template, '<script type="text/ html" id="survey-question-rating">MyTest</script>', "the template question replaced correctly");
    });
})(SurveykoTests || (SurveykoTests = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
